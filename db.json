{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/fingerprint.jpg","path":"images/fingerprint.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/images/avatar_960_960.jpg","path":"images/avatar_960_960.jpg","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"0da176ffb3d5a7ba64c391ea270eafde84db2e56","modified":1540437997626},{"_id":"themes/next/.DS_Store","hash":"952ec6a336a1b63957ecedae94bb944e02ff3fcc","modified":1541401547279},{"_id":"themes/next/.all-contributorsrc","hash":"e32dc4075e304af04b98d0726d489081bea722c0","modified":1541401891872},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1541401891873},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1541401891873},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1541401891874},{"_id":"themes/next/.gitignore","hash":"bf6400ebc2fbf908ca69f53bf11b1c5562970a5a","modified":1541402076413},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1541401891874},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1540609879564},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1541401891878},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1541401891879},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1541401891879},{"_id":"themes/next/bower.json","hash":"23379fec9b4f70bc2611433ac3770445a8ca18d9","modified":1541401891882},{"_id":"themes/next/README.md","hash":"ee7119baf976616a84d3c9c10fcab567995dc98e","modified":1541401891880},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1541401891882},{"_id":"themes/next/_config.yml","hash":"52bd441066b8dc6fe4e3d091b5940ab2fa79d9c1","modified":1541403102272},{"_id":"themes/next/package.json","hash":"901c9bf4743df8f1806b5bcb5e93b54f6aee0ea3","modified":1541401891935},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1541401891894},{"_id":"source/_posts/2018-10-bash-process-watcher.md","hash":"ed7dcce8c9d6b43e44c53930fa6cc7fd1ad965bc","modified":1540272352570},{"_id":"source/_posts/2018-10-bash-args.md","hash":"65d289064977f97225448778a72510978928784d","modified":1540264411324},{"_id":"source/_posts/2018-10-es-server-config.md","hash":"64b9ab0df132b23c6740636379d0c62fceae2383","modified":1540264918844},{"_id":"source/_posts/2018-10-custom-handler-method-argument-resolver.md","hash":"0aa0f8fe2aac469a7274f3e1f99b8cc1fccbe4dc","modified":1541401238460},{"_id":"source/_posts/2018-10-git-credential.md","hash":"05302bdf05d9bc2854d4052930a3f2a52fefbf5e","modified":1541401891868},{"_id":"source/_posts/2018-10-spring-custom-scope.md","hash":"9284cc7592c34eeb04a2e48220046a09eb8ecb1a","modified":1541401238460},{"_id":"source/_posts/2018-10-rsync.md","hash":"9318055999b9e0c1cda34212c905d2304d5b4102","modified":1541401891868},{"_id":"source/_posts/2018-11-git-remove-commit.md","hash":"695c8295593e0a3754127e401e805c24cef99614","modified":1542121304798},{"_id":"source/_posts/2018-10-use-of-application-context-aware.md","hash":"afb8d619eb1b744e7753d44cb7d6432d20f9dabc","modified":1541401238460},{"_id":"source/_posts/2018-10-springmvc-resquest-flow.md","hash":"8ceefa487a86b2e0e2a72b4b2776022556e125ac","modified":1541401891869},{"_id":"source/_posts/2018-10-linux-mount-harddisk.md","hash":"72c5fef0b26ba68ea199724104ebb3b690457a78","modified":1540263532062},{"_id":"source/_posts/2018-11-ssh-remote-command.md","hash":"40c3a47015758f18f7bb3e2e4d1e1cd64b47e8a9","modified":1541401891871},{"_id":"source/images/fingerprint.jpg","hash":"fda6b9c66b78bc4ff760978b48431bb95ab5d9f0","modified":1541401238472},{"_id":"source/tags/index.md","hash":"0ad168e3fe7d209c4f2a2d13a72950adfb113b2a","modified":1540258503061},{"_id":"source/categories/index.md","hash":"35e8064644f4c139653d4134005ef4def8404848","modified":1540258645491},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1541401891875},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1541401891876},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1541401891876},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1541401891877},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1541401891876},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1541401891877},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1541401891884},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1541401891884},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1541401891885},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1541401891886},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1541401891887},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1541401891885},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1541401891887},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1541401891886},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1541401891883},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1541401891894},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1541401891895},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1541401891895},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1541401891895},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1541401891896},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1541401891896},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1541401891895},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1541401891897},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1541401891897},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1541401891898},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1541401891898},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1541401891898},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1541401891899},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1541401891899},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1541401891900},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1541401891900},{"_id":"themes/next/layout/_layout.swig","hash":"85de0662a1b136277a72f8d8b4b1425a006f377e","modified":1541401891902},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1541401891900},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1541401891932},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1541401891933},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1541401891934},{"_id":"themes/next/layout/page.swig","hash":"862b361852fb6d7a95bfb6077922410a33cd3126","modified":1541401891934},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1541401891934},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1541401891936},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1541401891936},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1541401891935},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1541401891937},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1541401891933},{"_id":"themes/next/source/.DS_Store","hash":"4d76a69ed91c3fde09d9ab7a01348e4fb14a3134","modified":1541687633883},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1541401892005},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1541401892005},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1541401892005},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891985},{"_id":"source/_posts/2018-10-springmvc-resquest-flow/springmvc_class.jpg","hash":"92969779b030f6879da14bf7a769898be2db0b4a","modified":1541401891871},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1541401891888},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1541401891889},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1541401891888},{"_id":"themes/next/docs/ru/README.md","hash":"c54e256ed11a84ee38f755d6f35a3e6e29a91dbc","modified":1541401891889},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1541401891889},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1541401891890},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1541401891890},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1541401891891},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1541401891891},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1541401891892},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"8ac2f5d2a023211d8d8ea626cbf6b8dea67ac201","modified":1541401891892},{"_id":"themes/next/docs/zh-CN/README.md","hash":"aa6808f4f587c1a97205fa9427ba96a366bcb288","modified":1541401891893},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1541401891893},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1541401891901},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1541401891901},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1541401891902},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1541401891903},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1541401891904},{"_id":"themes/next/layout/_macro/post.swig","hash":"5767eccaf3951151e01c61189016932e9516c8b9","modified":1541401891905},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1541401891904},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1541401891905},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1541401891906},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1541401891906},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1541401891907},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d15a983de60d4c0bdd23cd31cd49de876ed2310c","modified":1541401891907},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1541401891907},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1541401891911},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1541401891911},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1541401891915},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1541401891914},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1541401891916},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1541401891915},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1541401891923},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1541401891925},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1541401891926},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1541401891928},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1541401891928},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1541401891926},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1541401891929},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1541401891928},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1541401891929},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1541401891937},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1541401891938},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1541401891938},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"981e01aaf45a1f0f23ce0796d03134f9e437aaca","modified":1541401891939},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1541401891939},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1541401891940},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1541401891940},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1541401891941},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1541401891938},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1541401891985},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1541401891985},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1541401891986},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1541401891988},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1541401891986},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1541401891988},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1541401891987},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1541401891989},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1541401891990},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1541401891990},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1541401891991},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1541401891988},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1541401891992},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541401891991},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1541401891991},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541401891992},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1541401891993},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1541401891994},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1541401891993},{"_id":"themes/next/source/lib/.DS_Store","hash":"854e7eddedc7547b3a63b50f1f4ec2c428badc0b","modified":1541401706931},{"_id":"source/images/alipay.jpg","hash":"7cfce0fbf312a4998a7a9991ca4b1deadaec7bb9","modified":1540262585818},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891916},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891916},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891972},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891972},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891973},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891983},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891984},{"_id":"source/_posts/2018-10-springmvc-resquest-flow/DispatcherServletSequence.jpg","hash":"f7d9a296a3d6234177dcf60b54a859a19e2ed26a","modified":1541401891870},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1541401891903},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1541401891903},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1541401891908},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1541401891908},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1541401891909},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1541401891909},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1541401891910},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1541401891910},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1541401891910},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1541401891911},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1541401891912},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1541401891912},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1541401891912},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1541401891913},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1541401891913},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1541401891914},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1541401891916},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1541401891915},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1541401891916},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1541401891917},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1541401891917},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1541401891918},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1541401891919},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1541401891918},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"07307f1f0e0e9858f2c7143cbdfcb2a9a92149ab","modified":1541401891918},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1541401891919},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1541401891920},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5dbeb640707a9c91357e373b9063a48c8e78f439","modified":1541401891920},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1541401891921},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1541401891921},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1541401891921},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1541401891922},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1541401891922},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1541401891923},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"03ef008bc95e8e83232e5464a6c63d6157d33a5e","modified":1541401891923},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"e3266bb5fa28e08993f0289bca099b30259947f6","modified":1541401891924},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1541401891924},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"2c74a96dd314e804d801f8773ac1b2e0a970fce3","modified":1541401891924},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1541401891925},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1541401891926},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1541401891927},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1541401891927},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1541401891931},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1541401891931},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1541401891931},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1541401891932},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1541401891971},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1541401891971},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1541401891972},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"59961fb806a39c367fd19ad37268eee112be6729","modified":1541401891973},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1541401891983},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1541401891983},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1541401891984},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f9b83d0385529e52ce7ba95ed5ed6b3d4e2419bb","modified":1541401891984},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1541401891994},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1541401891995},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1541401891996},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1541401891995},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1541401891996},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1541401891997},{"_id":"themes/next/source/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1541401891997},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1541401891998},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1541401891998},{"_id":"themes/next/source/js/src/utils.js","hash":"66f2ac658d6110f70a86f784d0c5d891a97c14bd","modified":1541401891999},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1541401445849},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1541401445849},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1541401445849},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1541401445849},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1541401445850},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1541401932068},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1541401932068},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1541401932069},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1541401932069},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1541401932070},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1541401932070},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1541401932070},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1541401932071},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1541401932071},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1541401932070},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1541401932071},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1541401932072},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1541401932074},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1541401932073},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1541401932074},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1541401932075},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1541401892003},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1541401892004},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1541401892004},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1541401892000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1541401891930},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1541401891930},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b4a2f1d031fe44452cf55ded8211cf018235073a","modified":1541401891941},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1541401891941},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1541401891942},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1541401891942},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1541401891943},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1541401891950},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1541401891962},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1541401891968},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"b75256fe3768b1a37b6ff6dd7f9f0ff135a42067","modified":1541401891969},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1541401891969},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"efc40a32487e0ac7b94b1ca81bdbdcc4ec8f2924","modified":1541401891969},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1541401891970},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1541401891970},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"02d138ed65060e98f20bc5b1dd59a791222b7156","modified":1541401891971},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"665b1813a1d6fbc3c5549a76e4f26cd62a804dde","modified":1541401891973},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1541401891974},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1541401891974},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1541401891975},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1541401891975},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1541401891975},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1541401891976},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1541401891976},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1541401891978},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1541401891978},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1541401891978},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1541401891979},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1541401891979},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1541401891980},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1541401891980},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1541401891981},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1541401891981},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1541401891982},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1541401891982},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1541401891982},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"89267bd16ecbedd1958af7f0fb3f4f654d24fffa","modified":1541401891997},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1541401445850},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1541401445850},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1541401445851},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1541401445856},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1541401445855},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541401445854},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541401445853},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1541401892002},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1541401891944},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1541401891943},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1541401891944},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1541401891944},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1541401891945},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1541401891945},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1541401891946},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"a6dc3c7eb81ef5117c28fa2245fff1adc02d0292","modified":1541401891947},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1541401891948},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1541401891947},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1541401891946},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1541401891948},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1541401891948},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1541401891949},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1541401891949},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f2911a048e5c20ca2a059bd1087d98ac1c51681c","modified":1541401891950},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1541401891952},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1541401891951},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1541401891951},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1541401891953},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1541401891952},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1541401891953},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1541401891952},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1541401891954},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1541401891954},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1541401891955},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1541401891955},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1541401891956},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1541401891956},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"fcbbf06b546c366d70b7d2ba5880b0be3ca1e8ea","modified":1541401891956},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1541401891957},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1541401891958},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"6089cbf4c907fe198b6501e40dc937480d0be175","modified":1541401891957},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1541401891958},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1541401891958},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1541401891960},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1541401891959},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1541401891960},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1541401891960},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1541401891961},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1541401891961},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1541401891961},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1541401891962},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1541401891963},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1541401891963},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1541401891963},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1541401891964},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1541401891964},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1541401891965},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1541401891965},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1541401891964},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1541401891966},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1541401891966},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1541401891966},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1541401891967},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1541401891967},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1541401891967},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1541401891968},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1541401891977},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1541401891977},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1541401891979},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541401445852},{"_id":"source/images/avatar_960_960.jpg","hash":"bf4f8fcc944e07cdfca4fb198006568fd9feb478","modified":1541401238471},{"_id":"source/images/avatar.jpg","hash":"372932391107374853e47255cf366be19f19a22b","modified":1541401238469},{"_id":"public/baidusitemap.xml","hash":"b6d3a5ec42aaf5e50829e8e5682e883c7b59af1c","modified":1542121317801},{"_id":"public/search.xml","hash":"2771c45f811d9070ca70b599f2220a987c3bd650","modified":1542121317820},{"_id":"public/sitemap.xml","hash":"22dda2a378d4608cb261a4b7143e9f49b046f2af","modified":1542121317802},{"_id":"public/tags/index.html","hash":"9e17291f3a2a97e10e2ba8708c98850f4cfc4fa0","modified":1541593204720},{"_id":"public/categories/index.html","hash":"96e031784285d7cf913beb90e53b6ff2d6c0f43f","modified":1541593204720},{"_id":"public/2018/11/03/ssh-remote-command/index.html","hash":"60497da4a6651272cd71974babeb3d72511b9262","modified":1541593204721},{"_id":"public/2018/10/30/springmvc-resquest-flow/index.html","hash":"7f9b741ba5c62e2194e28ea80da6e895e8615574","modified":1541593204721},{"_id":"public/2018/10/29/git-credential/index.html","hash":"603476b7ed3218d69bc0421c1dd714accc84bbe7","modified":1541593204721},{"_id":"public/2018/10/26/use-of-application-context-aware/index.html","hash":"e40603fcca5d2c709ab6112d00014f0527c193ec","modified":1541593204721},{"_id":"public/2018/10/24/custom-handler-method-argument-resolver/index.html","hash":"6f0b66a6160038b16800d1311f82137f294cca95","modified":1541593204721},{"_id":"public/2018/10/24/spring-custom-scope/index.html","hash":"74112155b242006cac1f91195679e85c5e1b6e0f","modified":1541593204721},{"_id":"public/2018/10/23/bash-process-watcher/index.html","hash":"5256d4f77060a37ea45d5006feeb0fa66cd5a44d","modified":1541593204722},{"_id":"public/2018/10/23/es-server-config/index.html","hash":"3d23bff5236f30ec6207e7135d42d6f6a9fcb626","modified":1541593204722},{"_id":"public/2018/10/23/bash-args/index.html","hash":"7d4181431a4d88049cb16c05b232e79ca10faa93","modified":1541593204722},{"_id":"public/2018/10/23/linux-mount-harddisk/index.html","hash":"7cec1f4969d40c1484c43ac53c7c9f318aaadaa8","modified":1541593204722},{"_id":"public/2018/10/23/rsync/index.html","hash":"f4c672b000c880029412eacc0cd6f9810f379cbd","modified":1541593204722},{"_id":"public/archives/index.html","hash":"faa36be48db2ebd435f63605b2a5be9e248b550e","modified":1541593204722},{"_id":"public/archives/page/2/index.html","hash":"7834fbf39a8974e8c12719d50d7ceeacf9dfd267","modified":1541593204722},{"_id":"public/archives/2018/index.html","hash":"763541faad26fa014c302a97222b561de221fb4d","modified":1541593204722},{"_id":"public/archives/2018/page/2/index.html","hash":"8b5ad4df2ebd38317bc9edc6ac9f062019e7db71","modified":1541593204722},{"_id":"public/archives/2018/10/index.html","hash":"059d49ed72279ccebde4e2d8abf773850e4402bc","modified":1541593204722},{"_id":"public/archives/2018/11/index.html","hash":"bd74cb5ba653b3ad1740a76968a2b282397af2cf","modified":1541593204722},{"_id":"public/index.html","hash":"4feada760007ba349276239869485d29e106f774","modified":1542121317824},{"_id":"public/page/2/index.html","hash":"bbc655cc5d68bbb6497cc7c8d2dafb30e6a175c3","modified":1541593204722},{"_id":"public/categories/运维/index.html","hash":"f95e0aecb339016d7e36cf9ede74c2a1b76875d8","modified":1541593204723},{"_id":"public/categories/spring/index.html","hash":"60275107921cd8ee06d1ac09a9ac1f44d2d97247","modified":1541593204723},{"_id":"public/categories/git/index.html","hash":"1728a59778e262f9b5742f68207fe31c222a3526","modified":1541593204723},{"_id":"public/categories/bean/index.html","hash":"60b85fdd9dd9cd14e6988eb5637b0d0fb2998885","modified":1541593204723},{"_id":"public/categories/spring源码解析/index.html","hash":"e553546a2f5d7efe4c7b854cc11a95db47a36135","modified":1541593204723},{"_id":"public/tags/bash/index.html","hash":"9e266cacb5e20b5f02e837eb7ef082e2a8028c3e","modified":1541593204723},{"_id":"public/tags/args/index.html","hash":"c59e231cf57aafee1ad0abe60dbcb4392594f509","modified":1541593204723},{"_id":"public/tags/elasticsearch/index.html","hash":"681bba9d7a6497ad10cac543078b582087bf68fc","modified":1541593204723},{"_id":"public/tags/spring/index.html","hash":"01d2c45b99dcdaa4f8769101d36346c8a7058172","modified":1541593204723},{"_id":"public/tags/handlerMethodResolver/index.html","hash":"8c16765d6dbf666a90bbaa0ba9e11a4b0a0bafad","modified":1541593204723},{"_id":"public/tags/git/index.html","hash":"173d30d6f9aed8d63abb5ec611216342b39986ff","modified":1541593204723},{"_id":"public/tags/springMvc/index.html","hash":"8c8f0a938d87e13082f0a5911fbd76b1a1098ebf","modified":1541593204723},{"_id":"public/tags/command/index.html","hash":"e3e2bcf11ef7f0e597580d66f93a7656a0681f7a","modified":1541593204723},{"_id":"public/tags/node/index.html","hash":"897d5dff60e583ece07cfd05bf2fd79c6c1bcf5b","modified":1541593204723},{"_id":"public/tags/scope/index.html","hash":"bbf504513e5da07de477e619217ac1226763d6df","modified":1541593204723},{"_id":"public/tags/java/index.html","hash":"e2a9ebfe1bf01d3050b746a79917685168eac822","modified":1541593204723},{"_id":"public/tags/译/index.html","hash":"0d36465414e5247772fc9162dc2e189449b68286","modified":1541593204723},{"_id":"public/tags/sync/index.html","hash":"b668a976036db17bcf81222b7ef5a774a77b6269","modified":1541593204723},{"_id":"public/tags/源码解析/index.html","hash":"7b37876a7df8486c1ac0129f8be6022d81838d13","modified":1541593204724},{"_id":"public/tags/springMVC/index.html","hash":"f7e808a5b49ba27ef97d111bdf2fb3e3b0fc0216","modified":1541593204724},{"_id":"public/tags/harddisk/index.html","hash":"283c8df5e09adf3f0d60512ad5ebfc58c3c43eff","modified":1541593204724},{"_id":"public/tags/linux/index.html","hash":"06912cf317ea9b0d18a23f0a770e866d7c30bd0f","modified":1541593204724},{"_id":"public/tags/mount/index.html","hash":"b583887f2c9610e30aec37250d91a917b078bf80","modified":1541593204724},{"_id":"public/tags/format/index.html","hash":"31c517bdfece01331373fc30d71e3b7048692c68","modified":1541593204724},{"_id":"public/tags/ssh/index.html","hash":"599bd6fbbcc47dabbd2115cfa6e069295dc2d3a0","modified":1541593204724},{"_id":"public/tags/remote/index.html","hash":"0ffe1925feae803a7de3b0f5d8709bdf6be8138f","modified":1541593204724},{"_id":"public/2018/11/07/git-remove-commit/index.html","hash":"3a9a2d2df2396cf37ca86b8377484ac1057b19a2","modified":1542121317824},{"_id":"public/images/fingerprint.jpg","hash":"fda6b9c66b78bc4ff760978b48431bb95ab5d9f0","modified":1541593204733},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1541593204733},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1541593204733},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1541593204733},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1541593204733},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1541593204733},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1541593204733},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1541593204733},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1541593204734},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1541593204734},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1541593204734},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1541593204734},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1541593204734},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541593204734},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1541593204734},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541593204734},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1541593204734},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1541593204734},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1541593204734},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1541593204734},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1541593204734},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1541593204734},{"_id":"public/2018/10/30/springmvc-resquest-flow/springmvc_class.jpg","hash":"92969779b030f6879da14bf7a769898be2db0b4a","modified":1541593204734},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541593205137},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541593205140},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1541593205149},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1541593205149},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1541593205149},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1541593205149},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1541593205149},{"_id":"public/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1541593205149},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1541593205149},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1541593205149},{"_id":"public/js/src/utils.js","hash":"66f2ac658d6110f70a86f784d0c5d891a97c14bd","modified":1541593205149},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1541593205150},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1541593205150},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1541593205150},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1541593205150},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1541593205151},{"_id":"public/js/src/schemes/pisces.js","hash":"89267bd16ecbedd1958af7f0fb3f4f654d24fffa","modified":1541593205151},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1541593205151},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1541593205151},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1541593205151},{"_id":"public/lib/pace/README.html","hash":"58f2105ada5cc52dff5aabcecb92569ee84493a0","modified":1541593205151},{"_id":"public/css/main.css","hash":"c359ede4e5dd65a06cde139741fdd43876e17750","modified":1541593205151},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1541593205151},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1541593205151},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1541593205151},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1541593205151},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1541593205151},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1541593205151},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541593205151},{"_id":"public/2018/10/30/springmvc-resquest-flow/DispatcherServletSequence.jpg","hash":"f7d9a296a3d6234177dcf60b54a859a19e2ed26a","modified":1541593205152},{"_id":"public/images/alipay.jpg","hash":"7cfce0fbf312a4998a7a9991ca4b1deadaec7bb9","modified":1541593205173},{"_id":"public/images/avatar_960_960.jpg","hash":"bf4f8fcc944e07cdfca4fb198006568fd9feb478","modified":1541593205250},{"_id":"public/images/avatar.jpg","hash":"372932391107374853e47255cf366be19f19a22b","modified":1541593205256}],"Category":[{"name":"运维","_id":"cjo74sfe0000344s6kmppjdbn"},{"name":"spring","_id":"cjo74sfeb000c44s6coyds6ul"},{"name":"git","_id":"cjo74sfef000k44s6lfelb0r5"},{"name":"bean","_id":"cjo74sfek000y44s6yn3kjpmk"},{"name":"spring源码解析","_id":"cjo74sfel001344s6zvgak60l"}],"Data":[],"Page":[{"title":"tags","date":"2018-10-23T01:33:53.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-10-23 09:33:53\ntype: \"tags\"\n---\n","updated":"2018-10-23T01:35:03.061Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjo74sfim002f44s6g73zhn2z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-10-23T01:36:10.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-10-23 09:36:10\ntype: \"categories\"\n---\n","updated":"2018-10-23T01:37:25.491Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjo74sfin002g44s6wlb6jpth","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"利用bash制作守护进程的脚本","date":"2018-10-23T03:33:40.000Z","_content":"\n# 运用场景\n\n在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。\n\n## 1. 记录进程的PID\n\n为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID\n\n我们可以利用bash变量\\!\\$ 获取Shell最后运行的后台Process的PID\n\nExample:\n\n```bash\n#!/bin/bash\njava -jar myapp.jar & echo $! > ./pid.file &\n```\n\n这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中\n\n## 2. 监测进程是否在运行\n\n利用 kill -0 检测进程是否存在\nkill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。\n\n```bash\nPID=$(cat ./pid.file) > /dev/null 2>&1\nkill -0 ${SAUNA_PID} > /dev/null 2>&1\nIS_RUNNING=$?\n```\n\n## 3. 完整脚本\n\nstart.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\nWATCH_PID_FILE=${HOME}/pids/watch.pid\n\n#进程PID输出到文件\njava -jar myapp.jar & echo $! > ${PID_FILE} 2>/dev/null &\nsleep 5\n\nsh watch.sh > watch.log 2>&1 &\n\necho $! > ${PID_FILE}\n\n\n```\n\nwatch.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\n\nif [ -f \"$PID_FILE\" ]\nthen\n#如果PID文件存在\n  PID=$(cat ${SAUNA_PID_FILE}) > /dev/null 2>&1\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\nelse\n  PID=\"0000\"\n  IS_RUNNING=1\nfi\n\n#检测循环\nwhile true\ndo\n  # 5 秒检测一次\n  sleep 5\n  if [ ${IS_RUNNING} -ne 0 ] ; then\n    echo \"service is dead. restarting...\";\n    sh start.sh\n    exit 0;\n  fi\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\ndone\n\n```\n\n**注意** stop脚本里要kill掉watch.sh ，不然会重复启动。","source":"_posts/2018-10-bash-process-watcher.md","raw":"---\ntitle: 利用bash制作守护进程的脚本\ndate: 2018-10-23 11:33:40\ntags:\n---\n\n# 运用场景\n\n在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。\n\n## 1. 记录进程的PID\n\n为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID\n\n我们可以利用bash变量\\!\\$ 获取Shell最后运行的后台Process的PID\n\nExample:\n\n```bash\n#!/bin/bash\njava -jar myapp.jar & echo $! > ./pid.file &\n```\n\n这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中\n\n## 2. 监测进程是否在运行\n\n利用 kill -0 检测进程是否存在\nkill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。\n\n```bash\nPID=$(cat ./pid.file) > /dev/null 2>&1\nkill -0 ${SAUNA_PID} > /dev/null 2>&1\nIS_RUNNING=$?\n```\n\n## 3. 完整脚本\n\nstart.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\nWATCH_PID_FILE=${HOME}/pids/watch.pid\n\n#进程PID输出到文件\njava -jar myapp.jar & echo $! > ${PID_FILE} 2>/dev/null &\nsleep 5\n\nsh watch.sh > watch.log 2>&1 &\n\necho $! > ${PID_FILE}\n\n\n```\n\nwatch.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\n\nif [ -f \"$PID_FILE\" ]\nthen\n#如果PID文件存在\n  PID=$(cat ${SAUNA_PID_FILE}) > /dev/null 2>&1\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\nelse\n  PID=\"0000\"\n  IS_RUNNING=1\nfi\n\n#检测循环\nwhile true\ndo\n  # 5 秒检测一次\n  sleep 5\n  if [ ${IS_RUNNING} -ne 0 ] ; then\n    echo \"service is dead. restarting...\";\n    sh start.sh\n    exit 0;\n  fi\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\ndone\n\n```\n\n**注意** stop脚本里要kill掉watch.sh ，不然会重复启动。","slug":"bash-process-watcher","published":1,"updated":"2018-10-23T05:25:52.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo74sfdt000044s6pxuvh3fq","content":"<h1 id=\"运用场景\"><a href=\"#运用场景\" class=\"headerlink\" title=\"运用场景\"></a>运用场景</h1><p>在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。</p>\n<h2 id=\"1-记录进程的PID\"><a href=\"#1-记录进程的PID\" class=\"headerlink\" title=\"1. 记录进程的PID\"></a>1. 记录进程的PID</h2><p>为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID</p>\n<p>我们可以利用bash变量!\\$ 获取Shell最后运行的后台Process的PID</p>\n<p>Example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; ./pid.file &amp;</span><br></pre></td></tr></table></figure>\n<p>这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中</p>\n<h2 id=\"2-监测进程是否在运行\"><a href=\"#2-监测进程是否在运行\" class=\"headerlink\" title=\"2. 监测进程是否在运行\"></a>2. 监测进程是否在运行</h2><p>利用 kill -0 检测进程是否存在<br>kill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(cat ./pid.file) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;SAUNA_PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">IS_RUNNING=$?</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-完整脚本\"><a href=\"#3-完整脚本\" class=\"headerlink\" title=\"3. 完整脚本\"></a>3. 完整脚本</h2><p>start.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\">WATCH_PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/watch.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程PID输出到文件</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span> 2&gt;/dev/null &amp;</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\">sh watch.sh &gt; watch.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span></span><br></pre></td></tr></table></figure>\n<p>watch.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$PID_FILE</span>\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\">#如果PID文件存在</span></span><br><span class=\"line\">  PID=$(cat <span class=\"variable\">$&#123;SAUNA_PID_FILE&#125;</span>) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  PID=<span class=\"string\">\"0000\"</span></span><br><span class=\"line\">  IS_RUNNING=1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检测循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 5 秒检测一次</span></span><br><span class=\"line\">  sleep 5</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;IS_RUNNING&#125;</span> -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"service is dead. restarting...\"</span>;</span><br><span class=\"line\">    sh start.sh</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0;</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong> stop脚本里要kill掉watch.sh ，不然会重复启动。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"运用场景\"><a href=\"#运用场景\" class=\"headerlink\" title=\"运用场景\"></a>运用场景</h1><p>在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。</p>\n<h2 id=\"1-记录进程的PID\"><a href=\"#1-记录进程的PID\" class=\"headerlink\" title=\"1. 记录进程的PID\"></a>1. 记录进程的PID</h2><p>为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID</p>\n<p>我们可以利用bash变量!\\$ 获取Shell最后运行的后台Process的PID</p>\n<p>Example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; ./pid.file &amp;</span><br></pre></td></tr></table></figure>\n<p>这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中</p>\n<h2 id=\"2-监测进程是否在运行\"><a href=\"#2-监测进程是否在运行\" class=\"headerlink\" title=\"2. 监测进程是否在运行\"></a>2. 监测进程是否在运行</h2><p>利用 kill -0 检测进程是否存在<br>kill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(cat ./pid.file) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;SAUNA_PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">IS_RUNNING=$?</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-完整脚本\"><a href=\"#3-完整脚本\" class=\"headerlink\" title=\"3. 完整脚本\"></a>3. 完整脚本</h2><p>start.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\">WATCH_PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/watch.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程PID输出到文件</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span> 2&gt;/dev/null &amp;</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\">sh watch.sh &gt; watch.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span></span><br></pre></td></tr></table></figure>\n<p>watch.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$PID_FILE</span>\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\">#如果PID文件存在</span></span><br><span class=\"line\">  PID=$(cat <span class=\"variable\">$&#123;SAUNA_PID_FILE&#125;</span>) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  PID=<span class=\"string\">\"0000\"</span></span><br><span class=\"line\">  IS_RUNNING=1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检测循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 5 秒检测一次</span></span><br><span class=\"line\">  sleep 5</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;IS_RUNNING&#125;</span> -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"service is dead. restarting...\"</span>;</span><br><span class=\"line\">    sh start.sh</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0;</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong> stop脚本里要kill掉watch.sh ，不然会重复启动。</p>\n"},{"title":"linux中shell变量$#,$@,$0,$1,$2的含义解释","date":"2018-10-23T03:11:20.000Z","_content":"\n变量说明:\n\n```text\n$$\nShell本身的PID（ProcessID）\n$!\nShell最后运行的后台Process的PID\n$?\n最后运行的命令的结束代码（返回值）\n$-\n使用Set命令设定的Flag一览\n$*\n所有参数列表。如\"$*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。\n$@\n所有参数列表。如\"$@\"用「\"」括起来的情况、以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。\n$#\n添加到Shell的参数个数\n$0\nShell本身的文件名\n$1～$n\n添加到Shell的各参数值。$1是第1参数、$2是第2参数…。\n```","source":"_posts/2018-10-bash-args.md","raw":"---\ntitle: linux中shell变量$#,$@,$0,$1,$2的含义解释\ndate: 2018-10-23 11:11:20\ntags: [bash,args]\ncategories: 运维\n---\n\n变量说明:\n\n```text\n$$\nShell本身的PID（ProcessID）\n$!\nShell最后运行的后台Process的PID\n$?\n最后运行的命令的结束代码（返回值）\n$-\n使用Set命令设定的Flag一览\n$*\n所有参数列表。如\"$*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。\n$@\n所有参数列表。如\"$@\"用「\"」括起来的情况、以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。\n$#\n添加到Shell的参数个数\n$0\nShell本身的文件名\n$1～$n\n添加到Shell的各参数值。$1是第1参数、$2是第2参数…。\n```","slug":"bash-args","published":1,"updated":"2018-10-23T03:13:31.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo74sfdx000144s68e080bup","content":"<p>变量说明:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">Shell本身的PID（ProcessID）</span><br><span class=\"line\">$!</span><br><span class=\"line\">Shell最后运行的后台Process的PID</span><br><span class=\"line\">$?</span><br><span class=\"line\">最后运行的命令的结束代码（返回值）</span><br><span class=\"line\">$-</span><br><span class=\"line\">使用Set命令设定的Flag一览</span><br><span class=\"line\">$*</span><br><span class=\"line\">所有参数列表。如&quot;$*&quot;用「&quot;」括起来的情况、以&quot;$1 $2 … $n&quot;的形式输出所有参数。</span><br><span class=\"line\">$@</span><br><span class=\"line\">所有参数列表。如&quot;$@&quot;用「&quot;」括起来的情况、以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</span><br><span class=\"line\">$#</span><br><span class=\"line\">添加到Shell的参数个数</span><br><span class=\"line\">$0</span><br><span class=\"line\">Shell本身的文件名</span><br><span class=\"line\">$1～$n</span><br><span class=\"line\">添加到Shell的各参数值。$1是第1参数、$2是第2参数…。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>变量说明:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">Shell本身的PID（ProcessID）</span><br><span class=\"line\">$!</span><br><span class=\"line\">Shell最后运行的后台Process的PID</span><br><span class=\"line\">$?</span><br><span class=\"line\">最后运行的命令的结束代码（返回值）</span><br><span class=\"line\">$-</span><br><span class=\"line\">使用Set命令设定的Flag一览</span><br><span class=\"line\">$*</span><br><span class=\"line\">所有参数列表。如&quot;$*&quot;用「&quot;」括起来的情况、以&quot;$1 $2 … $n&quot;的形式输出所有参数。</span><br><span class=\"line\">$@</span><br><span class=\"line\">所有参数列表。如&quot;$@&quot;用「&quot;」括起来的情况、以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</span><br><span class=\"line\">$#</span><br><span class=\"line\">添加到Shell的参数个数</span><br><span class=\"line\">$0</span><br><span class=\"line\">Shell本身的文件名</span><br><span class=\"line\">$1～$n</span><br><span class=\"line\">添加到Shell的各参数值。$1是第1参数、$2是第2参数…。</span><br></pre></td></tr></table></figure>"},{"title":"ElasticSearch服务器secrity配置","date":"2018-10-23T03:14:25.000Z","_content":"\n# 1. 修改/etc/security/limits.conf\n\n/etc/security/limits.conf\n\n```bash\n[username] soft nofile 102400\n[username] hard nofile 102400\n[username] soft nproc 2048\n[username] hard nproc 2048\n[username] soft memlock unlimited\n[username] hard memlock unlimited\n```\n\n重新登录后\n\n```bash\nulimit -a 检测\n```\n\n# 2. 修改max_map_count\n\n```bash\nvim /etc/sysctl.conf\nvm.max_map_count=262144\n```\n\n执行命令刷新\n\n``` bash\nsysctl -p\n```","source":"_posts/2018-10-es-server-config.md","raw":"---\ntitle: ElasticSearch服务器secrity配置\ndate: 2018-10-23 11:14:25\ntags: [elasticsearch]\ncategories: [运维]\n---\n\n# 1. 修改/etc/security/limits.conf\n\n/etc/security/limits.conf\n\n```bash\n[username] soft nofile 102400\n[username] hard nofile 102400\n[username] soft nproc 2048\n[username] hard nproc 2048\n[username] soft memlock unlimited\n[username] hard memlock unlimited\n```\n\n重新登录后\n\n```bash\nulimit -a 检测\n```\n\n# 2. 修改max_map_count\n\n```bash\nvim /etc/sysctl.conf\nvm.max_map_count=262144\n```\n\n执行命令刷新\n\n``` bash\nsysctl -p\n```","slug":"es-server-config","published":1,"updated":"2018-10-23T03:21:58.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo74sfdz000244s6esnkcbcn","content":"<h1 id=\"1-修改-etc-security-limits-conf\"><a href=\"#1-修改-etc-security-limits-conf\" class=\"headerlink\" title=\"1. 修改/etc/security/limits.conf\"></a>1. 修改/etc/security/limits.conf</h1><p>/etc/security/limits.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[username] soft nofile 102400</span><br><span class=\"line\">[username] hard nofile 102400</span><br><span class=\"line\">[username] soft nproc 2048</span><br><span class=\"line\">[username] hard nproc 2048</span><br><span class=\"line\">[username] soft memlock unlimited</span><br><span class=\"line\">[username] hard memlock unlimited</span><br></pre></td></tr></table></figure>\n<p>重新登录后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ulimit</span> -a 检测</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-修改max-map-count\"><a href=\"#2-修改max-map-count\" class=\"headerlink\" title=\"2. 修改max_map_count\"></a>2. 修改max_map_count</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\">vm.max_map_count=262144</span><br></pre></td></tr></table></figure>\n<p>执行命令刷新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-修改-etc-security-limits-conf\"><a href=\"#1-修改-etc-security-limits-conf\" class=\"headerlink\" title=\"1. 修改/etc/security/limits.conf\"></a>1. 修改/etc/security/limits.conf</h1><p>/etc/security/limits.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[username] soft nofile 102400</span><br><span class=\"line\">[username] hard nofile 102400</span><br><span class=\"line\">[username] soft nproc 2048</span><br><span class=\"line\">[username] hard nproc 2048</span><br><span class=\"line\">[username] soft memlock unlimited</span><br><span class=\"line\">[username] hard memlock unlimited</span><br></pre></td></tr></table></figure>\n<p>重新登录后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ulimit</span> -a 检测</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-修改max-map-count\"><a href=\"#2-修改max-map-count\" class=\"headerlink\" title=\"2. 修改max_map_count\"></a>2. 修改max_map_count</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\">vm.max_map_count=262144</span><br></pre></td></tr></table></figure>\n<p>执行命令刷新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>"},{"title":"自定义HandlerMethodArgumentResolver，用Cookie组装一个简单的Pojo对象","date":"2018-10-24T13:14:18.000Z","_content":"\n# 1. 概述\n\nSpringMVC为我们提供了@CookieValue来注入cookie某一个key的值，但我们常需要@RequestBody一样，把Cookie组装成一个pojo对象。\n这篇教程将会演示我们怎样自定义一个HandlerMethodArgumentResolver完成从Cookie组装pojo对象的需求。\n\n# 2. 自定义HandlerMethodArgumentResolver\n\n# 2.1 定义Annotation\n\n我们先定义一个Annotation，叫CookieObject。\n\n```java\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface CookieObject {\n}\n```\n\n# 2.2 实现HandlerMethodArgumentResolver接口\n\n再定义个CookieObjectMethodArgumentResolver类，实现HandlerMethodArgumentResolver接口\nHandlerMethodArgumentResolver有两个method.\n\n```java\nboolean supportsParameter(MethodParameter parameter);\n```\n\n返回true/false,表示resolver是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.\n\n```java\nObject resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;\n```\n\n组装参数的实现逻辑。\n\n来，让我们看一下具体的实现\n\n```java\npublic class CookieObjectMethodArgumentResolver implements HandlerMethodArgumentResolver {\n    private String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;\n\n    private String decodeInternal(HttpServletRequest request, String source) {\n        String enc = determineEncoding(request);\n        return UriUtils.decode(source, enc);\n    }\n\n    protected String determineEncoding(HttpServletRequest request) {\n        String enc = request.getCharacterEncoding();\n        if (enc == null) {\n            enc = this.defaultEncoding;\n        }\n        return enc;\n    }\n\n    @Override\n    public boolean supportsParameter(MethodParameter parameter) {\n        return parameter.hasParameterAnnotation(CookieObject.class);\n    }\n\n    @Override\n    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);\n\n        Class clazz = parameter.getParameterType();\n\n        Object obj = clazz.newInstance();\n        Cookie[] cookies = servletRequest.getCookies();\n        if (cookies != null) {\n            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());\n            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();\n            for (PropertyDescriptor property : propertyDescriptors) {\n                Method setter = property.getWriteMethod();\n                Class ppClazz = property.getPropertyType();\n                if (setter != null) {\n                    String propName = property.getName();\n                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);\n                    if (cooike != null) {\n                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());\n                        Object setValue = null;\n                        if (Cookie.class.isAssignableFrom(ppClazz)) {\n                            setValue = cookieValue;\n                        } else if (cookieValue != null && binderFactory != null) {\n                            WebDataBinder binder = binderFactory.createBinder(webRequest, null, propName);\n                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);\n                        }\n                        if (setValue != null) {\n                            setter.invoke(obj, setValue);\n                        }\n                    }\n                }\n            }\n        }\n        return obj;\n    }\n}\n```\n\n# 2.3 加入argumentResolvers列表\n\n最后再SpringMVC的配置中把我们定义的CookieObjectMethodArgumentResolver实例化后加入argumentResolvers列表。\n\n``java\n@Configuration\npublic class WebConfig extends WebMvcConfigurationSupport {\n    @Override\n    protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\n        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = new CookieObjectMethodArgumentResolver()\n        argumentResolvers.add(cookieObjectMethodArgumentResolver());\n    }\n}\n```\n\n# 3. 使用\n\n# 3.1 定义一个pojo\n\n```java\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@EqualsAndHashCode(callSuper = false)\npublic class MyCookieParam  {\n    private String foo;\n    private String bar;\n}\n```\n\n# 3.2 在Controller中接收\n\n```java\n    @RequestMapping(\"/testCookieObject\")\n    @ResponseBody\n    public String testCookieObject(@CookieObject MyCookieParam cookieParam) {\n      return cookieParam\n    }\n```","source":"_posts/2018-10-custom-handler-method-argument-resolver.md","raw":"---\ntitle: 自定义HandlerMethodArgumentResolver，用Cookie组装一个简单的Pojo对象\ndate: 2018-10-24 21:14:18\ntags: [spring,handlerMethodResolver,springMvc]\ncategories: [spring]\n---\n\n# 1. 概述\n\nSpringMVC为我们提供了@CookieValue来注入cookie某一个key的值，但我们常需要@RequestBody一样，把Cookie组装成一个pojo对象。\n这篇教程将会演示我们怎样自定义一个HandlerMethodArgumentResolver完成从Cookie组装pojo对象的需求。\n\n# 2. 自定义HandlerMethodArgumentResolver\n\n# 2.1 定义Annotation\n\n我们先定义一个Annotation，叫CookieObject。\n\n```java\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface CookieObject {\n}\n```\n\n# 2.2 实现HandlerMethodArgumentResolver接口\n\n再定义个CookieObjectMethodArgumentResolver类，实现HandlerMethodArgumentResolver接口\nHandlerMethodArgumentResolver有两个method.\n\n```java\nboolean supportsParameter(MethodParameter parameter);\n```\n\n返回true/false,表示resolver是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.\n\n```java\nObject resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;\n```\n\n组装参数的实现逻辑。\n\n来，让我们看一下具体的实现\n\n```java\npublic class CookieObjectMethodArgumentResolver implements HandlerMethodArgumentResolver {\n    private String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;\n\n    private String decodeInternal(HttpServletRequest request, String source) {\n        String enc = determineEncoding(request);\n        return UriUtils.decode(source, enc);\n    }\n\n    protected String determineEncoding(HttpServletRequest request) {\n        String enc = request.getCharacterEncoding();\n        if (enc == null) {\n            enc = this.defaultEncoding;\n        }\n        return enc;\n    }\n\n    @Override\n    public boolean supportsParameter(MethodParameter parameter) {\n        return parameter.hasParameterAnnotation(CookieObject.class);\n    }\n\n    @Override\n    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);\n\n        Class clazz = parameter.getParameterType();\n\n        Object obj = clazz.newInstance();\n        Cookie[] cookies = servletRequest.getCookies();\n        if (cookies != null) {\n            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());\n            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();\n            for (PropertyDescriptor property : propertyDescriptors) {\n                Method setter = property.getWriteMethod();\n                Class ppClazz = property.getPropertyType();\n                if (setter != null) {\n                    String propName = property.getName();\n                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);\n                    if (cooike != null) {\n                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());\n                        Object setValue = null;\n                        if (Cookie.class.isAssignableFrom(ppClazz)) {\n                            setValue = cookieValue;\n                        } else if (cookieValue != null && binderFactory != null) {\n                            WebDataBinder binder = binderFactory.createBinder(webRequest, null, propName);\n                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);\n                        }\n                        if (setValue != null) {\n                            setter.invoke(obj, setValue);\n                        }\n                    }\n                }\n            }\n        }\n        return obj;\n    }\n}\n```\n\n# 2.3 加入argumentResolvers列表\n\n最后再SpringMVC的配置中把我们定义的CookieObjectMethodArgumentResolver实例化后加入argumentResolvers列表。\n\n``java\n@Configuration\npublic class WebConfig extends WebMvcConfigurationSupport {\n    @Override\n    protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\n        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = new CookieObjectMethodArgumentResolver()\n        argumentResolvers.add(cookieObjectMethodArgumentResolver());\n    }\n}\n```\n\n# 3. 使用\n\n# 3.1 定义一个pojo\n\n```java\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@EqualsAndHashCode(callSuper = false)\npublic class MyCookieParam  {\n    private String foo;\n    private String bar;\n}\n```\n\n# 3.2 在Controller中接收\n\n```java\n    @RequestMapping(\"/testCookieObject\")\n    @ResponseBody\n    public String testCookieObject(@CookieObject MyCookieParam cookieParam) {\n      return cookieParam\n    }\n```","slug":"custom-handler-method-argument-resolver","published":1,"updated":"2018-11-05T07:00:38.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo74sfe3000544s6sw4ecqn4","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>SpringMVC为我们提供了@CookieValue来注入cookie某一个key的值，但我们常需要@RequestBody一样，把Cookie组装成一个pojo对象。<br>这篇教程将会演示我们怎样自定义一个HandlerMethodArgumentResolver完成从Cookie组装pojo对象的需求。</p>\n<h1 id=\"2-自定义HandlerMethodArgumentResolver\"><a href=\"#2-自定义HandlerMethodArgumentResolver\" class=\"headerlink\" title=\"2. 自定义HandlerMethodArgumentResolver\"></a>2. 自定义HandlerMethodArgumentResolver</h1><h1 id=\"2-1-定义Annotation\"><a href=\"#2-1-定义Annotation\" class=\"headerlink\" title=\"2.1 定义Annotation\"></a>2.1 定义Annotation</h1><p>我们先定义一个Annotation，叫CookieObject。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CookieObject &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-实现HandlerMethodArgumentResolver接口\"><a href=\"#2-2-实现HandlerMethodArgumentResolver接口\" class=\"headerlink\" title=\"2.2 实现HandlerMethodArgumentResolver接口\"></a>2.2 实现HandlerMethodArgumentResolver接口</h1><p>再定义个CookieObjectMethodArgumentResolver类，实现HandlerMethodArgumentResolver接口<br>HandlerMethodArgumentResolver有两个method.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>返回true/false,表示resolver是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n<p>组装参数的实现逻辑。</p>\n<p>来，让我们看一下具体的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieObjectMethodArgumentResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">decodeInternal</span><span class=\"params\">(HttpServletRequest request, String source)</span> </span>&#123;</span><br><span class=\"line\">        String enc = determineEncoding(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UriUtils.decode(source, enc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">determineEncoding</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String enc = request.getCharacterEncoding();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enc == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            enc = <span class=\"keyword\">this</span>.defaultEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> enc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parameter.hasParameterAnnotation(CookieObject.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class clazz = parameter.getParameterType();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object obj = clazz.newInstance();</span><br><span class=\"line\">        Cookie[] cookies = servletRequest.getCookies();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());</span><br><span class=\"line\">            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (PropertyDescriptor property : propertyDescriptors) &#123;</span><br><span class=\"line\">                Method setter = property.getWriteMethod();</span><br><span class=\"line\">                Class ppClazz = property.getPropertyType();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    String propName = property.getName();</span><br><span class=\"line\">                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cooike != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());</span><br><span class=\"line\">                        Object setValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (Cookie.class.isAssignableFrom(ppClazz)) &#123;</span><br><span class=\"line\">                            setValue = cookieValue;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cookieValue != <span class=\"keyword\">null</span> &amp;&amp; binderFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            WebDataBinder binder = binderFactory.createBinder(webRequest, <span class=\"keyword\">null</span>, propName);</span><br><span class=\"line\">                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (setValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            setter.invoke(obj, setValue);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-加入argumentResolvers列表\"><a href=\"#2-3-加入argumentResolvers列表\" class=\"headerlink\" title=\"2.3 加入argumentResolvers列表\"></a>2.3 加入argumentResolvers列表</h1><p>最后再SpringMVC的配置中把我们定义的CookieObjectMethodArgumentResolver实例化后加入argumentResolvers列表。</p>\n<p><code></code>java<br>@Configuration<br>public class WebConfig extends WebMvcConfigurationSupport {<br>    @Override<br>    protected void addArgumentResolvers(List<handlermethodargumentresolver> argumentResolvers) {<br>        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = new CookieObjectMethodArgumentResolver()<br>        argumentResolvers.add(cookieObjectMethodArgumentResolver());<br>    }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 3. 使用</span><br><span class=\"line\"></span><br><span class=\"line\"># 3.1 定义一个pojo</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">@Data</span><br><span class=\"line\">@JsonIgnoreProperties(ignoreUnknown = true)</span><br><span class=\"line\">@EqualsAndHashCode(callSuper = false)</span><br><span class=\"line\">public class MyCookieParam  &#123;</span><br><span class=\"line\">    private String foo;</span><br><span class=\"line\">    private String bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></handlermethodargumentresolver></p>\n<h1 id=\"3-2-在Controller中接收\"><a href=\"#3-2-在Controller中接收\" class=\"headerlink\" title=\"3.2 在Controller中接收\"></a>3.2 在Controller中接收</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testCookieObject\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testCookieObject</span><span class=\"params\">(@CookieObject MyCookieParam cookieParam)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cookieParam</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>SpringMVC为我们提供了@CookieValue来注入cookie某一个key的值，但我们常需要@RequestBody一样，把Cookie组装成一个pojo对象。<br>这篇教程将会演示我们怎样自定义一个HandlerMethodArgumentResolver完成从Cookie组装pojo对象的需求。</p>\n<h1 id=\"2-自定义HandlerMethodArgumentResolver\"><a href=\"#2-自定义HandlerMethodArgumentResolver\" class=\"headerlink\" title=\"2. 自定义HandlerMethodArgumentResolver\"></a>2. 自定义HandlerMethodArgumentResolver</h1><h1 id=\"2-1-定义Annotation\"><a href=\"#2-1-定义Annotation\" class=\"headerlink\" title=\"2.1 定义Annotation\"></a>2.1 定义Annotation</h1><p>我们先定义一个Annotation，叫CookieObject。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CookieObject &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-实现HandlerMethodArgumentResolver接口\"><a href=\"#2-2-实现HandlerMethodArgumentResolver接口\" class=\"headerlink\" title=\"2.2 实现HandlerMethodArgumentResolver接口\"></a>2.2 实现HandlerMethodArgumentResolver接口</h1><p>再定义个CookieObjectMethodArgumentResolver类，实现HandlerMethodArgumentResolver接口<br>HandlerMethodArgumentResolver有两个method.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>返回true/false,表示resolver是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n<p>组装参数的实现逻辑。</p>\n<p>来，让我们看一下具体的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieObjectMethodArgumentResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">decodeInternal</span><span class=\"params\">(HttpServletRequest request, String source)</span> </span>&#123;</span><br><span class=\"line\">        String enc = determineEncoding(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UriUtils.decode(source, enc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">determineEncoding</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String enc = request.getCharacterEncoding();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enc == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            enc = <span class=\"keyword\">this</span>.defaultEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> enc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parameter.hasParameterAnnotation(CookieObject.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class clazz = parameter.getParameterType();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object obj = clazz.newInstance();</span><br><span class=\"line\">        Cookie[] cookies = servletRequest.getCookies();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());</span><br><span class=\"line\">            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (PropertyDescriptor property : propertyDescriptors) &#123;</span><br><span class=\"line\">                Method setter = property.getWriteMethod();</span><br><span class=\"line\">                Class ppClazz = property.getPropertyType();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    String propName = property.getName();</span><br><span class=\"line\">                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cooike != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());</span><br><span class=\"line\">                        Object setValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (Cookie.class.isAssignableFrom(ppClazz)) &#123;</span><br><span class=\"line\">                            setValue = cookieValue;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cookieValue != <span class=\"keyword\">null</span> &amp;&amp; binderFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            WebDataBinder binder = binderFactory.createBinder(webRequest, <span class=\"keyword\">null</span>, propName);</span><br><span class=\"line\">                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (setValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            setter.invoke(obj, setValue);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-加入argumentResolvers列表\"><a href=\"#2-3-加入argumentResolvers列表\" class=\"headerlink\" title=\"2.3 加入argumentResolvers列表\"></a>2.3 加入argumentResolvers列表</h1><p>最后再SpringMVC的配置中把我们定义的CookieObjectMethodArgumentResolver实例化后加入argumentResolvers列表。</p>\n<p><code></code>java<br>@Configuration<br>public class WebConfig extends WebMvcConfigurationSupport {<br>    @Override<br>    protected void addArgumentResolvers(List<handlermethodargumentresolver> argumentResolvers) {<br>        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = new CookieObjectMethodArgumentResolver()<br>        argumentResolvers.add(cookieObjectMethodArgumentResolver());<br>    }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 3. 使用</span><br><span class=\"line\"></span><br><span class=\"line\"># 3.1 定义一个pojo</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">@Data</span><br><span class=\"line\">@JsonIgnoreProperties(ignoreUnknown = true)</span><br><span class=\"line\">@EqualsAndHashCode(callSuper = false)</span><br><span class=\"line\">public class MyCookieParam  &#123;</span><br><span class=\"line\">    private String foo;</span><br><span class=\"line\">    private String bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></handlermethodargumentresolver></p>\n<h1 id=\"3-2-在Controller中接收\"><a href=\"#3-2-在Controller中接收\" class=\"headerlink\" title=\"3.2 在Controller中接收\"></a>3.2 在Controller中接收</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testCookieObject\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testCookieObject</span><span class=\"params\">(@CookieObject MyCookieParam cookieParam)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cookieParam</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"利用git credential免密认证git http仓库","date":"2018-10-29T06:32:30.000Z","_content":"\n# 1. 命令\n\n在git仓库目录下执行\n\n```bash\ngit config user.name xxx\ngit config user.email xxx@xxx.com\ngit config credential.helper store\n```\n\n# 2. 缺点\n\n密码将会以明文形式存储在~/.git-credentials文件中，不安全。","source":"_posts/2018-10-git-credential.md","raw":"---\ntitle: 利用git credential免密认证git http仓库\ndate: 2018-10-29 14:32:30\ntags: [git,command,node]\ncategories: [git]\n---\n\n# 1. 命令\n\n在git仓库目录下执行\n\n```bash\ngit config user.name xxx\ngit config user.email xxx@xxx.com\ngit config credential.helper store\n```\n\n# 2. 缺点\n\n密码将会以明文形式存储在~/.git-credentials文件中，不安全。","slug":"git-credential","published":1,"updated":"2018-11-05T07:11:31.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo74sfe5000644s659zfs2jx","content":"<h1 id=\"1-命令\"><a href=\"#1-命令\" class=\"headerlink\" title=\"1. 命令\"></a>1. 命令</h1><p>在git仓库目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name xxx</span><br><span class=\"line\">git config user.email xxx@xxx.com</span><br><span class=\"line\">git config credential.helper store</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h1><p>密码将会以明文形式存储在~/.git-credentials文件中，不安全。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-命令\"><a href=\"#1-命令\" class=\"headerlink\" title=\"1. 命令\"></a>1. 命令</h1><p>在git仓库目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name xxx</span><br><span class=\"line\">git config user.email xxx@xxx.com</span><br><span class=\"line\">git config credential.helper store</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h1><p>密码将会以明文形式存储在~/.git-credentials文件中，不安全。</p>\n"},{"title":"Spring自定义Scope (译)","date":"2018-10-24T01:16:21.000Z","_content":"\n# 1. 概述\n\n开箱即用的spring boot提供了\"singleton\"和\"prototype\"2个标准的，可以在任何spring application中使用的bean scope，\n以及\"request\",\"session\",\"globalSession\" 3个附加的，只能在web-aware application中使用的bean scope。\n\n标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。\n\n比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。\n\n在这篇教程中，将阐述怎样在spring中 **创建,注册,使用** 自定义bean scope。\n\n# 2. 创建一个自定义Scope类\n\n为了创建一个自定义类，我们需要implement Scope Interface,\n并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。\n\n# 2.1 管理 Scope Object \bCallback\n\n实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。\n举个例子，本教程使用了线程安全的 synchronized maps.\n让我们开始定义我们的scope类\n\n```java\npublic class TenantScope implements Scope {\n    private Map<String, Object> scopedObjects\n      = Collections.synchronizedMap(new HashMap<String, Object>());\n    private Map<String, Runnable> destructionCallbacks\n      = Collections.synchronizedMap(new HashMap<String, Runnable>());\n...\n}\n```\n\n# 2.2 从Scope中获取\bObject\n\n为了用name\b从Scope获取Object，我们需要实现getObject方法，**如果取不到Object，我们必须新建一个Object并返回它**\n\n在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。\n\n```java\n@Override\npublic Object get(String name, ObjectFactory<?> objectFactory) {\n    if(!scopedObjects.containsKey(name)) {\n        scopedObjects.put(name, objectFactory.getObject());\n    }\n    return scopedObjects.get(name);\n}\n```\n\n在Scope接口中定义的5个方法中，**只有get方法是\b必须要实现的**，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。\n\n# 2.3 实现销毁回调（Destruction Callback）\n\n我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。\n\n```java\n@Override\npublic void registerDestructionCallback(String name, Runnable callback) {\n    destructionCallbacks.put(name, callback);\n}\n```\n\n# 2.4 从Scope移除Object\n\n接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object\n\n```java\n@Override\npublic Object remove(String name) {\n    destructionCallbacks.remove(name);\n    return scopedObjects.remove(name);\n}\n```\n\n注意： **是调用此方法的caller去真正的执行callback并销毁被移除的object**\n\n# 2.5 获取Conversation ID\n\n现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,\n你可以在这里返回，如果不支持，返回null就可以。\n\n```java\n@Override\npublic String getConversationId() {\n    return \"tenant\";\n}\n```\n\n# 2.6 Resolving Contextual Objects\n\n最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。\n如果不支持，返回null就可以了。\n\n```java\n@Override\npublic Object resolveContextualObject(String key) {\n    return null;\n}\n```\n\n# 3. 注册自定义Scope\n\n为了让spring容器意识到你的新Scope，**我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope**. 我们来看一个这个方法的定义\n\n```java\nvoid registerScope(String scopeName, Scope scope);\n```\n\n第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。\n\n让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope\n\n```java\npublic class TenantBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory factory) throws BeansException {\n        factory.registerScope(\"tenant\", new TenantScope());\n    }\n}\n```\n\n现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。\n\n```java\n@Configuration\npublic class TenantScopeConfig {\n    @Bean\n    public static BeanFactoryPostProcessor beanFactoryPostProcessor() {\n        return new TenantBeanFactoryPostProcessor();\n    }\n}\n```\n\n# 4. 使用自定义Scope\n\n至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。\n\n先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。\n\n```java\npublic class TenantBean {\n\n    private final String name;\n\n    public TenantBean(String name) {\n        this.name = name;\n    }\n\n    public void sayHello() {\n        System.out.println(\n          String.format(\"Hello from %s of type %s\",\n          this.name,\n          this.getClass().getName()));\n    }\n}\n```\n\n注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans\n\n```java\n@Configuration\npublic class TenantBeansConfig {\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean foo() {\n        return new TenantBean(\"foo\");\n    }\n\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean bar() {\n        return new TenantBean(\"bar\");\n    }\n}\n```\n\n# 5. 测试自定义Scope\n\n让我们写一些单元测试测试一下\n\n```java\n@Test\npublic final void whenRegisterScopeAndBeans_thenContextContainsFooAndBar() {\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n    try{\n        ctx.register(TenantScopeConfig.class);\n        ctx.register(TenantBeansConfig.class);\n        ctx.refresh();\n\n        TenantBean foo = (TenantBean) ctx.getBean(\"foo\", TenantBean.class);\n        foo.sayHello();\n        TenantBean bar = (TenantBean) ctx.getBean(\"bar\", TenantBean.class);\n        bar.sayHello();\n        Map<String, TenantBean> foos = ctx.getBeansOfType(TenantBean.class);\n\n        assertThat(foo, not(equalTo(bar)));\n        assertThat(foos.size(), equalTo(2));\n        assertTrue(foos.containsValue(foo));\n        assertTrue(foos.containsValue(bar));\n\n        BeanDefinition fooDefinition = ctx.getBeanDefinition(\"foo\");\n        BeanDefinition barDefinition = ctx.getBeanDefinition(\"bar\");\n\n        assertThat(fooDefinition.getScope(), equalTo(\"tenant\"));\n        assertThat(barDefinition.getScope(), equalTo(\"tenant\"));\n    }\n    finally {\n        ctx.close();\n    }\n}\n```\n\n测试输出：\n\n```log\nHello from foo of type org.baeldung.customscope.TenantBean\nHello from bar of type org.baeldung.customscope.TenantBean\n```\n\n# 6. 总结\n\n在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读\n[Spring Framework Reference](https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom)了解更多细节，你也可以通过[Spring Framework](https://github.com/spring-projects/spring-framework)源码.看一下Spring是如何实现了各种Scope.\n\n\b你可以[点这里](https://github.com/eugenp/tutorials/tree/master/spring-all)获取本教程代码\n\n**[原文链接](https://www.baeldung.com/spring-custom-scope)** : [https://www.baeldung.com/spring-custom-scope](https://www.baeldung.com/spring-custom-scope)","source":"_posts/2018-10-spring-custom-scope.md","raw":"---\ntitle: Spring自定义Scope (译)\ndate: 2018-10-24 09:16:21\ntags: [spring,scope,java,scope,译]\ncategories: spring \n---\n\n# 1. 概述\n\n开箱即用的spring boot提供了\"singleton\"和\"prototype\"2个标准的，可以在任何spring application中使用的bean scope，\n以及\"request\",\"session\",\"globalSession\" 3个附加的，只能在web-aware application中使用的bean scope。\n\n标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。\n\n比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。\n\n在这篇教程中，将阐述怎样在spring中 **创建,注册,使用** 自定义bean scope。\n\n# 2. 创建一个自定义Scope类\n\n为了创建一个自定义类，我们需要implement Scope Interface,\n并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。\n\n# 2.1 管理 Scope Object \bCallback\n\n实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。\n举个例子，本教程使用了线程安全的 synchronized maps.\n让我们开始定义我们的scope类\n\n```java\npublic class TenantScope implements Scope {\n    private Map<String, Object> scopedObjects\n      = Collections.synchronizedMap(new HashMap<String, Object>());\n    private Map<String, Runnable> destructionCallbacks\n      = Collections.synchronizedMap(new HashMap<String, Runnable>());\n...\n}\n```\n\n# 2.2 从Scope中获取\bObject\n\n为了用name\b从Scope获取Object，我们需要实现getObject方法，**如果取不到Object，我们必须新建一个Object并返回它**\n\n在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。\n\n```java\n@Override\npublic Object get(String name, ObjectFactory<?> objectFactory) {\n    if(!scopedObjects.containsKey(name)) {\n        scopedObjects.put(name, objectFactory.getObject());\n    }\n    return scopedObjects.get(name);\n}\n```\n\n在Scope接口中定义的5个方法中，**只有get方法是\b必须要实现的**，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。\n\n# 2.3 实现销毁回调（Destruction Callback）\n\n我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。\n\n```java\n@Override\npublic void registerDestructionCallback(String name, Runnable callback) {\n    destructionCallbacks.put(name, callback);\n}\n```\n\n# 2.4 从Scope移除Object\n\n接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object\n\n```java\n@Override\npublic Object remove(String name) {\n    destructionCallbacks.remove(name);\n    return scopedObjects.remove(name);\n}\n```\n\n注意： **是调用此方法的caller去真正的执行callback并销毁被移除的object**\n\n# 2.5 获取Conversation ID\n\n现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,\n你可以在这里返回，如果不支持，返回null就可以。\n\n```java\n@Override\npublic String getConversationId() {\n    return \"tenant\";\n}\n```\n\n# 2.6 Resolving Contextual Objects\n\n最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。\n如果不支持，返回null就可以了。\n\n```java\n@Override\npublic Object resolveContextualObject(String key) {\n    return null;\n}\n```\n\n# 3. 注册自定义Scope\n\n为了让spring容器意识到你的新Scope，**我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope**. 我们来看一个这个方法的定义\n\n```java\nvoid registerScope(String scopeName, Scope scope);\n```\n\n第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。\n\n让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope\n\n```java\npublic class TenantBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory factory) throws BeansException {\n        factory.registerScope(\"tenant\", new TenantScope());\n    }\n}\n```\n\n现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。\n\n```java\n@Configuration\npublic class TenantScopeConfig {\n    @Bean\n    public static BeanFactoryPostProcessor beanFactoryPostProcessor() {\n        return new TenantBeanFactoryPostProcessor();\n    }\n}\n```\n\n# 4. 使用自定义Scope\n\n至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。\n\n先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。\n\n```java\npublic class TenantBean {\n\n    private final String name;\n\n    public TenantBean(String name) {\n        this.name = name;\n    }\n\n    public void sayHello() {\n        System.out.println(\n          String.format(\"Hello from %s of type %s\",\n          this.name,\n          this.getClass().getName()));\n    }\n}\n```\n\n注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans\n\n```java\n@Configuration\npublic class TenantBeansConfig {\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean foo() {\n        return new TenantBean(\"foo\");\n    }\n\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean bar() {\n        return new TenantBean(\"bar\");\n    }\n}\n```\n\n# 5. 测试自定义Scope\n\n让我们写一些单元测试测试一下\n\n```java\n@Test\npublic final void whenRegisterScopeAndBeans_thenContextContainsFooAndBar() {\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n    try{\n        ctx.register(TenantScopeConfig.class);\n        ctx.register(TenantBeansConfig.class);\n        ctx.refresh();\n\n        TenantBean foo = (TenantBean) ctx.getBean(\"foo\", TenantBean.class);\n        foo.sayHello();\n        TenantBean bar = (TenantBean) ctx.getBean(\"bar\", TenantBean.class);\n        bar.sayHello();\n        Map<String, TenantBean> foos = ctx.getBeansOfType(TenantBean.class);\n\n        assertThat(foo, not(equalTo(bar)));\n        assertThat(foos.size(), equalTo(2));\n        assertTrue(foos.containsValue(foo));\n        assertTrue(foos.containsValue(bar));\n\n        BeanDefinition fooDefinition = ctx.getBeanDefinition(\"foo\");\n        BeanDefinition barDefinition = ctx.getBeanDefinition(\"bar\");\n\n        assertThat(fooDefinition.getScope(), equalTo(\"tenant\"));\n        assertThat(barDefinition.getScope(), equalTo(\"tenant\"));\n    }\n    finally {\n        ctx.close();\n    }\n}\n```\n\n测试输出：\n\n```log\nHello from foo of type org.baeldung.customscope.TenantBean\nHello from bar of type org.baeldung.customscope.TenantBean\n```\n\n# 6. 总结\n\n在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读\n[Spring Framework Reference](https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom)了解更多细节，你也可以通过[Spring Framework](https://github.com/spring-projects/spring-framework)源码.看一下Spring是如何实现了各种Scope.\n\n\b你可以[点这里](https://github.com/eugenp/tutorials/tree/master/spring-all)获取本教程代码\n\n**[原文链接](https://www.baeldung.com/spring-custom-scope)** : [https://www.baeldung.com/spring-custom-scope](https://www.baeldung.com/spring-custom-scope)","slug":"spring-custom-scope","published":1,"updated":"2018-11-05T07:00:38.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo74sfe6000744s68ruvqq5d","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>开箱即用的spring boot提供了”singleton”和”prototype”2个标准的，可以在任何spring application中使用的bean scope，<br>以及”request”,”session”,”globalSession” 3个附加的，只能在web-aware application中使用的bean scope。</p>\n<p>标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。</p>\n<p>比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。</p>\n<p>在这篇教程中，将阐述怎样在spring中 <strong>创建,注册,使用</strong> 自定义bean scope。</p>\n<h1 id=\"2-创建一个自定义Scope类\"><a href=\"#2-创建一个自定义Scope类\" class=\"headerlink\" title=\"2. 创建一个自定义Scope类\"></a>2. 创建一个自定义Scope类</h1><p>为了创建一个自定义类，我们需要implement Scope Interface,<br>并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。</p>\n<h1 id=\"2-1-管理-Scope-Object-Callback\"><a href=\"#2-1-管理-Scope-Object-Callback\" class=\"headerlink\" title=\"2.1 管理 Scope Object \bCallback\"></a>2.1 管理 Scope Object \bCallback</h1><p>实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。<br>举个例子，本教程使用了线程安全的 synchronized maps.<br>让我们开始定义我们的scope类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScope</span> <span class=\"keyword\">implements</span> <span class=\"title\">Scope</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; scopedObjects</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Runnable&gt; destructionCallbacks</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Runnable&gt;());</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-从Scope中获取Object\"><a href=\"#2-2-从Scope中获取Object\" class=\"headerlink\" title=\"2.2 从Scope中获取\bObject\"></a>2.2 从Scope中获取\bObject</h1><p>为了用name\b从Scope获取Object，我们需要实现getObject方法，<strong>如果取不到Object，我们必须新建一个Object并返回它</strong></p>\n<p>在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(String name, ObjectFactory&lt;?&gt; objectFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!scopedObjects.containsKey(name)) &#123;</span><br><span class=\"line\">        scopedObjects.put(name, objectFactory.getObject());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.get(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Scope接口中定义的5个方法中，<strong>只有get方法是\b必须要实现的</strong>，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。</p>\n<h1 id=\"2-3-实现销毁回调（Destruction-Callback）\"><a href=\"#2-3-实现销毁回调（Destruction-Callback）\" class=\"headerlink\" title=\"2.3 实现销毁回调（Destruction Callback）\"></a>2.3 实现销毁回调（Destruction Callback）</h1><p>我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDestructionCallback</span><span class=\"params\">(String name, Runnable callback)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.put(name, callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-4-从Scope移除Object\"><a href=\"#2-4-从Scope移除Object\" class=\"headerlink\" title=\"2.4 从Scope移除Object\"></a>2.4 从Scope移除Object</h1><p>接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">remove</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.remove(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.remove(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： <strong>是调用此方法的caller去真正的执行callback并销毁被移除的object</strong></p>\n<h1 id=\"2-5-获取Conversation-ID\"><a href=\"#2-5-获取Conversation-ID\" class=\"headerlink\" title=\"2.5 获取Conversation ID\"></a>2.5 获取Conversation ID</h1><p>现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,<br>你可以在这里返回，如果不支持，返回null就可以。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConversationId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"tenant\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-6-Resolving-Contextual-Objects\"><a href=\"#2-6-Resolving-Contextual-Objects\" class=\"headerlink\" title=\"2.6 Resolving Contextual Objects\"></a>2.6 Resolving Contextual Objects</h1><p>最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。<br>如果不支持，返回null就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveContextualObject</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-注册自定义Scope\"><a href=\"#3-注册自定义Scope\" class=\"headerlink\" title=\"3. 注册自定义Scope\"></a>3. 注册自定义Scope</h1><p>为了让spring容器意识到你的新Scope，<strong>我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope</strong>. 我们来看一个这个方法的定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registerScope</span><span class=\"params\">(String scopeName, Scope scope)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。</p>\n<p>让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeanFactoryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory factory)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        factory.registerScope(<span class=\"string\">\"tenant\"</span>, <span class=\"keyword\">new</span> TenantScope());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScopeConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BeanFactoryPostProcessor <span class=\"title\">beanFactoryPostProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBeanFactoryPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-使用自定义Scope\"><a href=\"#4-使用自定义Scope\" class=\"headerlink\" title=\"4. 使用自定义Scope\"></a>4. 使用自定义Scope</h1><p>至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。</p>\n<p>先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TenantBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">          String.format(<span class=\"string\">\"Hello from %s of type %s\"</span>,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.getClass().getName()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeansConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-测试自定义Scope\"><a href=\"#5-测试自定义Scope\" class=\"headerlink\" title=\"5. 测试自定义Scope\"></a>5. 测试自定义Scope</h1><p>让我们写一些单元测试测试一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">whenRegisterScopeAndBeans_thenContextContainsFooAndBar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AnnotationConfigApplicationContext ctx = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        ctx.register(TenantScopeConfig.class);</span><br><span class=\"line\">        ctx.register(TenantBeansConfig.class);</span><br><span class=\"line\">        ctx.refresh();</span><br><span class=\"line\"></span><br><span class=\"line\">        TenantBean foo = (TenantBean) ctx.getBean(<span class=\"string\">\"foo\"</span>, TenantBean.class);</span><br><span class=\"line\">        foo.sayHello();</span><br><span class=\"line\">        TenantBean bar = (TenantBean) ctx.getBean(<span class=\"string\">\"bar\"</span>, TenantBean.class);</span><br><span class=\"line\">        bar.sayHello();</span><br><span class=\"line\">        Map&lt;String, TenantBean&gt; foos = ctx.getBeansOfType(TenantBean.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(foo, not(equalTo(bar)));</span><br><span class=\"line\">        assertThat(foos.size(), equalTo(<span class=\"number\">2</span>));</span><br><span class=\"line\">        assertTrue(foos.containsValue(foo));</span><br><span class=\"line\">        assertTrue(foos.containsValue(bar));</span><br><span class=\"line\"></span><br><span class=\"line\">        BeanDefinition fooDefinition = ctx.getBeanDefinition(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">        BeanDefinition barDefinition = ctx.getBeanDefinition(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(fooDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">        assertThat(barDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello from foo of type org.baeldung.customscope.TenantBean</span><br><span class=\"line\">Hello from bar of type org.baeldung.customscope.TenantBean</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><p>在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读<br><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom\" target=\"_blank\" rel=\"noopener\">Spring Framework Reference</a>了解更多细节，你也可以通过<a href=\"https://github.com/spring-projects/spring-framework\" target=\"_blank\" rel=\"noopener\">Spring Framework</a>源码.看一下Spring是如何实现了各种Scope.</p>\n<p>\b你可以<a href=\"https://github.com/eugenp/tutorials/tree/master/spring-all\" target=\"_blank\" rel=\"noopener\">点这里</a>获取本教程代码</p>\n<p><strong><a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">原文链接</a></strong> : <a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">https://www.baeldung.com/spring-custom-scope</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>开箱即用的spring boot提供了”singleton”和”prototype”2个标准的，可以在任何spring application中使用的bean scope，<br>以及”request”,”session”,”globalSession” 3个附加的，只能在web-aware application中使用的bean scope。</p>\n<p>标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。</p>\n<p>比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。</p>\n<p>在这篇教程中，将阐述怎样在spring中 <strong>创建,注册,使用</strong> 自定义bean scope。</p>\n<h1 id=\"2-创建一个自定义Scope类\"><a href=\"#2-创建一个自定义Scope类\" class=\"headerlink\" title=\"2. 创建一个自定义Scope类\"></a>2. 创建一个自定义Scope类</h1><p>为了创建一个自定义类，我们需要implement Scope Interface,<br>并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。</p>\n<h1 id=\"2-1-管理-Scope-Object-Callback\"><a href=\"#2-1-管理-Scope-Object-Callback\" class=\"headerlink\" title=\"2.1 管理 Scope Object \bCallback\"></a>2.1 管理 Scope Object \bCallback</h1><p>实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。<br>举个例子，本教程使用了线程安全的 synchronized maps.<br>让我们开始定义我们的scope类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScope</span> <span class=\"keyword\">implements</span> <span class=\"title\">Scope</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; scopedObjects</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Runnable&gt; destructionCallbacks</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Runnable&gt;());</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-从Scope中获取Object\"><a href=\"#2-2-从Scope中获取Object\" class=\"headerlink\" title=\"2.2 从Scope中获取\bObject\"></a>2.2 从Scope中获取\bObject</h1><p>为了用name\b从Scope获取Object，我们需要实现getObject方法，<strong>如果取不到Object，我们必须新建一个Object并返回它</strong></p>\n<p>在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(String name, ObjectFactory&lt;?&gt; objectFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!scopedObjects.containsKey(name)) &#123;</span><br><span class=\"line\">        scopedObjects.put(name, objectFactory.getObject());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.get(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Scope接口中定义的5个方法中，<strong>只有get方法是\b必须要实现的</strong>，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。</p>\n<h1 id=\"2-3-实现销毁回调（Destruction-Callback）\"><a href=\"#2-3-实现销毁回调（Destruction-Callback）\" class=\"headerlink\" title=\"2.3 实现销毁回调（Destruction Callback）\"></a>2.3 实现销毁回调（Destruction Callback）</h1><p>我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDestructionCallback</span><span class=\"params\">(String name, Runnable callback)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.put(name, callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-4-从Scope移除Object\"><a href=\"#2-4-从Scope移除Object\" class=\"headerlink\" title=\"2.4 从Scope移除Object\"></a>2.4 从Scope移除Object</h1><p>接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">remove</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.remove(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.remove(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： <strong>是调用此方法的caller去真正的执行callback并销毁被移除的object</strong></p>\n<h1 id=\"2-5-获取Conversation-ID\"><a href=\"#2-5-获取Conversation-ID\" class=\"headerlink\" title=\"2.5 获取Conversation ID\"></a>2.5 获取Conversation ID</h1><p>现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,<br>你可以在这里返回，如果不支持，返回null就可以。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConversationId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"tenant\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-6-Resolving-Contextual-Objects\"><a href=\"#2-6-Resolving-Contextual-Objects\" class=\"headerlink\" title=\"2.6 Resolving Contextual Objects\"></a>2.6 Resolving Contextual Objects</h1><p>最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。<br>如果不支持，返回null就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveContextualObject</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-注册自定义Scope\"><a href=\"#3-注册自定义Scope\" class=\"headerlink\" title=\"3. 注册自定义Scope\"></a>3. 注册自定义Scope</h1><p>为了让spring容器意识到你的新Scope，<strong>我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope</strong>. 我们来看一个这个方法的定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registerScope</span><span class=\"params\">(String scopeName, Scope scope)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。</p>\n<p>让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeanFactoryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory factory)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        factory.registerScope(<span class=\"string\">\"tenant\"</span>, <span class=\"keyword\">new</span> TenantScope());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScopeConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BeanFactoryPostProcessor <span class=\"title\">beanFactoryPostProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBeanFactoryPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-使用自定义Scope\"><a href=\"#4-使用自定义Scope\" class=\"headerlink\" title=\"4. 使用自定义Scope\"></a>4. 使用自定义Scope</h1><p>至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。</p>\n<p>先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TenantBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">          String.format(<span class=\"string\">\"Hello from %s of type %s\"</span>,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.getClass().getName()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeansConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-测试自定义Scope\"><a href=\"#5-测试自定义Scope\" class=\"headerlink\" title=\"5. 测试自定义Scope\"></a>5. 测试自定义Scope</h1><p>让我们写一些单元测试测试一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">whenRegisterScopeAndBeans_thenContextContainsFooAndBar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AnnotationConfigApplicationContext ctx = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        ctx.register(TenantScopeConfig.class);</span><br><span class=\"line\">        ctx.register(TenantBeansConfig.class);</span><br><span class=\"line\">        ctx.refresh();</span><br><span class=\"line\"></span><br><span class=\"line\">        TenantBean foo = (TenantBean) ctx.getBean(<span class=\"string\">\"foo\"</span>, TenantBean.class);</span><br><span class=\"line\">        foo.sayHello();</span><br><span class=\"line\">        TenantBean bar = (TenantBean) ctx.getBean(<span class=\"string\">\"bar\"</span>, TenantBean.class);</span><br><span class=\"line\">        bar.sayHello();</span><br><span class=\"line\">        Map&lt;String, TenantBean&gt; foos = ctx.getBeansOfType(TenantBean.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(foo, not(equalTo(bar)));</span><br><span class=\"line\">        assertThat(foos.size(), equalTo(<span class=\"number\">2</span>));</span><br><span class=\"line\">        assertTrue(foos.containsValue(foo));</span><br><span class=\"line\">        assertTrue(foos.containsValue(bar));</span><br><span class=\"line\"></span><br><span class=\"line\">        BeanDefinition fooDefinition = ctx.getBeanDefinition(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">        BeanDefinition barDefinition = ctx.getBeanDefinition(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(fooDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">        assertThat(barDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello from foo of type org.baeldung.customscope.TenantBean</span><br><span class=\"line\">Hello from bar of type org.baeldung.customscope.TenantBean</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><p>在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读<br><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom\" target=\"_blank\" rel=\"noopener\">Spring Framework Reference</a>了解更多细节，你也可以通过<a href=\"https://github.com/spring-projects/spring-framework\" target=\"_blank\" rel=\"noopener\">Spring Framework</a>源码.看一下Spring是如何实现了各种Scope.</p>\n<p>\b你可以<a href=\"https://github.com/eugenp/tutorials/tree/master/spring-all\" target=\"_blank\" rel=\"noopener\">点这里</a>获取本教程代码</p>\n<p><strong><a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">原文链接</a></strong> : <a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">https://www.baeldung.com/spring-custom-scope</a></p>\n"},{"title":"rsync简易使用方法","date":"2018-10-23T01:53:50.000Z","_content":"\n# rsync命令_Linux rsync 命令\n\n------\n\nrsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。\n\n```bash\n rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/\n\n# 非标ssh端口\n rsync -avp -e \"ssh -p 2245\" /usr/sqmall/ root@brain-001:/usr/sqmall/\n```","source":"_posts/2018-10-rsync.md","raw":"---\ntitle: rsync简易使用方法\ndate: 2018-10-23 09:53:50\ntags: [bash,command,sync]\ncategories: 运维\n---\n\n# rsync命令_Linux rsync 命令\n\n------\n\nrsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。\n\n```bash\n rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/\n\n# 非标ssh端口\n rsync -avp -e \"ssh -p 2245\" /usr/sqmall/ root@brain-001:/usr/sqmall/\n```","slug":"rsync","published":1,"updated":"2018-11-05T07:11:31.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo74sfe8000a44s6l9clzdzj","content":"<h1 id=\"rsync命令-Linux-rsync-命令\"><a href=\"#rsync命令-Linux-rsync-命令\" class=\"headerlink\" title=\"rsync命令_Linux rsync 命令\"></a>rsync命令_Linux rsync 命令</h1><hr>\n<p>rsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 非标ssh端口</span></span><br><span class=\"line\"> rsync -avp -e <span class=\"string\">\"ssh -p 2245\"</span> /usr/sqmall/ root@brain-001:/usr/sqmall/</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"rsync命令-Linux-rsync-命令\"><a href=\"#rsync命令-Linux-rsync-命令\" class=\"headerlink\" title=\"rsync命令_Linux rsync 命令\"></a>rsync命令_Linux rsync 命令</h1><hr>\n<p>rsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 非标ssh端口</span></span><br><span class=\"line\"> rsync -avp -e <span class=\"string\">\"ssh -p 2245\"</span> /usr/sqmall/ root@brain-001:/usr/sqmall/</span><br></pre></td></tr></table></figure>"},{"title":"git删除错误的提交","date":"2018-11-07T12:14:48.000Z","_content":"\n# 方法一\n\n```bash\ngit reset --hard f9782944b2f80433ead80de6dbe517bd7f9f7974\ngit push origin HEAD --force\n```\n\n# 方法二\n\n回退到上一个版本\n\n```bash\ngit reset --hard HEAD~1\ngit push origin HEAD --force\n```\n","source":"_posts/2018-11-git-remove-commit.md","raw":"---\ntitle: git删除错误的提交\ndate: 2018-11-07 20:14:48\ntags: [git]\ncategories: [git]\n---\n\n# 方法一\n\n```bash\ngit reset --hard f9782944b2f80433ead80de6dbe517bd7f9f7974\ngit push origin HEAD --force\n```\n\n# 方法二\n\n回退到上一个版本\n\n```bash\ngit reset --hard HEAD~1\ngit push origin HEAD --force\n```\n","slug":"git-remove-commit","published":1,"updated":"2018-11-13T15:01:44.798Z","_id":"cjo74sfea000b44s60xdvjn8z","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard f9782944b2f80433ead80de6dbe517bd7f9f7974</span><br><span class=\"line\">git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n<h1 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h1><p>回退到上一个版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD~1</span><br><span class=\"line\">git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard f9782944b2f80433ead80de6dbe517bd7f9f7974</span><br><span class=\"line\">git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n<h1 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h1><p>回退到上一个版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD~1</span><br><span class=\"line\">git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n"},{"title":"利用ApplicationContextAware制作一个获取ApplicationContext的Provider","date":"2018-10-26T02:54:37.000Z","_content":"\n# 1. 定义一个继承 ApplicationContextAware 的 bean\n\n定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean\n\n```java\n@Component\npublic class ApplicationContextProvider implements ApplicationContextAware {\n\n  private ApplicationContext applicationContext;\n\n  @Override\n  public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n    this.applicationContext = applicationContext;\n  }\n\n  public ApplicationContext getContext() {\n    return applicationContext;\n  }\n\n}\n```\n\n# 2. 使用\n\n``` java\n@Service\npublic class UseSample {\n  @Autoware\n  private ApplicationContextProvider applicationContextProvider;\n\n  public void sample(){\n    ApplicationContext appctx = applicationContextProvider.getContext();\n    ......\n    ......\n\n  }\n}\n\n```\n\n# 3. 实现原理\n\nspirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用\nsetApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。\n\n\nspring源码:\n\n```java\nprivate void invokeAwareInterfaces(Object bean) {\n        .....\n if (bean instanceof ApplicationContextAware) {\n  ((ApplicationContextAware)bean).setApplicationContext(this.applicationContext);\n   }\n}\n```","source":"_posts/2018-10-use-of-application-context-aware.md","raw":"---\ntitle: 利用ApplicationContextAware制作一个获取ApplicationContext的Provider\ndate: 2018-10-26 10:54:37\ntags: [spring]\ncategories: [bean]\n---\n\n# 1. 定义一个继承 ApplicationContextAware 的 bean\n\n定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean\n\n```java\n@Component\npublic class ApplicationContextProvider implements ApplicationContextAware {\n\n  private ApplicationContext applicationContext;\n\n  @Override\n  public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n    this.applicationContext = applicationContext;\n  }\n\n  public ApplicationContext getContext() {\n    return applicationContext;\n  }\n\n}\n```\n\n# 2. 使用\n\n``` java\n@Service\npublic class UseSample {\n  @Autoware\n  private ApplicationContextProvider applicationContextProvider;\n\n  public void sample(){\n    ApplicationContext appctx = applicationContextProvider.getContext();\n    ......\n    ......\n\n  }\n}\n\n```\n\n# 3. 实现原理\n\nspirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用\nsetApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。\n\n\nspring源码:\n\n```java\nprivate void invokeAwareInterfaces(Object bean) {\n        .....\n if (bean instanceof ApplicationContextAware) {\n  ((ApplicationContextAware)bean).setApplicationContext(this.applicationContext);\n   }\n}\n```","slug":"use-of-application-context-aware","published":1,"updated":"2018-11-05T07:00:38.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo74sfed000f44s6qdwextu2","content":"<h1 id=\"1-定义一个继承-ApplicationContextAware-的-bean\"><a href=\"#1-定义一个继承-ApplicationContextAware-的-bean\" class=\"headerlink\" title=\"1. 定义一个继承 ApplicationContextAware 的 bean\"></a>1. 定义一个继承 ApplicationContextAware 的 bean</h1><p>定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationContextProvider</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ApplicationContext <span class=\"title\">getContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseSample</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Autoware</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContextProvider applicationContextProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sample</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ApplicationContext appctx = applicationContextProvider.getContext();</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-实现原理\"><a href=\"#3-实现原理\" class=\"headerlink\" title=\"3. 实现原理\"></a>3. 实现原理</h1><p>spirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用<br>setApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。</p>\n<p>spring源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAwareInterfaces</span><span class=\"params\">(Object bean)</span> </span>&#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationContextAware) &#123;</span><br><span class=\"line\">  ((ApplicationContextAware)bean).setApplicationContext(<span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-定义一个继承-ApplicationContextAware-的-bean\"><a href=\"#1-定义一个继承-ApplicationContextAware-的-bean\" class=\"headerlink\" title=\"1. 定义一个继承 ApplicationContextAware 的 bean\"></a>1. 定义一个继承 ApplicationContextAware 的 bean</h1><p>定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationContextProvider</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ApplicationContext <span class=\"title\">getContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseSample</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Autoware</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContextProvider applicationContextProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sample</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ApplicationContext appctx = applicationContextProvider.getContext();</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-实现原理\"><a href=\"#3-实现原理\" class=\"headerlink\" title=\"3. 实现原理\"></a>3. 实现原理</h1><p>spirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用<br>setApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。</p>\n<p>spring源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAwareInterfaces</span><span class=\"params\">(Object bean)</span> </span>&#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationContextAware) &#123;</span><br><span class=\"line\">  ((ApplicationContextAware)bean).setApplicationContext(<span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"SpringMVC源码解析(一) - Http请求处理流程","date":"2018-10-30T01:48:46.000Z","_content":"\n# 1. 概述\n\n我们在使用SpringMVC开发业务逻辑的时候，经常使用@Controller，@RequestMapping等注解快速注册并接收网络请求。\n那今天我们来看一下，当接收到一个网络请求后，SpringMVC框架是如何找到你的业务逻辑代码处理请求，并返回结果的。\n\n# 2. 核心类图及方法\n\nSpringMVC处理请求的核心类是DispatcherServlet，我们先来看一下他的类图\n\n{% asset_img springmvc_class.jpg DispatcherServler类图 %}\n\n我们看到核心类 DispacherServlet的祖先都是一些个抽象类。真正可以被实例化使用的只有DispatcherServlert，那关于处理请求方面，\n这些抽象类都干了些什么呢？我们先来看一下定义了Servlet容器的接口**javax.servlet.http.Servlet**的源码\n\n# 2.1 Servlet接口 及 HttpServlet中的实现\n\n```java\npublic interface Servlet {\n  /**\n  * Servlet容器初始化接口，Servlet初始化后备调用。\n  */\n  public void init(ServletConfig config) throws ServletException;\n  /**\n  * 返回Servlet配置对象\n  */\n  public ServletConfig getServletConfig();\n\n  /**\n  * Servlet处理请求的接口\n  */\n  public void service(ServletRequest req, ServletResponse res)\n            throws ServletException, IOException;\n  \n  /**\n  * 返回servlet的信息，例如作者，版本和copyright\n  */\n  public String getServletInfo();\n  /**\n  * 当Servlet被移出服务的时候被调用\n  */\n  public void destroy();\n}\n```\n\n在这里我们主要关心的是处理请求的service方法，我们来看一下他在**HttpServlet**中的实现。\n\n```java\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException {\n\n        String method = req.getMethod();\n\n        if (method.equals(METHOD_GET)) {\n            long lastModified = getLastModified(req);\n            if (lastModified == -1) {\n                // servlet doesn't support if-modified-since, no reason\n                // to go through further expensive logic\n                doGet(req, resp);\n            } else {\n                long ifModifiedSince;\n                try {\n                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n                } catch (IllegalArgumentException iae) {\n                    // Invalid date header - proceed as if none was set\n                    ifModifiedSince = -1;\n                }\n                if (ifModifiedSince < (lastModified / 1000 * 1000)) {\n                    // If the servlet mod time is later, call doGet()\n                    // Round down to the nearest second for a proper compare\n                    // A ifModifiedSince of -1 will always be less\n                    maybeSetLastModified(resp, lastModified);\n                    doGet(req, resp);\n                } else {\n                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            }\n\n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n\n        } else if (method.equals(METHOD_POST)) {\n            doPost(req, resp);\n\n        } else if (method.equals(METHOD_PUT)) {\n            doPut(req, resp);\n\n        } else if (method.equals(METHOD_DELETE)) {\n            doDelete(req, resp);\n\n        } else if (method.equals(METHOD_OPTIONS)) {\n            doOptions(req,resp);\n\n        } else if (method.equals(METHOD_TRACE)) {\n            doTrace(req,resp);\n\n        } else {\n            //\n            // Note that this means NO servlet supports whatever\n            // method was requested, anywhere on this server.\n            //\n\n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[1];\n            errArgs[0] = method;\n            errMsg = MessageFormat.format(errMsg, errArgs);\n\n            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n        }\n    }\n```\n\n可见HttpServlet实现了service方法并根据Http请求的Method调用了doGet,doHead,doPost,doPut,doDelete,doOptions,doTrace等方法。那末，请求便根据requestMethod被分散到了不通的方法中处理。\n\n# 2.2 FrameworkServlet\n\n我们再来看一下DispatcherServlet的父类FrameworkServlet的源码\n\n```java\n\t/**\n\t * Override the parent class implementation in order to intercept PATCH requests.\n\t */\n\t@Override\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tHttpMethod httpMethod = HttpMethod.resolve(request.getMethod());\n\t\tif (httpMethod == HttpMethod.PATCH || httpMethod == null) {\n\t\t\tprocessRequest(request, response);\n\t\t}\n\t\telse {\n\t\t\tsuper.service(request, response);\n\t\t}\n\t}\n\n\t/**\n\t * Delegate GET requests to processRequest/doService.\n\t * <p>Will also be invoked by HttpServlet's default implementation of {@code doHead},\n\t * with a {@code NoBodyResponse} that just captures the content length.\n\t * @see #doService\n\t * @see #doHead\n\t */\n\t@Override\n\tprotected final void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n\n\t/**\n\t * Delegate POST requests to {@link #processRequest}.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected final void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n\n\t/**\n\t * Delegate PUT requests to {@link #processRequest}.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected final void doPut(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n\n\t/**\n\t * Delegate DELETE requests to {@link #processRequest}.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected final void doDelete(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n\n\t/**\n\t * Delegate OPTIONS requests to {@link #processRequest}, if desired.\n\t * <p>Applies HttpServlet's standard OPTIONS processing otherwise,\n\t * and also if there is still no 'Allow' header set after dispatching.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected void doOptions(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tif (this.dispatchOptionsRequest || CorsUtils.isPreFlightRequest(request)) {\n\t\t\tprocessRequest(request, response);\n\t\t\tif (response.containsHeader(\"Allow\")) {\n\t\t\t\t// Proper OPTIONS response coming from a handler - we're done.\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Use response wrapper in order to always add PATCH to the allowed methods\n\t\tsuper.doOptions(request, new HttpServletResponseWrapper(response) {\n\t\t\t@Override\n\t\t\tpublic void setHeader(String name, String value) {\n\t\t\t\tif (\"Allow\".equals(name)) {\n\t\t\t\t\tvalue = (StringUtils.hasLength(value) ? value + \", \" : \"\") + HttpMethod.PATCH.name();\n\t\t\t\t}\n\t\t\t\tsuper.setHeader(name, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Delegate TRACE requests to {@link #processRequest}, if desired.\n\t * <p>Applies HttpServlet's standard TRACE processing otherwise.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected void doTrace(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tif (this.dispatchTraceRequest) {\n\t\t\tprocessRequest(request, response);\n\t\t\tif (\"message/http\".equals(response.getContentType())) {\n\t\t\t\t// Proper TRACE response coming from a handler - we're done.\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tsuper.doTrace(request, response);\n\t}\n\n\t/**\n\t * Process this request, publishing an event regardless of the outcome.\n\t * <p>The actual event handling is performed by the abstract\n\t * {@link #doService} template method.\n\t */\n\tprotected final void processRequest(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tlong startTime = System.currentTimeMillis();\n\t\tThrowable failureCause = null;\n\n\t\tLocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();\n\t\tLocaleContext localeContext = buildLocaleContext(request);\n\n\t\tRequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();\n\t\tServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\t\tasyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());\n\n\t\tinitContextHolders(request, localeContext, requestAttributes);\n\n\t\ttry {\n\t\t\tdoService(request, response);\n\t\t}\n\t\tcatch (ServletException | IOException ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow new NestedServletException(\"Request processing failed\", ex);\n\t\t}\n\n\t\tfinally {\n\t\t\tresetContextHolders(request, previousLocaleContext, previousAttributes);\n\t\t\tif (requestAttributes != null) {\n\t\t\t\trequestAttributes.requestCompleted();\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tif (failureCause != null) {\n\t\t\t\t\tthis.logger.debug(\"Could not complete request\", failureCause);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\t\tlogger.debug(\"Leaving response open for concurrent processing\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.logger.debug(\"Successfully completed request\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublishRequestHandledEvent(request, response, startTime, failureCause);\n\t\t}\n\t}\n```\n\nFrameworkServlet做了以下几件事情:\n\n1. 覆写doGet,doPost,doPut等方法，都调用了processRequest来处理请求，把父类HttpServlet分散到各个方法中处理的请求又归拢到了一起，使用processRequest集中处理。\n2. 覆写service方法，支持了http PATCH方法。\n3. processRequest方法初始化了ContextHolder并调用了抽象方法**doService**处理请求。\n4. publish了请求已被处理的ApplicationEvent。\n\n\n# 2.3 DispatcherServlet\n\nDispacherServlet 实现了父类的抽象方法doService。先做了一些准备工作，便调用了doDispatch处理请求。\n```java\n/**\n\t * Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch}\n\t * for the actual dispatching.\n\t */\n\t@Override\n\tprotected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tString resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? \" resumed\" : \"\";\n\t\t\tlogger.debug(\"DispatcherServlet with name '\" + getServletName() + \"'\" + resumed +\n\t\t\t\t\t\" processing \" + request.getMethod() + \" request for [\" + getRequestUri(request) + \"]\");\n\t\t}\n\n\t\t// Keep a snapshot of the request attributes in case of an include,\n\t\t// to be able to restore the original attributes after the include.\n\t\tMap<String, Object> attributesSnapshot = null;\n\t\tif (WebUtils.isIncludeRequest(request)) {\n\t\t\tattributesSnapshot = new HashMap<>();\n\t\t\tEnumeration<?> attrNames = request.getAttributeNames();\n\t\t\twhile (attrNames.hasMoreElements()) {\n\t\t\t\tString attrName = (String) attrNames.nextElement();\n\t\t\t\tif (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {\n\t\t\t\t\tattributesSnapshot.put(attrName, request.getAttribute(attrName));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Make framework objects available to handlers and view objects.\n\t\trequest.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());\n\t\trequest.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);\n\t\trequest.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);\n\t\trequest.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());\n\n\t\tif (this.flashMapManager != null) {\n\t\t\tFlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);\n\t\t\tif (inputFlashMap != null) {\n\t\t\t\trequest.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));\n\t\t\t}\n\t\t\trequest.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());\n\t\t\trequest.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);\n\t\t}\n\n\t\ttry {\n\t\t\tdoDispatch(request, response);\n\t\t}\n\t\tfinally {\n\t\t\tif (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t\t// Restore the original attribute snapshot, in case of an include.\n\t\t\t\tif (attributesSnapshot != null) {\n\t\t\t\t\trestoreAttributesAfterInclude(request, attributesSnapshot);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\nDispacherServlet 的 doDispatch方法是SpringMVC处理请求的核心方法，我们来看一下源码：\n\n```java\n\t/**\n\t * Process the actual dispatching to the handler.\n\t * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\n\t * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\n\t * to find the first that supports the handler class.\n\t * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\n\t * themselves to decide which methods are acceptable.\n\t * @param request current HTTP request\n\t * @param response current HTTP response\n\t * @throws Exception in case of any kind of processing failure\n\t */\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n\t\t\t\t\t}\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tcatch (Throwable err) {\n\t\t\t\t// As of 4.3, we're processing Errors thrown from handler methods as well,\n\t\t\t\t// making them available for @ExceptionHandler methods and other scenarios.\n\t\t\t\tdispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Throwable err) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,\n\t\t\t\t\tnew NestedServletException(\"Handler processing failed\", err));\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n处理步骤：\n  1. 获取请求对应的 HandlerExecutionChain，HandlerExecution中的handler记录了业务代码的入口方法。\n  2. 获取该 HandlerExecutionChain 中 handler对应的handlerAdapter\n  3. 执行 HandlerExecutionChain中拦截器的preHandler方法。\n  4. 执行 hander,获得ModelAndView对象mv\n  5. 执行 HandlerExecutionChain中拦截器的postHandler方法。\n  6. 执行 postDispatchResult方法，如果mv!=null,渲染视图。\n   \n\n\n# 3. 总结\n\n整个请求的处理流程的时序图如下：\n\n{% asset_img DispatcherServletSequence.jpg SpringMVC请求处理总时序图 %}\n","source":"_posts/2018-10-springmvc-resquest-flow.md","raw":"---\ntitle: SpringMVC源码解析(一) - Http请求处理流程\ndate: 2018-10-30 09:48:46\ntags: [spring,源码解析,springMVC]\ncategories: [spring源码解析]\n---\n\n# 1. 概述\n\n我们在使用SpringMVC开发业务逻辑的时候，经常使用@Controller，@RequestMapping等注解快速注册并接收网络请求。\n那今天我们来看一下，当接收到一个网络请求后，SpringMVC框架是如何找到你的业务逻辑代码处理请求，并返回结果的。\n\n# 2. 核心类图及方法\n\nSpringMVC处理请求的核心类是DispatcherServlet，我们先来看一下他的类图\n\n{% asset_img springmvc_class.jpg DispatcherServler类图 %}\n\n我们看到核心类 DispacherServlet的祖先都是一些个抽象类。真正可以被实例化使用的只有DispatcherServlert，那关于处理请求方面，\n这些抽象类都干了些什么呢？我们先来看一下定义了Servlet容器的接口**javax.servlet.http.Servlet**的源码\n\n# 2.1 Servlet接口 及 HttpServlet中的实现\n\n```java\npublic interface Servlet {\n  /**\n  * Servlet容器初始化接口，Servlet初始化后备调用。\n  */\n  public void init(ServletConfig config) throws ServletException;\n  /**\n  * 返回Servlet配置对象\n  */\n  public ServletConfig getServletConfig();\n\n  /**\n  * Servlet处理请求的接口\n  */\n  public void service(ServletRequest req, ServletResponse res)\n            throws ServletException, IOException;\n  \n  /**\n  * 返回servlet的信息，例如作者，版本和copyright\n  */\n  public String getServletInfo();\n  /**\n  * 当Servlet被移出服务的时候被调用\n  */\n  public void destroy();\n}\n```\n\n在这里我们主要关心的是处理请求的service方法，我们来看一下他在**HttpServlet**中的实现。\n\n```java\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException {\n\n        String method = req.getMethod();\n\n        if (method.equals(METHOD_GET)) {\n            long lastModified = getLastModified(req);\n            if (lastModified == -1) {\n                // servlet doesn't support if-modified-since, no reason\n                // to go through further expensive logic\n                doGet(req, resp);\n            } else {\n                long ifModifiedSince;\n                try {\n                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n                } catch (IllegalArgumentException iae) {\n                    // Invalid date header - proceed as if none was set\n                    ifModifiedSince = -1;\n                }\n                if (ifModifiedSince < (lastModified / 1000 * 1000)) {\n                    // If the servlet mod time is later, call doGet()\n                    // Round down to the nearest second for a proper compare\n                    // A ifModifiedSince of -1 will always be less\n                    maybeSetLastModified(resp, lastModified);\n                    doGet(req, resp);\n                } else {\n                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            }\n\n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n\n        } else if (method.equals(METHOD_POST)) {\n            doPost(req, resp);\n\n        } else if (method.equals(METHOD_PUT)) {\n            doPut(req, resp);\n\n        } else if (method.equals(METHOD_DELETE)) {\n            doDelete(req, resp);\n\n        } else if (method.equals(METHOD_OPTIONS)) {\n            doOptions(req,resp);\n\n        } else if (method.equals(METHOD_TRACE)) {\n            doTrace(req,resp);\n\n        } else {\n            //\n            // Note that this means NO servlet supports whatever\n            // method was requested, anywhere on this server.\n            //\n\n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[1];\n            errArgs[0] = method;\n            errMsg = MessageFormat.format(errMsg, errArgs);\n\n            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n        }\n    }\n```\n\n可见HttpServlet实现了service方法并根据Http请求的Method调用了doGet,doHead,doPost,doPut,doDelete,doOptions,doTrace等方法。那末，请求便根据requestMethod被分散到了不通的方法中处理。\n\n# 2.2 FrameworkServlet\n\n我们再来看一下DispatcherServlet的父类FrameworkServlet的源码\n\n```java\n\t/**\n\t * Override the parent class implementation in order to intercept PATCH requests.\n\t */\n\t@Override\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tHttpMethod httpMethod = HttpMethod.resolve(request.getMethod());\n\t\tif (httpMethod == HttpMethod.PATCH || httpMethod == null) {\n\t\t\tprocessRequest(request, response);\n\t\t}\n\t\telse {\n\t\t\tsuper.service(request, response);\n\t\t}\n\t}\n\n\t/**\n\t * Delegate GET requests to processRequest/doService.\n\t * <p>Will also be invoked by HttpServlet's default implementation of {@code doHead},\n\t * with a {@code NoBodyResponse} that just captures the content length.\n\t * @see #doService\n\t * @see #doHead\n\t */\n\t@Override\n\tprotected final void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n\n\t/**\n\t * Delegate POST requests to {@link #processRequest}.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected final void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n\n\t/**\n\t * Delegate PUT requests to {@link #processRequest}.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected final void doPut(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n\n\t/**\n\t * Delegate DELETE requests to {@link #processRequest}.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected final void doDelete(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n\n\t/**\n\t * Delegate OPTIONS requests to {@link #processRequest}, if desired.\n\t * <p>Applies HttpServlet's standard OPTIONS processing otherwise,\n\t * and also if there is still no 'Allow' header set after dispatching.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected void doOptions(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tif (this.dispatchOptionsRequest || CorsUtils.isPreFlightRequest(request)) {\n\t\t\tprocessRequest(request, response);\n\t\t\tif (response.containsHeader(\"Allow\")) {\n\t\t\t\t// Proper OPTIONS response coming from a handler - we're done.\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Use response wrapper in order to always add PATCH to the allowed methods\n\t\tsuper.doOptions(request, new HttpServletResponseWrapper(response) {\n\t\t\t@Override\n\t\t\tpublic void setHeader(String name, String value) {\n\t\t\t\tif (\"Allow\".equals(name)) {\n\t\t\t\t\tvalue = (StringUtils.hasLength(value) ? value + \", \" : \"\") + HttpMethod.PATCH.name();\n\t\t\t\t}\n\t\t\t\tsuper.setHeader(name, value);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Delegate TRACE requests to {@link #processRequest}, if desired.\n\t * <p>Applies HttpServlet's standard TRACE processing otherwise.\n\t * @see #doService\n\t */\n\t@Override\n\tprotected void doTrace(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tif (this.dispatchTraceRequest) {\n\t\t\tprocessRequest(request, response);\n\t\t\tif (\"message/http\".equals(response.getContentType())) {\n\t\t\t\t// Proper TRACE response coming from a handler - we're done.\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tsuper.doTrace(request, response);\n\t}\n\n\t/**\n\t * Process this request, publishing an event regardless of the outcome.\n\t * <p>The actual event handling is performed by the abstract\n\t * {@link #doService} template method.\n\t */\n\tprotected final void processRequest(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tlong startTime = System.currentTimeMillis();\n\t\tThrowable failureCause = null;\n\n\t\tLocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();\n\t\tLocaleContext localeContext = buildLocaleContext(request);\n\n\t\tRequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();\n\t\tServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\t\tasyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());\n\n\t\tinitContextHolders(request, localeContext, requestAttributes);\n\n\t\ttry {\n\t\t\tdoService(request, response);\n\t\t}\n\t\tcatch (ServletException | IOException ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow new NestedServletException(\"Request processing failed\", ex);\n\t\t}\n\n\t\tfinally {\n\t\t\tresetContextHolders(request, previousLocaleContext, previousAttributes);\n\t\t\tif (requestAttributes != null) {\n\t\t\t\trequestAttributes.requestCompleted();\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tif (failureCause != null) {\n\t\t\t\t\tthis.logger.debug(\"Could not complete request\", failureCause);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\t\tlogger.debug(\"Leaving response open for concurrent processing\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.logger.debug(\"Successfully completed request\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublishRequestHandledEvent(request, response, startTime, failureCause);\n\t\t}\n\t}\n```\n\nFrameworkServlet做了以下几件事情:\n\n1. 覆写doGet,doPost,doPut等方法，都调用了processRequest来处理请求，把父类HttpServlet分散到各个方法中处理的请求又归拢到了一起，使用processRequest集中处理。\n2. 覆写service方法，支持了http PATCH方法。\n3. processRequest方法初始化了ContextHolder并调用了抽象方法**doService**处理请求。\n4. publish了请求已被处理的ApplicationEvent。\n\n\n# 2.3 DispatcherServlet\n\nDispacherServlet 实现了父类的抽象方法doService。先做了一些准备工作，便调用了doDispatch处理请求。\n```java\n/**\n\t * Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch}\n\t * for the actual dispatching.\n\t */\n\t@Override\n\tprotected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tString resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? \" resumed\" : \"\";\n\t\t\tlogger.debug(\"DispatcherServlet with name '\" + getServletName() + \"'\" + resumed +\n\t\t\t\t\t\" processing \" + request.getMethod() + \" request for [\" + getRequestUri(request) + \"]\");\n\t\t}\n\n\t\t// Keep a snapshot of the request attributes in case of an include,\n\t\t// to be able to restore the original attributes after the include.\n\t\tMap<String, Object> attributesSnapshot = null;\n\t\tif (WebUtils.isIncludeRequest(request)) {\n\t\t\tattributesSnapshot = new HashMap<>();\n\t\t\tEnumeration<?> attrNames = request.getAttributeNames();\n\t\t\twhile (attrNames.hasMoreElements()) {\n\t\t\t\tString attrName = (String) attrNames.nextElement();\n\t\t\t\tif (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {\n\t\t\t\t\tattributesSnapshot.put(attrName, request.getAttribute(attrName));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Make framework objects available to handlers and view objects.\n\t\trequest.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());\n\t\trequest.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);\n\t\trequest.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);\n\t\trequest.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());\n\n\t\tif (this.flashMapManager != null) {\n\t\t\tFlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);\n\t\t\tif (inputFlashMap != null) {\n\t\t\t\trequest.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));\n\t\t\t}\n\t\t\trequest.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());\n\t\t\trequest.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);\n\t\t}\n\n\t\ttry {\n\t\t\tdoDispatch(request, response);\n\t\t}\n\t\tfinally {\n\t\t\tif (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t\t// Restore the original attribute snapshot, in case of an include.\n\t\t\t\tif (attributesSnapshot != null) {\n\t\t\t\t\trestoreAttributesAfterInclude(request, attributesSnapshot);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\nDispacherServlet 的 doDispatch方法是SpringMVC处理请求的核心方法，我们来看一下源码：\n\n```java\n\t/**\n\t * Process the actual dispatching to the handler.\n\t * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\n\t * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\n\t * to find the first that supports the handler class.\n\t * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\n\t * themselves to decide which methods are acceptable.\n\t * @param request current HTTP request\n\t * @param response current HTTP response\n\t * @throws Exception in case of any kind of processing failure\n\t */\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n\t\t\t\t\t}\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tcatch (Throwable err) {\n\t\t\t\t// As of 4.3, we're processing Errors thrown from handler methods as well,\n\t\t\t\t// making them available for @ExceptionHandler methods and other scenarios.\n\t\t\t\tdispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Throwable err) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,\n\t\t\t\t\tnew NestedServletException(\"Handler processing failed\", err));\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n处理步骤：\n  1. 获取请求对应的 HandlerExecutionChain，HandlerExecution中的handler记录了业务代码的入口方法。\n  2. 获取该 HandlerExecutionChain 中 handler对应的handlerAdapter\n  3. 执行 HandlerExecutionChain中拦截器的preHandler方法。\n  4. 执行 hander,获得ModelAndView对象mv\n  5. 执行 HandlerExecutionChain中拦截器的postHandler方法。\n  6. 执行 postDispatchResult方法，如果mv!=null,渲染视图。\n   \n\n\n# 3. 总结\n\n整个请求的处理流程的时序图如下：\n\n{% asset_img DispatcherServletSequence.jpg SpringMVC请求处理总时序图 %}\n","slug":"springmvc-resquest-flow","published":1,"updated":"2018-11-05T07:11:31.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo74sfee000h44s67aj34msg","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>我们在使用SpringMVC开发业务逻辑的时候，经常使用@Controller，@RequestMapping等注解快速注册并接收网络请求。<br>那今天我们来看一下，当接收到一个网络请求后，SpringMVC框架是如何找到你的业务逻辑代码处理请求，并返回结果的。</p>\n<h1 id=\"2-核心类图及方法\"><a href=\"#2-核心类图及方法\" class=\"headerlink\" title=\"2. 核心类图及方法\"></a>2. 核心类图及方法</h1><p>SpringMVC处理请求的核心类是DispatcherServlet，我们先来看一下他的类图</p>\n<img src=\"/blog/2018/10/30/springmvc-resquest-flow/springmvc_class.jpg\" title=\"DispatcherServler类图\">\n<p>我们看到核心类 DispacherServlet的祖先都是一些个抽象类。真正可以被实例化使用的只有DispatcherServlert，那关于处理请求方面，<br>这些抽象类都干了些什么呢？我们先来看一下定义了Servlet容器的接口<strong>javax.servlet.http.Servlet</strong>的源码</p>\n<h1 id=\"2-1-Servlet接口-及-HttpServlet中的实现\"><a href=\"#2-1-Servlet接口-及-HttpServlet中的实现\" class=\"headerlink\" title=\"2.1 Servlet接口 及 HttpServlet中的实现\"></a>2.1 Servlet接口 及 HttpServlet中的实现</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Servlet</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Servlet容器初始化接口，Servlet初始化后备调用。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException</span>;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 返回Servlet配置对象</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ServletConfig <span class=\"title\">getServletConfig</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Servlet处理请求的接口</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 返回servlet的信息，例如作者，版本和copyright</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getServletInfo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 当Servlet被移出服务的时候被调用</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里我们主要关心的是处理请求的service方法，我们来看一下他在<strong>HttpServlet</strong>中的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String method = req.getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// servlet doesn't support if-modified-since, no reason</span></span><br><span class=\"line\">            <span class=\"comment\">// to go through further expensive logic</span></span><br><span class=\"line\">            doGet(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> ifModifiedSince;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Invalid date header - proceed as if none was set</span></span><br><span class=\"line\">                ifModifiedSince = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ifModifiedSince &lt; (lastModified / <span class=\"number\">1000</span> * <span class=\"number\">1000</span>)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If the servlet mod time is later, call doGet()</span></span><br><span class=\"line\">                <span class=\"comment\">// Round down to the nearest second for a proper compare</span></span><br><span class=\"line\">                <span class=\"comment\">// A ifModifiedSince of -1 will always be less</span></span><br><span class=\"line\">                maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">        doHead(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class=\"line\">        doPost(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class=\"line\">        doPut(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class=\"line\">        doDelete(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class=\"line\">        doOptions(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class=\"line\">        doTrace(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Note that this means NO servlet supports whatever</span></span><br><span class=\"line\">        <span class=\"comment\">// method was requested, anywhere on this server.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</span><br><span class=\"line\">        Object[] errArgs = <span class=\"keyword\">new</span> Object[<span class=\"number\">1</span>];</span><br><span class=\"line\">        errArgs[<span class=\"number\">0</span>] = method;</span><br><span class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见HttpServlet实现了service方法并根据Http请求的Method调用了doGet,doHead,doPost,doPut,doDelete,doOptions,doTrace等方法。那末，请求便根据requestMethod被分散到了不通的方法中处理。</p>\n<h1 id=\"2-2-FrameworkServlet\"><a href=\"#2-2-FrameworkServlet\" class=\"headerlink\" title=\"2.2 FrameworkServlet\"></a>2.2 FrameworkServlet</h1><p>我们再来看一下DispatcherServlet的父类FrameworkServlet的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Override the parent class implementation in order to intercept PATCH requests.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHttpMethod httpMethod = HttpMethod.resolve(request.getMethod());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (httpMethod == HttpMethod.PATCH || httpMethod == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tprocessRequest(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.service(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate GET requests to processRequest/doService.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Will also be invoked by HttpServlet's default implementation of &#123;<span class=\"doctag\">@code</span> doHead&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> * with a &#123;<span class=\"doctag\">@code</span> NoBodyResponse&#125; that just captures the content length.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doHead</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprocessRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate POST requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprocessRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate PUT requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doPut</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprocessRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate DELETE requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doDelete</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprocessRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate OPTIONS requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;, if desired.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Applies HttpServlet's standard OPTIONS processing otherwise,</span></span><br><span class=\"line\"><span class=\"comment\"> * and also if there is still no 'Allow' header set after dispatching.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doOptions</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dispatchOptionsRequest || CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class=\"line\">\t\tprocessRequest(request, response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (response.containsHeader(<span class=\"string\">\"Allow\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Proper OPTIONS response coming from a handler - we're done.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Use response wrapper in order to always add PATCH to the allowed methods</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.doOptions(request, <span class=\"keyword\">new</span> HttpServletResponseWrapper(response) &#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeader</span><span class=\"params\">(String name, String value)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"Allow\"</span>.equals(name)) &#123;</span><br><span class=\"line\">\t\t\t\tvalue = (StringUtils.hasLength(value) ? value + <span class=\"string\">\", \"</span> : <span class=\"string\">\"\"</span>) + HttpMethod.PATCH.name();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>.setHeader(name, value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate TRACE requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;, if desired.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Applies HttpServlet's standard TRACE processing otherwise.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doTrace</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dispatchTraceRequest) &#123;</span><br><span class=\"line\">\t\tprocessRequest(request, response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"message/http\"</span>.equals(response.getContentType())) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Proper TRACE response coming from a handler - we're done.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.doTrace(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Process this request, publishing an event regardless of the outcome.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The actual event handling is performed by the abstract</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #doService&#125; template method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">\tThrowable failureCause = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tLocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class=\"line\">\tLocaleContext localeContext = buildLocaleContext(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\tRequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">\tServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\">\tasyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class=\"keyword\">new</span> RequestBindingInterceptor());</span><br><span class=\"line\"></span><br><span class=\"line\">\tinitContextHolders(request, localeContext, requestAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tdoService(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (ServletException | IOException ex) &#123;</span><br><span class=\"line\">\t\tfailureCause = ex;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\tfailureCause = ex;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Request processing failed\"</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\tresetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (requestAttributes != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\trequestAttributes.requestCompleted();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (failureCause != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.logger.debug(<span class=\"string\">\"Could not complete request\"</span>, failureCause);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(<span class=\"string\">\"Leaving response open for concurrent processing\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">this</span>.logger.debug(<span class=\"string\">\"Successfully completed request\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FrameworkServlet做了以下几件事情:</p>\n<ol>\n<li>覆写doGet,doPost,doPut等方法，都调用了processRequest来处理请求，把父类HttpServlet分散到各个方法中处理的请求又归拢到了一起，使用processRequest集中处理。</li>\n<li>覆写service方法，支持了http PATCH方法。</li>\n<li>processRequest方法初始化了ContextHolder并调用了抽象方法<strong>doService</strong>处理请求。</li>\n<li>publish了请求已被处理的ApplicationEvent。</li>\n</ol>\n<h1 id=\"2-3-DispatcherServlet\"><a href=\"#2-3-DispatcherServlet\" class=\"headerlink\" title=\"2.3 DispatcherServlet\"></a>2.3 DispatcherServlet</h1><p>DispacherServlet 实现了父类的抽象方法doService。先做了一些准备工作，便调用了doDispatch处理请求。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Exposes the DispatcherServlet-specific request attributes and delegates to &#123;<span class=\"doctag\">@link</span> #doDispatch&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * for the actual dispatching.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doService</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tString resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? <span class=\"string\">\" resumed\"</span> : <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">\"DispatcherServlet with name '\"</span> + getServletName() + <span class=\"string\">\"'\"</span> + resumed +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\" processing \"</span> + request.getMethod() + <span class=\"string\">\" request for [\"</span> + getRequestUri(request) + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// to be able to restore the original attributes after the include.</span></span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; attributesSnapshot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class=\"line\">\t\t\tattributesSnapshot = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\tEnumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\tString attrName = (String) attrNames.nextElement();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class=\"line\">\t\t\t\t\tattributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Make framework objects available to handlers and view objects.</span></span><br><span class=\"line\">\t\trequest.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class=\"line\">\t\trequest.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class=\"keyword\">this</span>.localeResolver);</span><br><span class=\"line\">\t\trequest.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class=\"keyword\">this</span>.themeResolver);</span><br><span class=\"line\">\t\trequest.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flashMapManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tFlashMap inputFlashMap = <span class=\"keyword\">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (inputFlashMap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\trequest.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\trequest.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class=\"keyword\">new</span> FlashMap());</span><br><span class=\"line\">\t\t\trequest.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class=\"keyword\">this</span>.flashMapManager);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tdoDispatch(request, response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (attributesSnapshot != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\trestoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>DispacherServlet 的 doDispatch方法是SpringMVC处理请求的核心方法，我们来看一下源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Process the actual dispatching to the handler.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order.</span></span><br><span class=\"line\"><span class=\"comment\"> * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</span></span><br><span class=\"line\"><span class=\"comment\"> * to find the first that supports the handler class.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</span></span><br><span class=\"line\"><span class=\"comment\"> * themselves to decide which methods are acceptable.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request current HTTP request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response current HTTP response</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception in case of any kind of processing failure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\tHttpServletRequest processedRequest = request;</span><br><span class=\"line\">\tHandlerExecutionChain mappedHandler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> multipartRequestParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tModelAndView mv = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tException dispatchException = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tprocessedRequest = checkMultipart(request);</span><br><span class=\"line\">\t\t\tmultipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">\t\t\tmappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnoHandlerFound(processedRequest, response);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">\t\t\tString method = request.getMethod();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> isGet = <span class=\"string\">\"GET\"</span>.equals(method);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isGet || <span class=\"string\">\"HEAD\"</span>.equals(method)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(<span class=\"string\">\"Last-Modified value for [\"</span> + getRequestUri(request) + <span class=\"string\">\"] is: \"</span> + lastModified);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tapplyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tdispatchException = ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">\t\t\tdispatchException = <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Handler dispatch failed\"</span>, err);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Handler processing failed\"</span>, err));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">\t\t\t\tcleanupMultipart(processedRequest);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>处理步骤：</p>\n<ol>\n<li>获取请求对应的 HandlerExecutionChain，HandlerExecution中的handler记录了业务代码的入口方法。</li>\n<li>获取该 HandlerExecutionChain 中 handler对应的handlerAdapter</li>\n<li>执行 HandlerExecutionChain中拦截器的preHandler方法。</li>\n<li>执行 hander,获得ModelAndView对象mv</li>\n<li>执行 HandlerExecutionChain中拦截器的postHandler方法。</li>\n<li>执行 postDispatchResult方法，如果mv!=null,渲染视图。</li>\n</ol>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>整个请求的处理流程的时序图如下：</p>\n<img src=\"/blog/2018/10/30/springmvc-resquest-flow/DispatcherServletSequence.jpg\" title=\"SpringMVC请求处理总时序图\">\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>我们在使用SpringMVC开发业务逻辑的时候，经常使用@Controller，@RequestMapping等注解快速注册并接收网络请求。<br>那今天我们来看一下，当接收到一个网络请求后，SpringMVC框架是如何找到你的业务逻辑代码处理请求，并返回结果的。</p>\n<h1 id=\"2-核心类图及方法\"><a href=\"#2-核心类图及方法\" class=\"headerlink\" title=\"2. 核心类图及方法\"></a>2. 核心类图及方法</h1><p>SpringMVC处理请求的核心类是DispatcherServlet，我们先来看一下他的类图</p>\n<img src=\"/blog/2018/10/30/springmvc-resquest-flow/springmvc_class.jpg\" title=\"DispatcherServler类图\">\n<p>我们看到核心类 DispacherServlet的祖先都是一些个抽象类。真正可以被实例化使用的只有DispatcherServlert，那关于处理请求方面，<br>这些抽象类都干了些什么呢？我们先来看一下定义了Servlet容器的接口<strong>javax.servlet.http.Servlet</strong>的源码</p>\n<h1 id=\"2-1-Servlet接口-及-HttpServlet中的实现\"><a href=\"#2-1-Servlet接口-及-HttpServlet中的实现\" class=\"headerlink\" title=\"2.1 Servlet接口 及 HttpServlet中的实现\"></a>2.1 Servlet接口 及 HttpServlet中的实现</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Servlet</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Servlet容器初始化接口，Servlet初始化后备调用。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException</span>;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 返回Servlet配置对象</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ServletConfig <span class=\"title\">getServletConfig</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Servlet处理请求的接口</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 返回servlet的信息，例如作者，版本和copyright</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getServletInfo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 当Servlet被移出服务的时候被调用</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里我们主要关心的是处理请求的service方法，我们来看一下他在<strong>HttpServlet</strong>中的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String method = req.getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// servlet doesn't support if-modified-since, no reason</span></span><br><span class=\"line\">            <span class=\"comment\">// to go through further expensive logic</span></span><br><span class=\"line\">            doGet(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> ifModifiedSince;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Invalid date header - proceed as if none was set</span></span><br><span class=\"line\">                ifModifiedSince = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ifModifiedSince &lt; (lastModified / <span class=\"number\">1000</span> * <span class=\"number\">1000</span>)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If the servlet mod time is later, call doGet()</span></span><br><span class=\"line\">                <span class=\"comment\">// Round down to the nearest second for a proper compare</span></span><br><span class=\"line\">                <span class=\"comment\">// A ifModifiedSince of -1 will always be less</span></span><br><span class=\"line\">                maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">        doHead(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class=\"line\">        doPost(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class=\"line\">        doPut(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class=\"line\">        doDelete(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class=\"line\">        doOptions(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class=\"line\">        doTrace(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Note that this means NO servlet supports whatever</span></span><br><span class=\"line\">        <span class=\"comment\">// method was requested, anywhere on this server.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</span><br><span class=\"line\">        Object[] errArgs = <span class=\"keyword\">new</span> Object[<span class=\"number\">1</span>];</span><br><span class=\"line\">        errArgs[<span class=\"number\">0</span>] = method;</span><br><span class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见HttpServlet实现了service方法并根据Http请求的Method调用了doGet,doHead,doPost,doPut,doDelete,doOptions,doTrace等方法。那末，请求便根据requestMethod被分散到了不通的方法中处理。</p>\n<h1 id=\"2-2-FrameworkServlet\"><a href=\"#2-2-FrameworkServlet\" class=\"headerlink\" title=\"2.2 FrameworkServlet\"></a>2.2 FrameworkServlet</h1><p>我们再来看一下DispatcherServlet的父类FrameworkServlet的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Override the parent class implementation in order to intercept PATCH requests.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHttpMethod httpMethod = HttpMethod.resolve(request.getMethod());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (httpMethod == HttpMethod.PATCH || httpMethod == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tprocessRequest(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.service(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate GET requests to processRequest/doService.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Will also be invoked by HttpServlet's default implementation of &#123;<span class=\"doctag\">@code</span> doHead&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> * with a &#123;<span class=\"doctag\">@code</span> NoBodyResponse&#125; that just captures the content length.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doHead</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprocessRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate POST requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprocessRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate PUT requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doPut</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprocessRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate DELETE requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doDelete</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprocessRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate OPTIONS requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;, if desired.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Applies HttpServlet's standard OPTIONS processing otherwise,</span></span><br><span class=\"line\"><span class=\"comment\"> * and also if there is still no 'Allow' header set after dispatching.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doOptions</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dispatchOptionsRequest || CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class=\"line\">\t\tprocessRequest(request, response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (response.containsHeader(<span class=\"string\">\"Allow\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Proper OPTIONS response coming from a handler - we're done.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Use response wrapper in order to always add PATCH to the allowed methods</span></span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.doOptions(request, <span class=\"keyword\">new</span> HttpServletResponseWrapper(response) &#123;</span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeader</span><span class=\"params\">(String name, String value)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"Allow\"</span>.equals(name)) &#123;</span><br><span class=\"line\">\t\t\t\tvalue = (StringUtils.hasLength(value) ? value + <span class=\"string\">\", \"</span> : <span class=\"string\">\"\"</span>) + HttpMethod.PATCH.name();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">super</span>.setHeader(name, value);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate TRACE requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;, if desired.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Applies HttpServlet's standard TRACE processing otherwise.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doTrace</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dispatchTraceRequest) &#123;</span><br><span class=\"line\">\t\tprocessRequest(request, response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"message/http\"</span>.equals(response.getContentType())) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Proper TRACE response coming from a handler - we're done.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.doTrace(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Process this request, publishing an event regardless of the outcome.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The actual event handling is performed by the abstract</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #doService&#125; template method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">\tThrowable failureCause = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tLocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class=\"line\">\tLocaleContext localeContext = buildLocaleContext(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\tRequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">\tServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\">\tasyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class=\"keyword\">new</span> RequestBindingInterceptor());</span><br><span class=\"line\"></span><br><span class=\"line\">\tinitContextHolders(request, localeContext, requestAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tdoService(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (ServletException | IOException ex) &#123;</span><br><span class=\"line\">\t\tfailureCause = ex;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\tfailureCause = ex;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Request processing failed\"</span>, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\tresetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (requestAttributes != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\trequestAttributes.requestCompleted();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (failureCause != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.logger.debug(<span class=\"string\">\"Could not complete request\"</span>, failureCause);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(<span class=\"string\">\"Leaving response open for concurrent processing\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">this</span>.logger.debug(<span class=\"string\">\"Successfully completed request\"</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FrameworkServlet做了以下几件事情:</p>\n<ol>\n<li>覆写doGet,doPost,doPut等方法，都调用了processRequest来处理请求，把父类HttpServlet分散到各个方法中处理的请求又归拢到了一起，使用processRequest集中处理。</li>\n<li>覆写service方法，支持了http PATCH方法。</li>\n<li>processRequest方法初始化了ContextHolder并调用了抽象方法<strong>doService</strong>处理请求。</li>\n<li>publish了请求已被处理的ApplicationEvent。</li>\n</ol>\n<h1 id=\"2-3-DispatcherServlet\"><a href=\"#2-3-DispatcherServlet\" class=\"headerlink\" title=\"2.3 DispatcherServlet\"></a>2.3 DispatcherServlet</h1><p>DispacherServlet 实现了父类的抽象方法doService。先做了一些准备工作，便调用了doDispatch处理请求。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Exposes the DispatcherServlet-specific request attributes and delegates to &#123;<span class=\"doctag\">@link</span> #doDispatch&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t * for the actual dispatching.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doService</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tString resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? <span class=\"string\">\" resumed\"</span> : <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">\"DispatcherServlet with name '\"</span> + getServletName() + <span class=\"string\">\"'\"</span> + resumed +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\" processing \"</span> + request.getMethod() + <span class=\"string\">\" request for [\"</span> + getRequestUri(request) + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// to be able to restore the original attributes after the include.</span></span><br><span class=\"line\">\t\tMap&lt;String, Object&gt; attributesSnapshot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class=\"line\">\t\t\tattributesSnapshot = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\tEnumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\tString attrName = (String) attrNames.nextElement();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class=\"line\">\t\t\t\t\tattributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Make framework objects available to handlers and view objects.</span></span><br><span class=\"line\">\t\trequest.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class=\"line\">\t\trequest.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class=\"keyword\">this</span>.localeResolver);</span><br><span class=\"line\">\t\trequest.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class=\"keyword\">this</span>.themeResolver);</span><br><span class=\"line\">\t\trequest.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flashMapManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tFlashMap inputFlashMap = <span class=\"keyword\">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (inputFlashMap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\trequest.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\trequest.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class=\"keyword\">new</span> FlashMap());</span><br><span class=\"line\">\t\t\trequest.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class=\"keyword\">this</span>.flashMapManager);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tdoDispatch(request, response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (attributesSnapshot != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\trestoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>DispacherServlet 的 doDispatch方法是SpringMVC处理请求的核心方法，我们来看一下源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Process the actual dispatching to the handler.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order.</span></span><br><span class=\"line\"><span class=\"comment\"> * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</span></span><br><span class=\"line\"><span class=\"comment\"> * to find the first that supports the handler class.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</span></span><br><span class=\"line\"><span class=\"comment\"> * themselves to decide which methods are acceptable.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request current HTTP request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response current HTTP response</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception in case of any kind of processing failure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\tHttpServletRequest processedRequest = request;</span><br><span class=\"line\">\tHandlerExecutionChain mappedHandler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">boolean</span> multipartRequestParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tModelAndView mv = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tException dispatchException = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tprocessedRequest = checkMultipart(request);</span><br><span class=\"line\">\t\t\tmultipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">\t\t\tmappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnoHandlerFound(processedRequest, response);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">\t\t\tString method = request.getMethod();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> isGet = <span class=\"string\">\"GET\"</span>.equals(method);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isGet || <span class=\"string\">\"HEAD\"</span>.equals(method)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(<span class=\"string\">\"Last-Modified value for [\"</span> + getRequestUri(request) + <span class=\"string\">\"] is: \"</span> + lastModified);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tapplyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\tdispatchException = ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">\t\t\tdispatchException = <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Handler dispatch failed\"</span>, err);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Handler processing failed\"</span>, err));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mappedHandler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">\t\t\t\tcleanupMultipart(processedRequest);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>处理步骤：</p>\n<ol>\n<li>获取请求对应的 HandlerExecutionChain，HandlerExecution中的handler记录了业务代码的入口方法。</li>\n<li>获取该 HandlerExecutionChain 中 handler对应的handlerAdapter</li>\n<li>执行 HandlerExecutionChain中拦截器的preHandler方法。</li>\n<li>执行 hander,获得ModelAndView对象mv</li>\n<li>执行 HandlerExecutionChain中拦截器的postHandler方法。</li>\n<li>执行 postDispatchResult方法，如果mv!=null,渲染视图。</li>\n</ol>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>整个请求的处理流程的时序图如下：</p>\n<img src=\"/blog/2018/10/30/springmvc-resquest-flow/DispatcherServletSequence.jpg\" title=\"SpringMVC请求处理总时序图\">\n"},{"title":"linux硬盘分区格式化以及挂载","date":"2018-10-23T02:02:43.000Z","_content":"\n# 1. 分区\n\n## 1.1 使用fdisk\n\n1）先查看下是否有磁盘没有分区\n\n```bash\nfdisk -l\n```\n\n2） 分区\n\n```bash\nfdisk /dev/sdb\n```\n\n3）根据提示操作\n\n### 1.2 使用 parted\n\n## 2. 格式化新硬盘\n\n```bash\nmkfs.ext4 /dev/sdb1  \n```\n\n## 3. 挂载\n\n1) 创建/data目录（/data目录为硬盘将挂载的地方）：\n\n```bash\nmkdir /data  \n```\n\n2）挂载分区：\n\n```bash\nmount /dev/sdb1 /data  \n```\n\n## 4. 查看磁盘分区的UUID\n\n```bash\n1. $ sudo blkid  \n```\n\n效果如下：\n\n```bash\n/dev/sda1: UUID=\"8048997a-16c9-447b-a209-82e4d380326e\" TYPE=\"ext4\"\n/dev/sda5: UUID=\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\" TYPE=\"swap\"\n/dev/sdb1: UUID=\"11263962-9715-473f-9421-0b604e895aaa\" TYPE=\"ext4\"\n/dev/sr0: LABEL=\"Join Me\" TYPE=\"iso9660\" \n```\n\n## 5. 配置开机自动挂载：\n因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：\n\n```bash\nsudo vim /etc/fstab  \n```\n\n加入：\n\n```bash\nUUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1\n```\n\n```bash\n注：\n<fs spec> <fs file> <fs vfstype> <fs mntops> <fs freq> <fs passno>\n具体说明，以挂载/dev/sdb1为例:\n<fs spec> :\n分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software\n<fs file> : 具体挂载点的位置，例如：/data\n<fs vfstype> : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs\n<fs mntops> : 挂载参数，一般为defaults\n<fs freq> : 磁盘检查，默认为0\n<fs passno> : 磁盘检查，默认为0,不需要检查 \n```\n\n修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。","source":"_posts/2018-10-linux-mount-harddisk.md","raw":"---\ntitle: linux硬盘分区格式化以及挂载\ndate: 2018-10-23 10:02:43\ntags: [harddisk,linux,mount,format]\ncategories: 运维\n---\n\n# 1. 分区\n\n## 1.1 使用fdisk\n\n1）先查看下是否有磁盘没有分区\n\n```bash\nfdisk -l\n```\n\n2） 分区\n\n```bash\nfdisk /dev/sdb\n```\n\n3）根据提示操作\n\n### 1.2 使用 parted\n\n## 2. 格式化新硬盘\n\n```bash\nmkfs.ext4 /dev/sdb1  \n```\n\n## 3. 挂载\n\n1) 创建/data目录（/data目录为硬盘将挂载的地方）：\n\n```bash\nmkdir /data  \n```\n\n2）挂载分区：\n\n```bash\nmount /dev/sdb1 /data  \n```\n\n## 4. 查看磁盘分区的UUID\n\n```bash\n1. $ sudo blkid  \n```\n\n效果如下：\n\n```bash\n/dev/sda1: UUID=\"8048997a-16c9-447b-a209-82e4d380326e\" TYPE=\"ext4\"\n/dev/sda5: UUID=\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\" TYPE=\"swap\"\n/dev/sdb1: UUID=\"11263962-9715-473f-9421-0b604e895aaa\" TYPE=\"ext4\"\n/dev/sr0: LABEL=\"Join Me\" TYPE=\"iso9660\" \n```\n\n## 5. 配置开机自动挂载：\n因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：\n\n```bash\nsudo vim /etc/fstab  \n```\n\n加入：\n\n```bash\nUUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1\n```\n\n```bash\n注：\n<fs spec> <fs file> <fs vfstype> <fs mntops> <fs freq> <fs passno>\n具体说明，以挂载/dev/sdb1为例:\n<fs spec> :\n分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software\n<fs file> : 具体挂载点的位置，例如：/data\n<fs vfstype> : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs\n<fs mntops> : 挂载参数，一般为defaults\n<fs freq> : 磁盘检查，默认为0\n<fs passno> : 磁盘检查，默认为0,不需要检查 \n```\n\n修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。","slug":"linux-mount-harddisk","published":1,"updated":"2018-10-23T02:58:52.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo74sfef000m44s6bya5t3sb","content":"<h1 id=\"1-分区\"><a href=\"#1-分区\" class=\"headerlink\" title=\"1. 分区\"></a>1. 分区</h1><h2 id=\"1-1-使用fdisk\"><a href=\"#1-1-使用fdisk\" class=\"headerlink\" title=\"1.1 使用fdisk\"></a>1.1 使用fdisk</h2><p>1）先查看下是否有磁盘没有分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n<p>2） 分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n<p>3）根据提示操作</p>\n<h3 id=\"1-2-使用-parted\"><a href=\"#1-2-使用-parted\" class=\"headerlink\" title=\"1.2 使用 parted\"></a>1.2 使用 parted</h3><h2 id=\"2-格式化新硬盘\"><a href=\"#2-格式化新硬盘\" class=\"headerlink\" title=\"2. 格式化新硬盘\"></a>2. 格式化新硬盘</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-挂载\"><a href=\"#3-挂载\" class=\"headerlink\" title=\"3. 挂载\"></a>3. 挂载</h2><p>1) 创建/data目录（/data目录为硬盘将挂载的地方）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data</span><br></pre></td></tr></table></figure>\n<p>2）挂载分区：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sdb1 /data</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-查看磁盘分区的UUID\"><a href=\"#4-查看磁盘分区的UUID\" class=\"headerlink\" title=\"4. 查看磁盘分区的UUID\"></a>4. 查看磁盘分区的UUID</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. $ sudo blkid</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda1: UUID=<span class=\"string\">\"8048997a-16c9-447b-a209-82e4d380326e\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sda5: UUID=<span class=\"string\">\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\"</span> TYPE=<span class=\"string\">\"swap\"</span></span><br><span class=\"line\">/dev/sdb1: UUID=<span class=\"string\">\"11263962-9715-473f-9421-0b604e895aaa\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sr0: LABEL=<span class=\"string\">\"Join Me\"</span> TYPE=<span class=\"string\">\"iso9660\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-配置开机自动挂载：\"><a href=\"#5-配置开机自动挂载：\" class=\"headerlink\" title=\"5. 配置开机自动挂载：\"></a>5. 配置开机自动挂载：</h2><p>因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：</span><br><span class=\"line\">&lt;fs spec&gt; &lt;fs file&gt; &lt;fs vfstype&gt; &lt;fs mntops&gt; &lt;fs freq&gt; &lt;fs passno&gt;</span><br><span class=\"line\">具体说明，以挂载/dev/sdb1为例:</span><br><span class=\"line\">&lt;fs spec&gt; :</span><br><span class=\"line\">分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software</span><br><span class=\"line\">&lt;fs file&gt; : 具体挂载点的位置，例如：/data</span><br><span class=\"line\">&lt;fs vfstype&gt; : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs</span><br><span class=\"line\">&lt;fs mntops&gt; : 挂载参数，一般为defaults</span><br><span class=\"line\">&lt;fs freq&gt; : 磁盘检查，默认为0</span><br><span class=\"line\">&lt;fs passno&gt; : 磁盘检查，默认为0,不需要检查</span><br></pre></td></tr></table></figure>\n<p>修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-分区\"><a href=\"#1-分区\" class=\"headerlink\" title=\"1. 分区\"></a>1. 分区</h1><h2 id=\"1-1-使用fdisk\"><a href=\"#1-1-使用fdisk\" class=\"headerlink\" title=\"1.1 使用fdisk\"></a>1.1 使用fdisk</h2><p>1）先查看下是否有磁盘没有分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n<p>2） 分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n<p>3）根据提示操作</p>\n<h3 id=\"1-2-使用-parted\"><a href=\"#1-2-使用-parted\" class=\"headerlink\" title=\"1.2 使用 parted\"></a>1.2 使用 parted</h3><h2 id=\"2-格式化新硬盘\"><a href=\"#2-格式化新硬盘\" class=\"headerlink\" title=\"2. 格式化新硬盘\"></a>2. 格式化新硬盘</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-挂载\"><a href=\"#3-挂载\" class=\"headerlink\" title=\"3. 挂载\"></a>3. 挂载</h2><p>1) 创建/data目录（/data目录为硬盘将挂载的地方）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data</span><br></pre></td></tr></table></figure>\n<p>2）挂载分区：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sdb1 /data</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-查看磁盘分区的UUID\"><a href=\"#4-查看磁盘分区的UUID\" class=\"headerlink\" title=\"4. 查看磁盘分区的UUID\"></a>4. 查看磁盘分区的UUID</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. $ sudo blkid</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda1: UUID=<span class=\"string\">\"8048997a-16c9-447b-a209-82e4d380326e\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sda5: UUID=<span class=\"string\">\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\"</span> TYPE=<span class=\"string\">\"swap\"</span></span><br><span class=\"line\">/dev/sdb1: UUID=<span class=\"string\">\"11263962-9715-473f-9421-0b604e895aaa\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sr0: LABEL=<span class=\"string\">\"Join Me\"</span> TYPE=<span class=\"string\">\"iso9660\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-配置开机自动挂载：\"><a href=\"#5-配置开机自动挂载：\" class=\"headerlink\" title=\"5. 配置开机自动挂载：\"></a>5. 配置开机自动挂载：</h2><p>因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：</span><br><span class=\"line\">&lt;fs spec&gt; &lt;fs file&gt; &lt;fs vfstype&gt; &lt;fs mntops&gt; &lt;fs freq&gt; &lt;fs passno&gt;</span><br><span class=\"line\">具体说明，以挂载/dev/sdb1为例:</span><br><span class=\"line\">&lt;fs spec&gt; :</span><br><span class=\"line\">分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software</span><br><span class=\"line\">&lt;fs file&gt; : 具体挂载点的位置，例如：/data</span><br><span class=\"line\">&lt;fs vfstype&gt; : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs</span><br><span class=\"line\">&lt;fs mntops&gt; : 挂载参数，一般为defaults</span><br><span class=\"line\">&lt;fs freq&gt; : 磁盘检查，默认为0</span><br><span class=\"line\">&lt;fs passno&gt; : 磁盘检查，默认为0,不需要检查</span><br></pre></td></tr></table></figure>\n<p>修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。</p>\n"},{"title":"几种用SSH执行远程命令的方法（译）","date":"2018-11-03T05:45:34.000Z","_content":"\n这篇文章将罗列几种使用SSH远程执行命令的方法。\n假设 HOST 参数已经配置好了你的测试服务器信息。\n\n# 单行命令\n\n执行一个单行命令：\n\n```bash\nssh $HOST ls\n```\n\n执行多个用;分割的内联命令 (inlined, separated with ;)\n\n```bash\nssh $HOST ls; pwd; cat /path/to/remote/file\n```\n\n使用sudo权限执行命令\n\n```bash\nssh $HOST sudo ls /root\nsudo: no tty present and no askpass program specified\n```\n\nsudo 需要与shell交互, 需要用 -t 参数开启\n\n```bash\nssh -t $HOST sudo ls /root\n[sudo] password for zaiste:\n```\n\n# 简单的多行命令\n\n```bash\nVAR1=\"Variable 1\"\nssh $HOST '\nls\npwd\nif true; then\n    echo \"True\"\n    echo $VAR1      # <-- it won't work\nelse\n    echo \"False\"\nfi\n'\n```\n\nshell 变量$VAR1将不会传递到远程命令中\n\n# 可以带变量的多行远程命令\n\n为了能够传递变量，我们使用bash -c 命令\n\n```bash\nVAR1=\"Variable 1\"\nssh $HOST bash -c \"'\nls\npwd\nif true; then\n    echo $VAR1\nelse\n    echo \"False\"\nfi\n'\"\n```\n\n# 在远程机器上执行本地脚本\n\n可以简单的用stdin重定向实现\n\n```output\ncat script.sh\nls\npwd\nhostname\n```\n\n```bash\nssh $HOST < script.sh\n```\n\n# 使用Heredoc远程执行多行命令\n\n使用**heredoc**可能是最方便的远程执行多行命令的方式了。\n而且支持代码块外的变量传递。\n\n```bash\nVAR1=\"boo\"\nssh -T $HOST << EOSSH\nls\npwd\nif true; then\n  echo $VAR1\nelse\n  echo \"False\"\nfi\nEOSSH\n```\n\n如果需要在heredoc代码块内定义变量，那就在heredoc开始的标记上打上单引号\n\n```bash\nssh -T $HOST <<'EOSSH'\nVAR1=`pwd`\necho $VAR1\n\nVAR2=$(uname -a)\necho $VAR2\n\nEOSSH\n```\n\n如果出现以下的警告信息\n\n```output\nPseudo-terminal will not be allocated because stdin is not a terminal.\n```\n\n可以执行ssh命令的时候加上 -T 参数消除这个警告\n\n# 原文链接\n\n[here](https://zaiste.net/a_few_ways_to_execute_commands_remotely_using_ssh/)","source":"_posts/2018-11-ssh-remote-command.md","raw":"---\ntitle: 几种用SSH执行远程命令的方法（译）\ndate: 2018-11-03 13:45:34\ntags: [bash,ssh,remote] \ncategories: [运维]\n---\n\n这篇文章将罗列几种使用SSH远程执行命令的方法。\n假设 HOST 参数已经配置好了你的测试服务器信息。\n\n# 单行命令\n\n执行一个单行命令：\n\n```bash\nssh $HOST ls\n```\n\n执行多个用;分割的内联命令 (inlined, separated with ;)\n\n```bash\nssh $HOST ls; pwd; cat /path/to/remote/file\n```\n\n使用sudo权限执行命令\n\n```bash\nssh $HOST sudo ls /root\nsudo: no tty present and no askpass program specified\n```\n\nsudo 需要与shell交互, 需要用 -t 参数开启\n\n```bash\nssh -t $HOST sudo ls /root\n[sudo] password for zaiste:\n```\n\n# 简单的多行命令\n\n```bash\nVAR1=\"Variable 1\"\nssh $HOST '\nls\npwd\nif true; then\n    echo \"True\"\n    echo $VAR1      # <-- it won't work\nelse\n    echo \"False\"\nfi\n'\n```\n\nshell 变量$VAR1将不会传递到远程命令中\n\n# 可以带变量的多行远程命令\n\n为了能够传递变量，我们使用bash -c 命令\n\n```bash\nVAR1=\"Variable 1\"\nssh $HOST bash -c \"'\nls\npwd\nif true; then\n    echo $VAR1\nelse\n    echo \"False\"\nfi\n'\"\n```\n\n# 在远程机器上执行本地脚本\n\n可以简单的用stdin重定向实现\n\n```output\ncat script.sh\nls\npwd\nhostname\n```\n\n```bash\nssh $HOST < script.sh\n```\n\n# 使用Heredoc远程执行多行命令\n\n使用**heredoc**可能是最方便的远程执行多行命令的方式了。\n而且支持代码块外的变量传递。\n\n```bash\nVAR1=\"boo\"\nssh -T $HOST << EOSSH\nls\npwd\nif true; then\n  echo $VAR1\nelse\n  echo \"False\"\nfi\nEOSSH\n```\n\n如果需要在heredoc代码块内定义变量，那就在heredoc开始的标记上打上单引号\n\n```bash\nssh -T $HOST <<'EOSSH'\nVAR1=`pwd`\necho $VAR1\n\nVAR2=$(uname -a)\necho $VAR2\n\nEOSSH\n```\n\n如果出现以下的警告信息\n\n```output\nPseudo-terminal will not be allocated because stdin is not a terminal.\n```\n\n可以执行ssh命令的时候加上 -T 参数消除这个警告\n\n# 原文链接\n\n[here](https://zaiste.net/a_few_ways_to_execute_commands_remotely_using_ssh/)","slug":"ssh-remote-command","published":1,"updated":"2018-11-05T07:11:31.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo74sfei000p44s6gw71rca5","content":"<p>这篇文章将罗列几种使用SSH远程执行命令的方法。<br>假设 HOST 参数已经配置好了你的测试服务器信息。</p>\n<h1 id=\"单行命令\"><a href=\"#单行命令\" class=\"headerlink\" title=\"单行命令\"></a>单行命令</h1><p>执行一个单行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> ls</span><br></pre></td></tr></table></figure>\n<p>执行多个用;分割的内联命令 (inlined, separated with ;)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> ls; <span class=\"built_in\">pwd</span>; cat /path/to/remote/file</span><br></pre></td></tr></table></figure>\n<p>使用sudo权限执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> sudo ls /root</span><br><span class=\"line\">sudo: no tty present and no askpass program specified</span><br></pre></td></tr></table></figure>\n<p>sudo 需要与shell交互, 需要用 -t 参数开启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -t <span class=\"variable\">$HOST</span> sudo ls /root</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> zaiste:</span><br></pre></td></tr></table></figure>\n<h1 id=\"简单的多行命令\"><a href=\"#简单的多行命令\" class=\"headerlink\" title=\"简单的多行命令\"></a>简单的多行命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"Variable 1\"</span></span><br><span class=\"line\">ssh <span class=\"variable\">$HOST</span> <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">pwd</span></span><br><span class=\"line\"><span class=\"string\">if true; then</span></span><br><span class=\"line\"><span class=\"string\">    echo \"True\"</span></span><br><span class=\"line\"><span class=\"string\">    echo $VAR1      # &lt;-- it won'</span>t work</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"False\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"string\">'</span></span><br></pre></td></tr></table></figure>\n<p>shell 变量$VAR1将不会传递到远程命令中</p>\n<h1 id=\"可以带变量的多行远程命令\"><a href=\"#可以带变量的多行远程命令\" class=\"headerlink\" title=\"可以带变量的多行远程命令\"></a>可以带变量的多行远程命令</h1><p>为了能够传递变量，我们使用bash -c 命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"Variable 1\"</span></span><br><span class=\"line\">ssh <span class=\"variable\">$HOST</span> bash -c <span class=\"string\">\"'</span></span><br><span class=\"line\"><span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">pwd</span></span><br><span class=\"line\"><span class=\"string\">if true; then</span></span><br><span class=\"line\"><span class=\"string\">    echo <span class=\"variable\">$VAR1</span></span></span><br><span class=\"line\"><span class=\"string\">else</span></span><br><span class=\"line\"><span class=\"string\">    echo \"</span>False<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">fi</span></span><br><span class=\"line\"><span class=\"string\">'\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"在远程机器上执行本地脚本\"><a href=\"#在远程机器上执行本地脚本\" class=\"headerlink\" title=\"在远程机器上执行本地脚本\"></a>在远程机器上执行本地脚本</h1><p>可以简单的用stdin重定向实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat script.sh</span><br><span class=\"line\">ls</span><br><span class=\"line\">pwd</span><br><span class=\"line\">hostname</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> &lt; script.sh</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Heredoc远程执行多行命令\"><a href=\"#使用Heredoc远程执行多行命令\" class=\"headerlink\" title=\"使用Heredoc远程执行多行命令\"></a>使用Heredoc远程执行多行命令</h1><p>使用<strong>heredoc</strong>可能是最方便的远程执行多行命令的方式了。<br>而且支持代码块外的变量传递。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"boo\"</span></span><br><span class=\"line\">ssh -T <span class=\"variable\">$HOST</span> &lt;&lt; EOSSH</span><br><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">true</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$VAR1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"False\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">EOSSH</span><br></pre></td></tr></table></figure>\n<p>如果需要在heredoc代码块内定义变量，那就在heredoc开始的标记上打上单引号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T <span class=\"variable\">$HOST</span> &lt;&lt;<span class=\"string\">'EOSSH'</span></span><br><span class=\"line\">VAR1=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$VAR1</span></span><br><span class=\"line\"></span><br><span class=\"line\">VAR2=$(uname -a)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$VAR2</span></span><br><span class=\"line\"></span><br><span class=\"line\">EOSSH</span><br></pre></td></tr></table></figure>\n<p>如果出现以下的警告信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pseudo-terminal will not be allocated because stdin is not a terminal.</span><br></pre></td></tr></table></figure>\n<p>可以执行ssh命令的时候加上 -T 参数消除这个警告</p>\n<h1 id=\"原文链接\"><a href=\"#原文链接\" class=\"headerlink\" title=\"原文链接\"></a>原文链接</h1><p><a href=\"https://zaiste.net/a_few_ways_to_execute_commands_remotely_using_ssh/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇文章将罗列几种使用SSH远程执行命令的方法。<br>假设 HOST 参数已经配置好了你的测试服务器信息。</p>\n<h1 id=\"单行命令\"><a href=\"#单行命令\" class=\"headerlink\" title=\"单行命令\"></a>单行命令</h1><p>执行一个单行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> ls</span><br></pre></td></tr></table></figure>\n<p>执行多个用;分割的内联命令 (inlined, separated with ;)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> ls; <span class=\"built_in\">pwd</span>; cat /path/to/remote/file</span><br></pre></td></tr></table></figure>\n<p>使用sudo权限执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> sudo ls /root</span><br><span class=\"line\">sudo: no tty present and no askpass program specified</span><br></pre></td></tr></table></figure>\n<p>sudo 需要与shell交互, 需要用 -t 参数开启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -t <span class=\"variable\">$HOST</span> sudo ls /root</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> zaiste:</span><br></pre></td></tr></table></figure>\n<h1 id=\"简单的多行命令\"><a href=\"#简单的多行命令\" class=\"headerlink\" title=\"简单的多行命令\"></a>简单的多行命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"Variable 1\"</span></span><br><span class=\"line\">ssh <span class=\"variable\">$HOST</span> <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">pwd</span></span><br><span class=\"line\"><span class=\"string\">if true; then</span></span><br><span class=\"line\"><span class=\"string\">    echo \"True\"</span></span><br><span class=\"line\"><span class=\"string\">    echo $VAR1      # &lt;-- it won'</span>t work</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"False\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"string\">'</span></span><br></pre></td></tr></table></figure>\n<p>shell 变量$VAR1将不会传递到远程命令中</p>\n<h1 id=\"可以带变量的多行远程命令\"><a href=\"#可以带变量的多行远程命令\" class=\"headerlink\" title=\"可以带变量的多行远程命令\"></a>可以带变量的多行远程命令</h1><p>为了能够传递变量，我们使用bash -c 命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"Variable 1\"</span></span><br><span class=\"line\">ssh <span class=\"variable\">$HOST</span> bash -c <span class=\"string\">\"'</span></span><br><span class=\"line\"><span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">pwd</span></span><br><span class=\"line\"><span class=\"string\">if true; then</span></span><br><span class=\"line\"><span class=\"string\">    echo <span class=\"variable\">$VAR1</span></span></span><br><span class=\"line\"><span class=\"string\">else</span></span><br><span class=\"line\"><span class=\"string\">    echo \"</span>False<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">fi</span></span><br><span class=\"line\"><span class=\"string\">'\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"在远程机器上执行本地脚本\"><a href=\"#在远程机器上执行本地脚本\" class=\"headerlink\" title=\"在远程机器上执行本地脚本\"></a>在远程机器上执行本地脚本</h1><p>可以简单的用stdin重定向实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat script.sh</span><br><span class=\"line\">ls</span><br><span class=\"line\">pwd</span><br><span class=\"line\">hostname</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> &lt; script.sh</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Heredoc远程执行多行命令\"><a href=\"#使用Heredoc远程执行多行命令\" class=\"headerlink\" title=\"使用Heredoc远程执行多行命令\"></a>使用Heredoc远程执行多行命令</h1><p>使用<strong>heredoc</strong>可能是最方便的远程执行多行命令的方式了。<br>而且支持代码块外的变量传递。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"boo\"</span></span><br><span class=\"line\">ssh -T <span class=\"variable\">$HOST</span> &lt;&lt; EOSSH</span><br><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">true</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$VAR1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"False\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">EOSSH</span><br></pre></td></tr></table></figure>\n<p>如果需要在heredoc代码块内定义变量，那就在heredoc开始的标记上打上单引号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T <span class=\"variable\">$HOST</span> &lt;&lt;<span class=\"string\">'EOSSH'</span></span><br><span class=\"line\">VAR1=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$VAR1</span></span><br><span class=\"line\"></span><br><span class=\"line\">VAR2=$(uname -a)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$VAR2</span></span><br><span class=\"line\"></span><br><span class=\"line\">EOSSH</span><br></pre></td></tr></table></figure>\n<p>如果出现以下的警告信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pseudo-terminal will not be allocated because stdin is not a terminal.</span><br></pre></td></tr></table></figure>\n<p>可以执行ssh命令的时候加上 -T 参数消除这个警告</p>\n<h1 id=\"原文链接\"><a href=\"#原文链接\" class=\"headerlink\" title=\"原文链接\"></a>原文链接</h1><p><a href=\"https://zaiste.net/a_few_ways_to_execute_commands_remotely_using_ssh/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/2018-10-springmvc-resquest-flow/DispatcherServletSequence.jpg","slug":"DispatcherServletSequence.jpg","post":"cjo74sfee000h44s67aj34msg","modified":0,"renderable":0},{"_id":"source/_posts/2018-10-springmvc-resquest-flow/springmvc_class.jpg","slug":"springmvc_class.jpg","post":"cjo74sfee000h44s67aj34msg","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjo74sfdx000144s68e080bup","category_id":"cjo74sfe0000344s6kmppjdbn","_id":"cjo74sfec000d44s6josipd0g"},{"post_id":"cjo74sfe8000a44s6l9clzdzj","category_id":"cjo74sfe0000344s6kmppjdbn","_id":"cjo74sfee000i44s6h7qwwg2q"},{"post_id":"cjo74sfdz000244s6esnkcbcn","category_id":"cjo74sfe0000344s6kmppjdbn","_id":"cjo74sfef000n44s6qmg4cg1l"},{"post_id":"cjo74sfe3000544s6sw4ecqn4","category_id":"cjo74sfeb000c44s6coyds6ul","_id":"cjo74sfej000q44s6ld4kv2yf"},{"post_id":"cjo74sfef000m44s6bya5t3sb","category_id":"cjo74sfe0000344s6kmppjdbn","_id":"cjo74sfek000t44s648512a41"},{"post_id":"cjo74sfe5000644s659zfs2jx","category_id":"cjo74sfef000k44s6lfelb0r5","_id":"cjo74sfek000v44s6gm93r13j"},{"post_id":"cjo74sfei000p44s6gw71rca5","category_id":"cjo74sfe0000344s6kmppjdbn","_id":"cjo74sfek000x44s6gq3wqb76"},{"post_id":"cjo74sfe6000744s68ruvqq5d","category_id":"cjo74sfeb000c44s6coyds6ul","_id":"cjo74sfek000z44s6qgkt45dj"},{"post_id":"cjo74sfea000b44s60xdvjn8z","category_id":"cjo74sfef000k44s6lfelb0r5","_id":"cjo74sfel001244s699fcgy4c"},{"post_id":"cjo74sfed000f44s6qdwextu2","category_id":"cjo74sfek000y44s6yn3kjpmk","_id":"cjo74sfel001744s66gqvh38j"},{"post_id":"cjo74sfee000h44s67aj34msg","category_id":"cjo74sfel001344s6zvgak60l","_id":"cjo74sfel001944s62xhn99uh"}],"PostTag":[{"post_id":"cjo74sfdx000144s68e080bup","tag_id":"cjo74sfe2000444s6xb4ke1w0","_id":"cjo74sfed000g44s6nzw31aez"},{"post_id":"cjo74sfdx000144s68e080bup","tag_id":"cjo74sfe6000944s624owqm70","_id":"cjo74sfef000j44s6sn1o9yzg"},{"post_id":"cjo74sfdz000244s6esnkcbcn","tag_id":"cjo74sfec000e44s6mif0vzl6","_id":"cjo74sfeg000o44s6wqa5hs2t"},{"post_id":"cjo74sfe3000544s6sw4ecqn4","tag_id":"cjo74sfef000l44s6wxzr2lxp","_id":"cjo74sfel001144s6atlmvnv1"},{"post_id":"cjo74sfe3000544s6sw4ecqn4","tag_id":"cjo74sfej000s44s6feix7abw","_id":"cjo74sfel001444s6v6lw92da"},{"post_id":"cjo74sfe3000544s6sw4ecqn4","tag_id":"cjo74sfek000w44s6wmcc9cal","_id":"cjo74sfel001644s6pmozp65u"},{"post_id":"cjo74sfe5000644s659zfs2jx","tag_id":"cjo74sfel001044s6ysq8xwb2","_id":"cjo74sfem001b44s6icp51eo2"},{"post_id":"cjo74sfe5000644s659zfs2jx","tag_id":"cjo74sfel001544s6zijy7u6v","_id":"cjo74sfem001c44s6b4moshg6"},{"post_id":"cjo74sfe5000644s659zfs2jx","tag_id":"cjo74sfel001844s6wj5go8wu","_id":"cjo74sfem001e44s6rsihwde6"},{"post_id":"cjo74sfe6000744s68ruvqq5d","tag_id":"cjo74sfef000l44s6wxzr2lxp","_id":"cjo74sfen001j44s6di4kwp03"},{"post_id":"cjo74sfe6000744s68ruvqq5d","tag_id":"cjo74sfem001d44s6yadoh1a3","_id":"cjo74sfen001k44s6v97gh7zw"},{"post_id":"cjo74sfe6000744s68ruvqq5d","tag_id":"cjo74sfem001f44s68ubwflot","_id":"cjo74sfen001m44s6vuqmp6lr"},{"post_id":"cjo74sfe6000744s68ruvqq5d","tag_id":"cjo74sfem001d44s6yadoh1a3","_id":"cjo74sfen001n44s6tvyjpgnq"},{"post_id":"cjo74sfe6000744s68ruvqq5d","tag_id":"cjo74sfem001h44s6a3a0dxp5","_id":"cjo74sfeo001p44s6yxkiz1i1"},{"post_id":"cjo74sfe8000a44s6l9clzdzj","tag_id":"cjo74sfe2000444s6xb4ke1w0","_id":"cjo74sfeo001q44s6rsotjnzm"},{"post_id":"cjo74sfe8000a44s6l9clzdzj","tag_id":"cjo74sfel001544s6zijy7u6v","_id":"cjo74sfeo001s44s6ibri84ui"},{"post_id":"cjo74sfe8000a44s6l9clzdzj","tag_id":"cjo74sfen001l44s64xpe9czn","_id":"cjo74sfeo001t44s6zjospi90"},{"post_id":"cjo74sfea000b44s60xdvjn8z","tag_id":"cjo74sfel001044s6ysq8xwb2","_id":"cjo74sfeo001v44s6lwrd71rp"},{"post_id":"cjo74sfed000f44s6qdwextu2","tag_id":"cjo74sfef000l44s6wxzr2lxp","_id":"cjo74sfeo001w44s6ljhxccnf"},{"post_id":"cjo74sfee000h44s67aj34msg","tag_id":"cjo74sfef000l44s6wxzr2lxp","_id":"cjo74sfep002044s6zmgo3fam"},{"post_id":"cjo74sfee000h44s67aj34msg","tag_id":"cjo74sfeo001x44s60zz4juyr","_id":"cjo74sfep002144s6y9xj8rd9"},{"post_id":"cjo74sfee000h44s67aj34msg","tag_id":"cjo74sfep001y44s62eji0bpe","_id":"cjo74sfep002344s6py24544v"},{"post_id":"cjo74sfef000m44s6bya5t3sb","tag_id":"cjo74sfep001z44s6j9d2nkze","_id":"cjo74sfeq002744s6r27rn7bp"},{"post_id":"cjo74sfef000m44s6bya5t3sb","tag_id":"cjo74sfep002244s6lpkxt2ka","_id":"cjo74sfeq002844s6l75pvyz2"},{"post_id":"cjo74sfef000m44s6bya5t3sb","tag_id":"cjo74sfep002444s6nnifp31s","_id":"cjo74sfeq002a44s6xm6ap3ar"},{"post_id":"cjo74sfef000m44s6bya5t3sb","tag_id":"cjo74sfep002544s6b3wiq87t","_id":"cjo74sfeq002b44s6x66443ti"},{"post_id":"cjo74sfei000p44s6gw71rca5","tag_id":"cjo74sfe2000444s6xb4ke1w0","_id":"cjo74sfeq002c44s6i2quzvy6"},{"post_id":"cjo74sfei000p44s6gw71rca5","tag_id":"cjo74sfep002644s6l1rzihta","_id":"cjo74sfeq002d44s6jc467sws"},{"post_id":"cjo74sfei000p44s6gw71rca5","tag_id":"cjo74sfeq002944s60j2gsmwn","_id":"cjo74sfeq002e44s6jq07u9h3"}],"Tag":[{"name":"bash","_id":"cjo74sfe2000444s6xb4ke1w0"},{"name":"args","_id":"cjo74sfe6000944s624owqm70"},{"name":"elasticsearch","_id":"cjo74sfec000e44s6mif0vzl6"},{"name":"spring","_id":"cjo74sfef000l44s6wxzr2lxp"},{"name":"handlerMethodResolver","_id":"cjo74sfej000s44s6feix7abw"},{"name":"springMvc","_id":"cjo74sfek000w44s6wmcc9cal"},{"name":"git","_id":"cjo74sfel001044s6ysq8xwb2"},{"name":"command","_id":"cjo74sfel001544s6zijy7u6v"},{"name":"node","_id":"cjo74sfel001844s6wj5go8wu"},{"name":"scope","_id":"cjo74sfem001d44s6yadoh1a3"},{"name":"java","_id":"cjo74sfem001f44s68ubwflot"},{"name":"译","_id":"cjo74sfem001h44s6a3a0dxp5"},{"name":"sync","_id":"cjo74sfen001l44s64xpe9czn"},{"name":"源码解析","_id":"cjo74sfeo001x44s60zz4juyr"},{"name":"springMVC","_id":"cjo74sfep001y44s62eji0bpe"},{"name":"harddisk","_id":"cjo74sfep001z44s6j9d2nkze"},{"name":"linux","_id":"cjo74sfep002244s6lpkxt2ka"},{"name":"mount","_id":"cjo74sfep002444s6nnifp31s"},{"name":"format","_id":"cjo74sfep002544s6b3wiq87t"},{"name":"ssh","_id":"cjo74sfep002644s6l1rzihta"},{"name":"remote","_id":"cjo74sfeq002944s60j2gsmwn"}]}}