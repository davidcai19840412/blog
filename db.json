{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/fingerprint.jpg","path":"images/fingerprint.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"source/images/avatar_960_960.jpg","path":"images/avatar_960_960.jpg","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"themes/next/.DS_Store","hash":"952ec6a336a1b63957ecedae94bb944e02ff3fcc","modified":1541401547279},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1541401891873},{"_id":"themes/next/.all-contributorsrc","hash":"e32dc4075e304af04b98d0726d489081bea722c0","modified":1541401891872},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1541401891873},{"_id":"themes/next/.gitignore","hash":"bf6400ebc2fbf908ca69f53bf11b1c5562970a5a","modified":1541402076413},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1541401891874},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1540609879564},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1541401891874},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1541401891878},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1541401891879},{"_id":"themes/next/bower.json","hash":"23379fec9b4f70bc2611433ac3770445a8ca18d9","modified":1541401891882},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1541401891882},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1541401891879},{"_id":"themes/next/README.md","hash":"ee7119baf976616a84d3c9c10fcab567995dc98e","modified":1541401891880},{"_id":"themes/next/_config.yml","hash":"52bd441066b8dc6fe4e3d091b5940ab2fa79d9c1","modified":1541403102272},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1541401891894},{"_id":"themes/next/package.json","hash":"901c9bf4743df8f1806b5bcb5e93b54f6aee0ea3","modified":1541401891935},{"_id":"source/.DS_Store","hash":"0da176ffb3d5a7ba64c391ea270eafde84db2e56","modified":1540437997626},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1541401891876},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1541401891876},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1541401891876},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1541401891875},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1541401891877},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1541401891877},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1541401891883},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1541401891884},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1541401891885},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1541401891886},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1541401891886},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1541401891884},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1541401891885},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1541401891887},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1541401891887},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1541401891894},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1541401891895},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1541401891895},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1541401891896},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1541401891897},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1541401891895},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1541401891897},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1541401891898},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1541401891898},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1541401891896},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1541401891898},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1541401891899},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1541401891900},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1541401891900},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1541401891899},{"_id":"themes/next/layout/_layout.swig","hash":"85de0662a1b136277a72f8d8b4b1425a006f377e","modified":1541401891902},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1541401891933},{"_id":"themes/next/layout/page.swig","hash":"862b361852fb6d7a95bfb6077922410a33cd3126","modified":1541401891934},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1541401891933},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1541401891932},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1541401891934},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1541401891934},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1541401891935},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1541401891895},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1541401891936},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1541401891936},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1541401891900},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1541401891937},{"_id":"themes/next/source/.DS_Store","hash":"4d76a69ed91c3fde09d9ab7a01348e4fb14a3134","modified":1541687633883},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1541401892005},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1541401892005},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1541401892005},{"_id":"source/categories/index.md","hash":"35e8064644f4c139653d4134005ef4def8404848","modified":1540258645491},{"_id":"source/tags/index.md","hash":"0ad168e3fe7d209c4f2a2d13a72950adfb113b2a","modified":1540258503061},{"_id":"source/_posts/2018-10-bash-args.md","hash":"65d289064977f97225448778a72510978928784d","modified":1540264411324},{"_id":"source/images/fingerprint.jpg","hash":"fda6b9c66b78bc4ff760978b48431bb95ab5d9f0","modified":1541401238472},{"_id":"source/_posts/2018-10-es-server-config.md","hash":"64b9ab0df132b23c6740636379d0c62fceae2383","modified":1540264918844},{"_id":"source/_posts/2018-10-git-credential.md","hash":"05302bdf05d9bc2854d4052930a3f2a52fefbf5e","modified":1541401891868},{"_id":"source/_posts/2018-10-custom-handler-method-argument-resolver.md","hash":"efc5086154264461b008cbae46df026fc3852ab3","modified":1542851573076},{"_id":"source/_posts/2018-10-rsync.md","hash":"9318055999b9e0c1cda34212c905d2304d5b4102","modified":1541401891868},{"_id":"source/_posts/2018-10-linux-mount-harddisk.md","hash":"72c5fef0b26ba68ea199724104ebb3b690457a78","modified":1540263532062},{"_id":"source/_posts/2018-10-spring-custom-scope.md","hash":"9284cc7592c34eeb04a2e48220046a09eb8ecb1a","modified":1541401238460},{"_id":"source/_posts/2018-10-springmvc-resquest-flow.md","hash":"203c355afa9d6d47aa757653b3c2508f22d56b06","modified":1542634193535},{"_id":"source/_posts/2018-10-use-of-application-context-aware.md","hash":"afb8d619eb1b744e7753d44cb7d6432d20f9dabc","modified":1541401238460},{"_id":"source/_posts/2018-11-git-remove-commit.md","hash":"695c8295593e0a3754127e401e805c24cef99614","modified":1542121304798},{"_id":"source/_posts/2018-11-install-minibuke-china.md","hash":"7faf681e378bb3fa997f2bf987a5f11155a61be6","modified":1543499279125},{"_id":"source/_posts/2018-11-ssh-remote-command.md","hash":"40c3a47015758f18f7bb3e2e4d1e1cd64b47e8a9","modified":1541401891871},{"_id":"source/_posts/2018-11-springmvc-find-request-handler.md","hash":"2bed164e456130c3bc13617f452a991c573af0e8","modified":1542851035757},{"_id":"source/_posts/2019-03-set-swap.md","hash":"59e57ad2d624540add81bc9d2601a87e8073fe05","modified":1552010304596},{"_id":"source/_posts/2019-06-my-vscode-config.md","hash":"a13d9faec6bacccceb51bf2c566da0af667ee81b","modified":1560244369418},{"_id":"source/_posts/2019-04-unbutu-gui-switch.md","hash":"df1e09d2db4b82ab7e5f68e0de4dee4e6e7e246c","modified":1555985131156},{"_id":"source/_posts/2020-10-reenterlock-aqs-syncronized.md","hash":"30643bcb22449e0085994b298646f72b7bf44c08","modified":1603351374804},{"_id":"source/_posts/2020-05-docker-ce-offline-install.md","hash":"43c8f00c71314e0c853a7884916b18b6f2709c0c","modified":1589526432786},{"_id":"source/_posts/2020-10-design-pattern-principal.md","hash":"00454242b7e165a60360bde802e2ae0bf9489bf1","modified":1603208872894},{"_id":"source/_posts/2018-10-bash-process-watcher.md","hash":"ed7dcce8c9d6b43e44c53930fa6cc7fd1ad965bc","modified":1540272352570},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891985},{"_id":"themes/next/docs/ru/README.md","hash":"c54e256ed11a84ee38f755d6f35a3e6e29a91dbc","modified":1541401891889},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1541401891888},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1541401891888},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1541401891889},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1541401891890},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1541401891890},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1541401891891},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1541401891889},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1541401891892},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"8ac2f5d2a023211d8d8ea626cbf6b8dea67ac201","modified":1541401891892},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1541401891891},{"_id":"themes/next/docs/zh-CN/README.md","hash":"aa6808f4f587c1a97205fa9427ba96a366bcb288","modified":1541401891893},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1541401891893},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1541401891901},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1541401891902},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1541401891901},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1541401891903},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1541401891904},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1541401891904},{"_id":"themes/next/layout/_macro/post.swig","hash":"5767eccaf3951151e01c61189016932e9516c8b9","modified":1541401891905},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1541401891906},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1541401891906},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1541401891905},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1541401891907},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1541401891911},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1541401891907},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d15a983de60d4c0bdd23cd31cd49de876ed2310c","modified":1541401891907},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1541401891914},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1541401891911},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1541401891915},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1541401891915},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1541401891916},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1541401891925},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1541401891923},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1541401891926},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1541401891926},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1541401891928},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1541401891928},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1541401891929},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1541401891928},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1541401891929},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1541401891937},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1541401891938},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1541401891938},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1541401891938},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1541401891939},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1541401891940},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1541401891940},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1541401891941},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"981e01aaf45a1f0f23ce0796d03134f9e437aaca","modified":1541401891939},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1541401891985},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1541401891985},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1541401891987},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1541401891986},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1541401891986},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1541401891988},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1541401891988},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1541401891988},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1541401891990},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1541401891989},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1541401891990},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1541401891991},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1541401891991},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541401891991},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1541401891992},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1541401891993},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541401891992},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1541401891994},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1541401891993},{"_id":"themes/next/source/lib/.DS_Store","hash":"854e7eddedc7547b3a63b50f1f4ec2c428badc0b","modified":1541401706931},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891916},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891916},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891972},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891972},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891973},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891983},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1541401891984},{"_id":"source/_posts/2018-10-springmvc-resquest-flow/springmvc_class.jpg","hash":"92969779b030f6879da14bf7a769898be2db0b4a","modified":1541401891871},{"_id":"source/_posts/2018-11-springmvc-find-request-handler/RequestMappingHandlerMapping_uml_class.jpg","hash":"63efb6ec4c529bdf6535f0550e9f3e10b2fe564d","modified":1542632572888},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1541401891903},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1541401891903},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1541401891908},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1541401891909},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1541401891908},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1541401891910},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1541401891909},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1541401891910},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1541401891910},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1541401891911},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1541401891912},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1541401891912},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1541401891912},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1541401891913},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1541401891913},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1541401891914},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1541401891915},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1541401891916},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1541401891916},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1541401891917},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1541401891917},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1541401891918},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"07307f1f0e0e9858f2c7143cbdfcb2a9a92149ab","modified":1541401891918},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1541401891918},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1541401891919},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1541401891919},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1541401891920},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5dbeb640707a9c91357e373b9063a48c8e78f439","modified":1541401891920},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1541401891921},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1541401891921},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1541401891921},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1541401891922},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1541401891922},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"e3266bb5fa28e08993f0289bca099b30259947f6","modified":1541401891924},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"2c74a96dd314e804d801f8773ac1b2e0a970fce3","modified":1541401891924},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"03ef008bc95e8e83232e5464a6c63d6157d33a5e","modified":1541401891923},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1541401891924},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1541401891923},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1541401891925},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1541401891926},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1541401891927},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1541401891927},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1541401891931},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1541401891931},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1541401891932},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1541401891931},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1541401891971},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1541401891971},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"59961fb806a39c367fd19ad37268eee112be6729","modified":1541401891973},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1541401891972},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1541401891983},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1541401891983},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1541401891984},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f9b83d0385529e52ce7ba95ed5ed6b3d4e2419bb","modified":1541401891984},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1541401891995},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1541401891994},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1541401891996},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1541401891995},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1541401891997},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1541401891998},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1541401891996},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1541401891998},{"_id":"themes/next/source/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1541401891997},{"_id":"themes/next/source/js/src/utils.js","hash":"66f2ac658d6110f70a86f784d0c5d891a97c14bd","modified":1541401891999},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1541401445849},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1541401445849},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1541401445849},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1541401445849},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1541401445850},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1541401892003},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1541401892004},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1541401892004},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1541401932068},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1541401932068},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1541401932069},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1541401932070},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1541401932070},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1541401932069},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1541401932070},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1541401932070},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1541401932071},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1541401932071},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1541401932071},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1541401932072},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1541401932074},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1541401932074},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1541401932073},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1541401932075},{"_id":"source/images/alipay.jpg","hash":"7cfce0fbf312a4998a7a9991ca4b1deadaec7bb9","modified":1540262585818},{"_id":"source/_posts/2018-10-springmvc-resquest-flow/DispatcherServletSequence.jpg","hash":"f7d9a296a3d6234177dcf60b54a859a19e2ed26a","modified":1541401891870},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1541401892000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1541401891930},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1541401891968},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"b75256fe3768b1a37b6ff6dd7f9f0ff135a42067","modified":1541401891969},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1541401891930},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1541401891970},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1541401891970},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"02d138ed65060e98f20bc5b1dd59a791222b7156","modified":1541401891971},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1541401891941},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1541401891942},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1541401891942},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1541401891943},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1541401891969},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1541401891950},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1541401891962},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"665b1813a1d6fbc3c5549a76e4f26cd62a804dde","modified":1541401891973},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"efc40a32487e0ac7b94b1ca81bdbdcc4ec8f2924","modified":1541401891969},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1541401891978},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1541401891979},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1541401891978},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1541401891979},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1541401891980},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1541401891980},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1541401891981},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1541401891981},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b4a2f1d031fe44452cf55ded8211cf018235073a","modified":1541401891941},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1541401891982},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1541401891982},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1541401891982},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1541401891978},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1541401891974},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1541401891975},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1541401891975},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1541401891974},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1541401891975},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1541401891976},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1541401891976},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"89267bd16ecbedd1958af7f0fb3f4f654d24fffa","modified":1541401891997},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1541401445850},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1541401445850},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1541401445851},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1541401445855},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1541401445856},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541401445854},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541401445853},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1541401891944},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1541401891944},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1541401891943},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1541401891945},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1541401891945},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1541401891946},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1541401891944},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1541401891946},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1541401891948},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"a6dc3c7eb81ef5117c28fa2245fff1adc02d0292","modified":1541401891947},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1541401891947},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1541401891948},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1541401891948},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f2911a048e5c20ca2a059bd1087d98ac1c51681c","modified":1541401891950},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1541401891949},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1541401891951},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1541401891949},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1541401891952},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1541401891951},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1541401891952},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1541401891953},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1541401891953},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1541401891954},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1541401891955},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1541401891952},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1541401891954},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1541401891956},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1541401891955},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"fcbbf06b546c366d70b7d2ba5880b0be3ca1e8ea","modified":1541401891956},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1541401891956},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"6089cbf4c907fe198b6501e40dc937480d0be175","modified":1541401891957},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1541401891958},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1541401891957},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1541401891959},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1541401891960},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1541401891958},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1541401891958},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1541401891960},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1541401891961},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1541401891960},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1541401891965},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1541401891961},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1541401891966},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1541401891966},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1541401891966},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1541401891961},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1541401891967},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1541401891967},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1541401891967},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1541401891962},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1541401891963},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1541401891963},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1541401891968},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1541401891963},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1541401891964},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1541401891964},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1541401891965},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1541401891964},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1541401891979},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1541401891977},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1541401891977},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1541401892002},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541401445852},{"_id":"source/images/avatar_960_960.jpg","hash":"bf4f8fcc944e07cdfca4fb198006568fd9feb478","modified":1541401238471},{"_id":"source/images/avatar.jpg","hash":"372932391107374853e47255cf366be19f19a22b","modified":1541401238469},{"_id":"public/baidusitemap.xml","hash":"5341ffd0e51ab215b4ac52500e808a76f1f1e3b1","modified":1603351393456},{"_id":"public/search.xml","hash":"5c24b4414251f42de9bdfaebbf37406e29096169","modified":1603351393456},{"_id":"public/sitemap.xml","hash":"7536f3c9401d9752556840ac1a577c8e4e29b530","modified":1603351393472},{"_id":"public/categories/index.html","hash":"5d87dbf6f79a478a4d674377a7c2efce27144d1d","modified":1603351393534},{"_id":"public/tags/index.html","hash":"34173810105ef8743d7b7adb2b201e9b90360592","modified":1603351393534},{"_id":"public/2020/10/20/design-pattern-principal/index.html","hash":"e8de615e01345e5cce967d00512a300307777b36","modified":1603351393534},{"_id":"public/2020/05/15/docker-ce-offline-install/index.html","hash":"d1b0fb3bcd3d17be2d821f14ba424549dd96b5d4","modified":1603351393534},{"_id":"public/2019/06/11/my-vscode-config/index.html","hash":"dd98e68ab8574284b4ec33fe95136f71932c2a0a","modified":1603351393534},{"_id":"public/2019/04/23/unbutu-gui-switch/index.html","hash":"58e4ef55072b6727a220b4c281474075cb8a7eaf","modified":1603351393534},{"_id":"public/2019/03/08/set-swap/index.html","hash":"873d162766551bc316308a419cab2135fd6d1456","modified":1603351393535},{"_id":"public/2018/11/29/install-minibuke-china/index.html","hash":"a09de6f71faa9f8be3b6b4db322abfd1d6f97e8e","modified":1603351393535},{"_id":"public/2018/11/17/springmvc-find-request-handler/index.html","hash":"b202a6a6ce7b19d708228fe787380caeff6fb5a6","modified":1603351393535},{"_id":"public/2018/11/07/git-remove-commit/index.html","hash":"8f5efc087ed63deaed4016e40f5eb255129f5d3b","modified":1603351393535},{"_id":"public/2018/11/03/ssh-remote-command/index.html","hash":"dceb2d74fe8fa202173e8224c0992f1ed38f9f0a","modified":1603351393535},{"_id":"public/2018/10/30/springmvc-resquest-flow/index.html","hash":"dda63f8c15160905ab7978d33229a137ee3598fd","modified":1603351393535},{"_id":"public/2018/10/29/git-credential/index.html","hash":"18e79fc649eb8be3e1d16f752466c318dfb2e5a9","modified":1603351393535},{"_id":"public/2018/10/26/use-of-application-context-aware/index.html","hash":"6379059eeec0b0b33e460248b4793abb08d642da","modified":1603351393535},{"_id":"public/2018/10/24/custom-handler-method-argument-resolver/index.html","hash":"546b370f81bea77a1ae65c30fd42f1b7e779a4c1","modified":1603351393535},{"_id":"public/2018/10/24/spring-custom-scope/index.html","hash":"202985bd112149e35b543d78ddb96f41651fd906","modified":1603351393535},{"_id":"public/2018/10/23/bash-process-watcher/index.html","hash":"a4078dec80ebecaffff41cee1b6928efee467a21","modified":1603351393535},{"_id":"public/2018/10/23/es-server-config/index.html","hash":"992927f2dba6af30a53946069b61f3b4d47ee746","modified":1603351393535},{"_id":"public/2018/10/23/bash-args/index.html","hash":"e974d91369372e0c09f1f4accfb227cd428d7bf8","modified":1603351393536},{"_id":"public/2018/10/23/linux-mount-harddisk/index.html","hash":"2934be9fa18c31a9ab7f0d8bee077ffbba0a5cfa","modified":1603351393536},{"_id":"public/2018/10/23/rsync/index.html","hash":"35c4d7dd4f72a39883bb6788a8bfae087d55da9f","modified":1603351393536},{"_id":"public/categories/运维/index.html","hash":"19f49a126b71a824e1ee829dd56066cc248375d0","modified":1603351393536},{"_id":"public/categories/git/index.html","hash":"43f40cddb76e8ff01f919e30b94b548e3b9ce48b","modified":1603351393536},{"_id":"public/categories/spring/index.html","hash":"2192305f5968b5bed0502a5065e36dc699eab69b","modified":1603351393536},{"_id":"public/categories/bean/index.html","hash":"5c6e23f0868e935f35d623bab83ec42cc87173b9","modified":1603351393536},{"_id":"public/categories/spring源码解析/index.html","hash":"082b5a397c260b8a373b2f5712a1c05e053e75f3","modified":1603351393536},{"_id":"public/index.html","hash":"626d9844dfe9e4e8e9bcb4aade751b60b92aa6be","modified":1603351393536},{"_id":"public/page/2/index.html","hash":"5c7474a142a77409ece15588db1edb30d93dfdc5","modified":1603351393536},{"_id":"public/tags/bash/index.html","hash":"dfd3f9d0b72ed7aa1198f3e2523485d1fa3984a8","modified":1603351393536},{"_id":"public/tags/args/index.html","hash":"ec20efa1ead0b709d63ac99390d4c6893d68d700","modified":1603351393536},{"_id":"public/tags/git/index.html","hash":"a56a68e2a43714beee817d2d141cc123657f18af","modified":1603351393536},{"_id":"public/tags/command/index.html","hash":"d346f1e749ac0b8b37caaa9f98d983307840bc5d","modified":1603351393536},{"_id":"public/tags/node/index.html","hash":"f620ec3f0e7e9f7f15705e4602ac89211fc5166a","modified":1603351393536},{"_id":"public/tags/elasticsearch/index.html","hash":"c30e7e5440e319036a35c784a24b17c697eb185c","modified":1603351393536},{"_id":"public/tags/sync/index.html","hash":"f463dac08fbddedf6d13b9db3fda85847dc2cf88","modified":1603351393536},{"_id":"public/tags/spring/index.html","hash":"c95a8b8ac74f9060fce038b4175f15f69ed454d2","modified":1603351393536},{"_id":"public/tags/handlerMethodResolver/index.html","hash":"6eec99e294c637fdb4de3427fc9dc8925f99aabe","modified":1603351393537},{"_id":"public/tags/springMvc/index.html","hash":"036eaa40bacd555e805fb52436ab0ff5b25a4c9a","modified":1603351393537},{"_id":"public/tags/harddisk/index.html","hash":"89b79b1bc7acd3323a137d4cfcc46ebebe47f86b","modified":1603351393537},{"_id":"public/tags/linux/index.html","hash":"fbaccc5cf1c5d8036c94cad739d535ae292a4b23","modified":1603351393537},{"_id":"public/tags/mount/index.html","hash":"79ec279e40f383fbac980cae527a4ca60714fd82","modified":1603351393537},{"_id":"public/tags/format/index.html","hash":"6c2b431c3df6ff7e37d427d623e945e064515330","modified":1603351393537},{"_id":"public/tags/scope/index.html","hash":"04c46aa44d698a31765b7905cfad8f0d19ffe93e","modified":1603351393537},{"_id":"public/tags/java/index.html","hash":"f032e73c07f614117a82c583315b6d0f8afc53ab","modified":1603351393537},{"_id":"public/tags/译/index.html","hash":"49220b4ed7568ca01f74bc23deee72a2b158ebb5","modified":1603351393537},{"_id":"public/tags/源码解析/index.html","hash":"4a595d3ae5fd4fd439de24d5d4dc2bdedc5c54f3","modified":1603351393537},{"_id":"public/tags/springMVC/index.html","hash":"9d0090e743873208915516fcf812b641fdead27e","modified":1603351393537},{"_id":"public/tags/k8s/index.html","hash":"b36d9fa27225f08b4d552b0bb27a01c19d64804b","modified":1603351393537},{"_id":"public/tags/ssh/index.html","hash":"a388ad848aa6d90bc11c191521cc4e5adaee9390","modified":1603351393537},{"_id":"public/tags/remote/index.html","hash":"059012aa3a914f7349267214e80e65065dab5c25","modified":1603351393537},{"_id":"public/tags/swap/index.html","hash":"d14e5d2c5e6f0408ce0208457b590fc9bb97dfe7","modified":1603351393537},{"_id":"public/tags/unbutu-bash-运维/index.html","hash":"f76ad3bcabd5e602e67ae833c27f97b863570fb8","modified":1603351393537},{"_id":"public/tags/运维-docker/index.html","hash":"17a4f6cbeb93a2ef85ccc8fdaee1dfa20edf8225","modified":1603351393537},{"_id":"public/tags/设计/index.html","hash":"7b760a579fc3b250a741a63105c1a0cadeeee477","modified":1603351393537},{"_id":"public/archives/index.html","hash":"720b0e1119f400b336189d048e507d29d21d1b82","modified":1603351393537},{"_id":"public/archives/page/2/index.html","hash":"cb142e5e7714f99eec9a283eb53bd0d823b6cbcb","modified":1603351393538},{"_id":"public/archives/2018/index.html","hash":"8581799b9549d5814c911873738ad8c9d2663560","modified":1603351393538},{"_id":"public/archives/2018/page/2/index.html","hash":"2346c3a972585aa3136b0b71aa45781c17096e70","modified":1603351393538},{"_id":"public/archives/2018/10/index.html","hash":"4eedc2498f0717e15b2a2c0840fc275fb77f2064","modified":1603351393538},{"_id":"public/archives/2018/11/index.html","hash":"e58e74f7f0fa116ad7ed9288a8a1cf0e57d2acda","modified":1603351393538},{"_id":"public/archives/2019/index.html","hash":"0e69e780a64795fa57d50368034e40024b588a17","modified":1603351393538},{"_id":"public/archives/2019/03/index.html","hash":"d7a0b1db26940fd41795805cb4999636d5a3facd","modified":1603351393538},{"_id":"public/archives/2019/04/index.html","hash":"240cc081b56f65c6ffb089f454d908909473d611","modified":1603351393538},{"_id":"public/archives/2019/06/index.html","hash":"175e8860ab31ac0d27172b301c38e9a4699f96f4","modified":1603351393538},{"_id":"public/archives/2020/index.html","hash":"4685507b62b0a9e25eeaf89ab85097a60c07671b","modified":1603351393538},{"_id":"public/archives/2020/05/index.html","hash":"1dcc111142d886fe254ae625b79fc8ff201fb1f4","modified":1603351393538},{"_id":"public/archives/2020/10/index.html","hash":"86574103779f197947b7a0f0a926c124385784c7","modified":1603351393538},{"_id":"public/2020/10/22/reenterlock-aqs-syncronized/index.html","hash":"268ba714b47840a85db46bd035e4bdec7733fd79","modified":1603351393545},{"_id":"public/tags/ReentryLock-AQS-javaCore-concurrent/index.html","hash":"811193881fea37f84af7f1cc227c6da9fde7a87d","modified":1603351393545},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1603351393548},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1603351393548},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1603351393549},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1603351393549},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1603351393549},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1603351393549},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1603351393549},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1603351393549},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1603351393549},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1603351393549},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1603351393549},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1603351393549},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1603351393549},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1603351393549},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1603351393549},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1603351393549},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1603351393549},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1603351393549},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1603351393549},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1603351393549},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1603351393549},{"_id":"public/images/fingerprint.jpg","hash":"fda6b9c66b78bc4ff760978b48431bb95ab5d9f0","modified":1603351394187},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1603351394189},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1603351394191},{"_id":"public/2018/10/30/springmvc-resquest-flow/springmvc_class.jpg","hash":"92969779b030f6879da14bf7a769898be2db0b4a","modified":1603351394191},{"_id":"public/2018/11/17/springmvc-find-request-handler/RequestMappingHandlerMapping_uml_class.jpg","hash":"63efb6ec4c529bdf6535f0550e9f3e10b2fe564d","modified":1603351394191},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1603351394206},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1603351394206},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1603351394206},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1603351394206},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1603351394206},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1603351394206},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1603351394206},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1603351394206},{"_id":"public/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1603351394206},{"_id":"public/js/src/utils.js","hash":"66f2ac658d6110f70a86f784d0c5d891a97c14bd","modified":1603351394206},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1603351394206},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1603351394206},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1603351394206},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1603351394206},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1603351394206},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1603351394206},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1603351394206},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1603351394207},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1603351394207},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1603351394207},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1603351394207},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1603351394207},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1603351394207},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1603351394207},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1603351394207},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1603351394207},{"_id":"public/js/src/schemes/pisces.js","hash":"89267bd16ecbedd1958af7f0fb3f4f654d24fffa","modified":1603351394207},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1603351394207},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1603351394207},{"_id":"public/lib/pace/README.html","hash":"58f2105ada5cc52dff5aabcecb92569ee84493a0","modified":1603351394207},{"_id":"public/css/main.css","hash":"0f9bcc03680e05ae0f3d564f75974835279d57d2","modified":1603351394207},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1603351394207},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1603351394207},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1603351394207},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1603351394207},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1603351394207},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1603351394207},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1603351394207},{"_id":"public/2018/10/30/springmvc-resquest-flow/DispatcherServletSequence.jpg","hash":"f7d9a296a3d6234177dcf60b54a859a19e2ed26a","modified":1603351394227},{"_id":"public/images/alipay.jpg","hash":"7cfce0fbf312a4998a7a9991ca4b1deadaec7bb9","modified":1603351394244},{"_id":"public/images/avatar_960_960.jpg","hash":"bf4f8fcc944e07cdfca4fb198006568fd9feb478","modified":1603351394278},{"_id":"public/images/avatar.jpg","hash":"372932391107374853e47255cf366be19f19a22b","modified":1603351394282}],"Category":[{"name":"运维","_id":"ckgki0qsj0003gmo5yu5uvzik"},{"name":"git","_id":"ckgki0qtd000bgmo5inqploih"},{"name":"spring","_id":"ckgki0qtk000igmo5pxra4bjo"},{"name":"bean","_id":"ckgki0qtq000ugmo5fqxtkgpv"},{"name":"spring源码解析","_id":"ckgki0qtt0012gmo56gr2n4u9"}],"Data":[],"Page":[{"title":"categories","date":"2018-10-23T01:36:10.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-10-23 09:36:10\ntype: \"categories\"\n---\n","updated":"2018-10-23T01:37:25.491Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckgki0qsc0000gmo5dghfztdn","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-10-23T01:33:53.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-10-23 09:33:53\ntype: \"tags\"\n---\n","updated":"2018-10-23T01:35:03.061Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckgki0qsh0002gmo5fklnhavf","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"linux中shell变量$#,$@,$0,$1,$2的含义解释","date":"2018-10-23T03:11:20.000Z","_content":"\n变量说明:\n\n```text\n$$\nShell本身的PID（ProcessID）\n$!\nShell最后运行的后台Process的PID\n$?\n最后运行的命令的结束代码（返回值）\n$-\n使用Set命令设定的Flag一览\n$*\n所有参数列表。如\"$*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。\n$@\n所有参数列表。如\"$@\"用「\"」括起来的情况、以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。\n$#\n添加到Shell的参数个数\n$0\nShell本身的文件名\n$1～$n\n添加到Shell的各参数值。$1是第1参数、$2是第2参数…。\n```","source":"_posts/2018-10-bash-args.md","raw":"---\ntitle: linux中shell变量$#,$@,$0,$1,$2的含义解释\ndate: 2018-10-23 11:11:20\ntags: [bash,args]\ncategories: 运维\n---\n\n变量说明:\n\n```text\n$$\nShell本身的PID（ProcessID）\n$!\nShell最后运行的后台Process的PID\n$?\n最后运行的命令的结束代码（返回值）\n$-\n使用Set命令设定的Flag一览\n$*\n所有参数列表。如\"$*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。\n$@\n所有参数列表。如\"$@\"用「\"」括起来的情况、以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。\n$#\n添加到Shell的参数个数\n$0\nShell本身的文件名\n$1～$n\n添加到Shell的各参数值。$1是第1参数、$2是第2参数…。\n```","slug":"bash-args","published":1,"updated":"2018-10-23T03:13:31.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qsd0001gmo5ol2dw2ew","content":"<p>变量说明:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">Shell本身的PID（ProcessID）</span><br><span class=\"line\">$!</span><br><span class=\"line\">Shell最后运行的后台Process的PID</span><br><span class=\"line\">$?</span><br><span class=\"line\">最后运行的命令的结束代码（返回值）</span><br><span class=\"line\">$-</span><br><span class=\"line\">使用Set命令设定的Flag一览</span><br><span class=\"line\">$*</span><br><span class=\"line\">所有参数列表。如&quot;$*&quot;用「&quot;」括起来的情况、以&quot;$1 $2 … $n&quot;的形式输出所有参数。</span><br><span class=\"line\">$@</span><br><span class=\"line\">所有参数列表。如&quot;$@&quot;用「&quot;」括起来的情况、以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</span><br><span class=\"line\">$#</span><br><span class=\"line\">添加到Shell的参数个数</span><br><span class=\"line\">$0</span><br><span class=\"line\">Shell本身的文件名</span><br><span class=\"line\">$1～$n</span><br><span class=\"line\">添加到Shell的各参数值。$1是第1参数、$2是第2参数…。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>变量说明:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">Shell本身的PID（ProcessID）</span><br><span class=\"line\">$!</span><br><span class=\"line\">Shell最后运行的后台Process的PID</span><br><span class=\"line\">$?</span><br><span class=\"line\">最后运行的命令的结束代码（返回值）</span><br><span class=\"line\">$-</span><br><span class=\"line\">使用Set命令设定的Flag一览</span><br><span class=\"line\">$*</span><br><span class=\"line\">所有参数列表。如&quot;$*&quot;用「&quot;」括起来的情况、以&quot;$1 $2 … $n&quot;的形式输出所有参数。</span><br><span class=\"line\">$@</span><br><span class=\"line\">所有参数列表。如&quot;$@&quot;用「&quot;」括起来的情况、以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</span><br><span class=\"line\">$#</span><br><span class=\"line\">添加到Shell的参数个数</span><br><span class=\"line\">$0</span><br><span class=\"line\">Shell本身的文件名</span><br><span class=\"line\">$1～$n</span><br><span class=\"line\">添加到Shell的各参数值。$1是第1参数、$2是第2参数…。</span><br></pre></td></tr></table></figure>"},{"title":"利用git credential免密认证git http仓库","date":"2018-10-29T06:32:30.000Z","_content":"\n# 1. 命令\n\n在git仓库目录下执行\n\n```bash\ngit config user.name xxx\ngit config user.email xxx@xxx.com\ngit config credential.helper store\n```\n\n# 2. 缺点\n\n密码将会以明文形式存储在~/.git-credentials文件中，不安全。","source":"_posts/2018-10-git-credential.md","raw":"---\ntitle: 利用git credential免密认证git http仓库\ndate: 2018-10-29 14:32:30\ntags: [git,command,node]\ncategories: [git]\n---\n\n# 1. 命令\n\n在git仓库目录下执行\n\n```bash\ngit config user.name xxx\ngit config user.email xxx@xxx.com\ngit config credential.helper store\n```\n\n# 2. 缺点\n\n密码将会以明文形式存储在~/.git-credentials文件中，不安全。","slug":"git-credential","published":1,"updated":"2018-11-05T07:11:31.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtb0009gmo5dbrld9ii","content":"<h1 id=\"1-命令\"><a href=\"#1-命令\" class=\"headerlink\" title=\"1. 命令\"></a>1. 命令</h1><p>在git仓库目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name xxx</span><br><span class=\"line\">git config user.email xxx@xxx.com</span><br><span class=\"line\">git config credential.helper store</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h1><p>密码将会以明文形式存储在~/.git-credentials文件中，不安全。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-命令\"><a href=\"#1-命令\" class=\"headerlink\" title=\"1. 命令\"></a>1. 命令</h1><p>在git仓库目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name xxx</span><br><span class=\"line\">git config user.email xxx@xxx.com</span><br><span class=\"line\">git config credential.helper store</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h1><p>密码将会以明文形式存储在~/.git-credentials文件中，不安全。</p>\n"},{"title":"ElasticSearch服务器secrity配置","date":"2018-10-23T03:14:25.000Z","_content":"\n# 1. 修改/etc/security/limits.conf\n\n/etc/security/limits.conf\n\n```bash\n[username] soft nofile 102400\n[username] hard nofile 102400\n[username] soft nproc 2048\n[username] hard nproc 2048\n[username] soft memlock unlimited\n[username] hard memlock unlimited\n```\n\n重新登录后\n\n```bash\nulimit -a 检测\n```\n\n# 2. 修改max_map_count\n\n```bash\nvim /etc/sysctl.conf\nvm.max_map_count=262144\n```\n\n执行命令刷新\n\n``` bash\nsysctl -p\n```","source":"_posts/2018-10-es-server-config.md","raw":"---\ntitle: ElasticSearch服务器secrity配置\ndate: 2018-10-23 11:14:25\ntags: [elasticsearch]\ncategories: [运维]\n---\n\n# 1. 修改/etc/security/limits.conf\n\n/etc/security/limits.conf\n\n```bash\n[username] soft nofile 102400\n[username] hard nofile 102400\n[username] soft nproc 2048\n[username] hard nproc 2048\n[username] soft memlock unlimited\n[username] hard memlock unlimited\n```\n\n重新登录后\n\n```bash\nulimit -a 检测\n```\n\n# 2. 修改max_map_count\n\n```bash\nvim /etc/sysctl.conf\nvm.max_map_count=262144\n```\n\n执行命令刷新\n\n``` bash\nsysctl -p\n```","slug":"es-server-config","published":1,"updated":"2018-10-23T03:21:58.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtc000agmo55no9q5gl","content":"<h1 id=\"1-修改-etc-security-limits-conf\"><a href=\"#1-修改-etc-security-limits-conf\" class=\"headerlink\" title=\"1. 修改/etc/security/limits.conf\"></a>1. 修改/etc/security/limits.conf</h1><p>/etc/security/limits.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[username] soft nofile 102400</span><br><span class=\"line\">[username] hard nofile 102400</span><br><span class=\"line\">[username] soft nproc 2048</span><br><span class=\"line\">[username] hard nproc 2048</span><br><span class=\"line\">[username] soft memlock unlimited</span><br><span class=\"line\">[username] hard memlock unlimited</span><br></pre></td></tr></table></figure>\n<p>重新登录后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ulimit</span> -a 检测</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-修改max-map-count\"><a href=\"#2-修改max-map-count\" class=\"headerlink\" title=\"2. 修改max_map_count\"></a>2. 修改max_map_count</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\">vm.max_map_count=262144</span><br></pre></td></tr></table></figure>\n<p>执行命令刷新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-修改-etc-security-limits-conf\"><a href=\"#1-修改-etc-security-limits-conf\" class=\"headerlink\" title=\"1. 修改/etc/security/limits.conf\"></a>1. 修改/etc/security/limits.conf</h1><p>/etc/security/limits.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[username] soft nofile 102400</span><br><span class=\"line\">[username] hard nofile 102400</span><br><span class=\"line\">[username] soft nproc 2048</span><br><span class=\"line\">[username] hard nproc 2048</span><br><span class=\"line\">[username] soft memlock unlimited</span><br><span class=\"line\">[username] hard memlock unlimited</span><br></pre></td></tr></table></figure>\n<p>重新登录后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ulimit</span> -a 检测</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-修改max-map-count\"><a href=\"#2-修改max-map-count\" class=\"headerlink\" title=\"2. 修改max_map_count\"></a>2. 修改max_map_count</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\">vm.max_map_count=262144</span><br></pre></td></tr></table></figure>\n<p>执行命令刷新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>"},{"title":"rsync简易使用方法","date":"2018-10-23T01:53:50.000Z","_content":"\n# rsync命令_Linux rsync 命令\n\n------\n\nrsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。\n\n```bash\n rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/\n\n# 非标ssh端口\n rsync -avp -e \"ssh -p 2245\" /usr/sqmall/ root@brain-001:/usr/sqmall/\n```","source":"_posts/2018-10-rsync.md","raw":"---\ntitle: rsync简易使用方法\ndate: 2018-10-23 09:53:50\ntags: [bash,command,sync]\ncategories: 运维\n---\n\n# rsync命令_Linux rsync 命令\n\n------\n\nrsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。\n\n```bash\n rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/\n\n# 非标ssh端口\n rsync -avp -e \"ssh -p 2245\" /usr/sqmall/ root@brain-001:/usr/sqmall/\n```","slug":"rsync","published":1,"updated":"2018-11-05T07:11:31.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtd000dgmo5uk1x1mo6","content":"<h1 id=\"rsync命令-Linux-rsync-命令\"><a href=\"#rsync命令-Linux-rsync-命令\" class=\"headerlink\" title=\"rsync命令_Linux rsync 命令\"></a>rsync命令_Linux rsync 命令</h1><hr>\n<p>rsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 非标ssh端口</span></span><br><span class=\"line\"> rsync -avp -e <span class=\"string\">\"ssh -p 2245\"</span> /usr/sqmall/ root@brain-001:/usr/sqmall/</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"rsync命令-Linux-rsync-命令\"><a href=\"#rsync命令-Linux-rsync-命令\" class=\"headerlink\" title=\"rsync命令_Linux rsync 命令\"></a>rsync命令_Linux rsync 命令</h1><hr>\n<p>rsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 非标ssh端口</span></span><br><span class=\"line\"> rsync -avp -e <span class=\"string\">\"ssh -p 2245\"</span> /usr/sqmall/ root@brain-001:/usr/sqmall/</span><br></pre></td></tr></table></figure>"},{"title":"自定义HandlerMethodArgumentResolver，用Cookie组装一个简单的Pojo对象","date":"2018-10-24T13:14:18.000Z","_content":"\n# 1. 概述\n\nSpringMVC 为我们提供了@CookieValue 来注入 cookie 某一个 key 的值，但我们常需要@RequestBody 一样，把 Cookie 组装成一个 pojo 对象。\n这篇教程将会演示我们怎样自定义一个 HandlerMethodArgumentResolver 完成从 Cookie 组装 pojo 对象的需求。\n\n# 2. 自定义 HandlerMethodArgumentResolver\n\n# 2.1 定义 Annotation\n\n我们先定义一个 Annotation，叫 CookieObject。\n\n```java\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface CookieObject {\n}\n```\n\n# 2.2 实现 HandlerMethodArgumentResolver 接口\n\n再定义个 CookieObjectMethodArgumentResolver 类，实现 HandlerMethodArgumentResolver 接口\nHandlerMethodArgumentResolver 有两个 method.\n\n```java\nboolean supportsParameter(MethodParameter parameter);\n```\n\n返回 true/false,表示 resolver 是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.\n\n```java\nObject resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;\n```\n\n组装参数的实现逻辑。\n\n来，让我们看一下具体的实现\n\n```java\npublic class CookieObjectMethodArgumentResolver implements HandlerMethodArgumentResolver {\n    private String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;\n\n    private String decodeInternal(HttpServletRequest request, String source) {\n        String enc = determineEncoding(request);\n        return UriUtils.decode(source, enc);\n    }\n\n    protected String determineEncoding(HttpServletRequest request) {\n        String enc = request.getCharacterEncoding();\n        if (enc == null) {\n            enc = this.defaultEncoding;\n        }\n        return enc;\n    }\n\n    @Override\n    public boolean supportsParameter(MethodParameter parameter) {\n        return parameter.hasParameterAnnotation(CookieObject.class);\n    }\n\n    @Override\n    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);\n\n        Class clazz = parameter.getParameterType();\n\n        Object obj = clazz.newInstance();\n        Cookie[] cookies = servletRequest.getCookies();\n        if (cookies != null) {\n            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());\n            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();\n            for (PropertyDescriptor property : propertyDescriptors) {\n                Method setter = property.getWriteMethod();\n                Class ppClazz = property.getPropertyType();\n                if (setter != null) {\n                    String propName = property.getName();\n                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);\n                    if (cooike != null) {\n                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());\n                        Object setValue = null;\n                        if (Cookie.class.isAssignableFrom(ppClazz)) {\n                            setValue = cookieValue;\n                        } else if (cookieValue != null && binderFactory != null) {\n                            WebDataBinder binder = binderFactory.createBinder(webRequest, null, propName);\n                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);\n                        }\n                        if (setValue != null) {\n                            setter.invoke(obj, setValue);\n                        }\n                    }\n                }\n            }\n        }\n        return obj;\n    }\n}\n```\n\n# 2.3 加入 argumentResolvers 列表\n\n最后再 SpringMVC 的配置中把我们定义的 CookieObjectMethodArgumentResolver 实例化后加入 argumentResolvers 列表。\n\n```java\n@Configuration\npublic class WebConfig extends WebMvcConfigurationSupport {\n    @Override\n    protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\n        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = new CookieObjectMethodArgumentResolver()\n        argumentResolvers.add(cookieObjectMethodArgumentResolver());\n    }\n}\n```\n\n# 3. 使用\n\n# 3.1 定义一个 pojo\n\n```java\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@EqualsAndHashCode(callSuper = false)\npublic class MyCookieParam  {\n    private String foo;\n    private String bar;\n}\n```\n\n# 3.2 在 Controller 中接收\n\n```java\n    @RequestMapping(\"/testCookieObject\")\n    @ResponseBody\n    public String testCookieObject(@CookieObject MyCookieParam cookieParam) {\n      return cookieParam\n    }\n```\n","source":"_posts/2018-10-custom-handler-method-argument-resolver.md","raw":"---\ntitle: 自定义HandlerMethodArgumentResolver，用Cookie组装一个简单的Pojo对象\ndate: 2018-10-24 21:14:18\ntags: [spring, handlerMethodResolver, springMvc]\ncategories: [spring]\n---\n\n# 1. 概述\n\nSpringMVC 为我们提供了@CookieValue 来注入 cookie 某一个 key 的值，但我们常需要@RequestBody 一样，把 Cookie 组装成一个 pojo 对象。\n这篇教程将会演示我们怎样自定义一个 HandlerMethodArgumentResolver 完成从 Cookie 组装 pojo 对象的需求。\n\n# 2. 自定义 HandlerMethodArgumentResolver\n\n# 2.1 定义 Annotation\n\n我们先定义一个 Annotation，叫 CookieObject。\n\n```java\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface CookieObject {\n}\n```\n\n# 2.2 实现 HandlerMethodArgumentResolver 接口\n\n再定义个 CookieObjectMethodArgumentResolver 类，实现 HandlerMethodArgumentResolver 接口\nHandlerMethodArgumentResolver 有两个 method.\n\n```java\nboolean supportsParameter(MethodParameter parameter);\n```\n\n返回 true/false,表示 resolver 是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.\n\n```java\nObject resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;\n```\n\n组装参数的实现逻辑。\n\n来，让我们看一下具体的实现\n\n```java\npublic class CookieObjectMethodArgumentResolver implements HandlerMethodArgumentResolver {\n    private String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;\n\n    private String decodeInternal(HttpServletRequest request, String source) {\n        String enc = determineEncoding(request);\n        return UriUtils.decode(source, enc);\n    }\n\n    protected String determineEncoding(HttpServletRequest request) {\n        String enc = request.getCharacterEncoding();\n        if (enc == null) {\n            enc = this.defaultEncoding;\n        }\n        return enc;\n    }\n\n    @Override\n    public boolean supportsParameter(MethodParameter parameter) {\n        return parameter.hasParameterAnnotation(CookieObject.class);\n    }\n\n    @Override\n    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);\n\n        Class clazz = parameter.getParameterType();\n\n        Object obj = clazz.newInstance();\n        Cookie[] cookies = servletRequest.getCookies();\n        if (cookies != null) {\n            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());\n            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();\n            for (PropertyDescriptor property : propertyDescriptors) {\n                Method setter = property.getWriteMethod();\n                Class ppClazz = property.getPropertyType();\n                if (setter != null) {\n                    String propName = property.getName();\n                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);\n                    if (cooike != null) {\n                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());\n                        Object setValue = null;\n                        if (Cookie.class.isAssignableFrom(ppClazz)) {\n                            setValue = cookieValue;\n                        } else if (cookieValue != null && binderFactory != null) {\n                            WebDataBinder binder = binderFactory.createBinder(webRequest, null, propName);\n                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);\n                        }\n                        if (setValue != null) {\n                            setter.invoke(obj, setValue);\n                        }\n                    }\n                }\n            }\n        }\n        return obj;\n    }\n}\n```\n\n# 2.3 加入 argumentResolvers 列表\n\n最后再 SpringMVC 的配置中把我们定义的 CookieObjectMethodArgumentResolver 实例化后加入 argumentResolvers 列表。\n\n```java\n@Configuration\npublic class WebConfig extends WebMvcConfigurationSupport {\n    @Override\n    protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\n        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = new CookieObjectMethodArgumentResolver()\n        argumentResolvers.add(cookieObjectMethodArgumentResolver());\n    }\n}\n```\n\n# 3. 使用\n\n# 3.1 定义一个 pojo\n\n```java\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@EqualsAndHashCode(callSuper = false)\npublic class MyCookieParam  {\n    private String foo;\n    private String bar;\n}\n```\n\n# 3.2 在 Controller 中接收\n\n```java\n    @RequestMapping(\"/testCookieObject\")\n    @ResponseBody\n    public String testCookieObject(@CookieObject MyCookieParam cookieParam) {\n      return cookieParam\n    }\n```\n","slug":"custom-handler-method-argument-resolver","published":1,"updated":"2018-11-22T01:52:53.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qte000egmo54of4gw42","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>SpringMVC 为我们提供了@CookieValue 来注入 cookie 某一个 key 的值，但我们常需要@RequestBody 一样，把 Cookie 组装成一个 pojo 对象。<br>这篇教程将会演示我们怎样自定义一个 HandlerMethodArgumentResolver 完成从 Cookie 组装 pojo 对象的需求。</p>\n<h1 id=\"2-自定义-HandlerMethodArgumentResolver\"><a href=\"#2-自定义-HandlerMethodArgumentResolver\" class=\"headerlink\" title=\"2. 自定义 HandlerMethodArgumentResolver\"></a>2. 自定义 HandlerMethodArgumentResolver</h1><h1 id=\"2-1-定义-Annotation\"><a href=\"#2-1-定义-Annotation\" class=\"headerlink\" title=\"2.1 定义 Annotation\"></a>2.1 定义 Annotation</h1><p>我们先定义一个 Annotation，叫 CookieObject。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CookieObject &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-实现-HandlerMethodArgumentResolver-接口\"><a href=\"#2-2-实现-HandlerMethodArgumentResolver-接口\" class=\"headerlink\" title=\"2.2 实现 HandlerMethodArgumentResolver 接口\"></a>2.2 实现 HandlerMethodArgumentResolver 接口</h1><p>再定义个 CookieObjectMethodArgumentResolver 类，实现 HandlerMethodArgumentResolver 接口<br>HandlerMethodArgumentResolver 有两个 method.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>返回 true/false,表示 resolver 是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n<p>组装参数的实现逻辑。</p>\n<p>来，让我们看一下具体的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieObjectMethodArgumentResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">decodeInternal</span><span class=\"params\">(HttpServletRequest request, String source)</span> </span>&#123;</span><br><span class=\"line\">        String enc = determineEncoding(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UriUtils.decode(source, enc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">determineEncoding</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String enc = request.getCharacterEncoding();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enc == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            enc = <span class=\"keyword\">this</span>.defaultEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> enc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parameter.hasParameterAnnotation(CookieObject.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class clazz = parameter.getParameterType();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object obj = clazz.newInstance();</span><br><span class=\"line\">        Cookie[] cookies = servletRequest.getCookies();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());</span><br><span class=\"line\">            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (PropertyDescriptor property : propertyDescriptors) &#123;</span><br><span class=\"line\">                Method setter = property.getWriteMethod();</span><br><span class=\"line\">                Class ppClazz = property.getPropertyType();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    String propName = property.getName();</span><br><span class=\"line\">                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cooike != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());</span><br><span class=\"line\">                        Object setValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (Cookie.class.isAssignableFrom(ppClazz)) &#123;</span><br><span class=\"line\">                            setValue = cookieValue;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cookieValue != <span class=\"keyword\">null</span> &amp;&amp; binderFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            WebDataBinder binder = binderFactory.createBinder(webRequest, <span class=\"keyword\">null</span>, propName);</span><br><span class=\"line\">                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (setValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            setter.invoke(obj, setValue);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-加入-argumentResolvers-列表\"><a href=\"#2-3-加入-argumentResolvers-列表\" class=\"headerlink\" title=\"2.3 加入 argumentResolvers 列表\"></a>2.3 加入 argumentResolvers 列表</h1><p>最后再 SpringMVC 的配置中把我们定义的 CookieObjectMethodArgumentResolver 实例化后加入 argumentResolvers 列表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addArgumentResolvers</span><span class=\"params\">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;</span><br><span class=\"line\">        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = <span class=\"keyword\">new</span> CookieObjectMethodArgumentResolver()</span><br><span class=\"line\">        argumentResolvers.add(cookieObjectMethodArgumentResolver());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3. 使用\"></a>3. 使用</h1><h1 id=\"3-1-定义一个-pojo\"><a href=\"#3-1-定义一个-pojo\" class=\"headerlink\" title=\"3.1 定义一个 pojo\"></a>3.1 定义一个 pojo</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties</span>(ignoreUnknown = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode</span>(callSuper = <span class=\"keyword\">false</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCookieParam</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String foo;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-2-在-Controller-中接收\"><a href=\"#3-2-在-Controller-中接收\" class=\"headerlink\" title=\"3.2 在 Controller 中接收\"></a>3.2 在 Controller 中接收</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testCookieObject\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testCookieObject</span><span class=\"params\">(@CookieObject MyCookieParam cookieParam)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cookieParam</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>SpringMVC 为我们提供了@CookieValue 来注入 cookie 某一个 key 的值，但我们常需要@RequestBody 一样，把 Cookie 组装成一个 pojo 对象。<br>这篇教程将会演示我们怎样自定义一个 HandlerMethodArgumentResolver 完成从 Cookie 组装 pojo 对象的需求。</p>\n<h1 id=\"2-自定义-HandlerMethodArgumentResolver\"><a href=\"#2-自定义-HandlerMethodArgumentResolver\" class=\"headerlink\" title=\"2. 自定义 HandlerMethodArgumentResolver\"></a>2. 自定义 HandlerMethodArgumentResolver</h1><h1 id=\"2-1-定义-Annotation\"><a href=\"#2-1-定义-Annotation\" class=\"headerlink\" title=\"2.1 定义 Annotation\"></a>2.1 定义 Annotation</h1><p>我们先定义一个 Annotation，叫 CookieObject。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CookieObject &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-实现-HandlerMethodArgumentResolver-接口\"><a href=\"#2-2-实现-HandlerMethodArgumentResolver-接口\" class=\"headerlink\" title=\"2.2 实现 HandlerMethodArgumentResolver 接口\"></a>2.2 实现 HandlerMethodArgumentResolver 接口</h1><p>再定义个 CookieObjectMethodArgumentResolver 类，实现 HandlerMethodArgumentResolver 接口<br>HandlerMethodArgumentResolver 有两个 method.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>返回 true/false,表示 resolver 是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n<p>组装参数的实现逻辑。</p>\n<p>来，让我们看一下具体的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieObjectMethodArgumentResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">decodeInternal</span><span class=\"params\">(HttpServletRequest request, String source)</span> </span>&#123;</span><br><span class=\"line\">        String enc = determineEncoding(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UriUtils.decode(source, enc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">determineEncoding</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String enc = request.getCharacterEncoding();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enc == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            enc = <span class=\"keyword\">this</span>.defaultEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> enc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parameter.hasParameterAnnotation(CookieObject.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class clazz = parameter.getParameterType();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object obj = clazz.newInstance();</span><br><span class=\"line\">        Cookie[] cookies = servletRequest.getCookies();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());</span><br><span class=\"line\">            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (PropertyDescriptor property : propertyDescriptors) &#123;</span><br><span class=\"line\">                Method setter = property.getWriteMethod();</span><br><span class=\"line\">                Class ppClazz = property.getPropertyType();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    String propName = property.getName();</span><br><span class=\"line\">                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cooike != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());</span><br><span class=\"line\">                        Object setValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (Cookie.class.isAssignableFrom(ppClazz)) &#123;</span><br><span class=\"line\">                            setValue = cookieValue;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cookieValue != <span class=\"keyword\">null</span> &amp;&amp; binderFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            WebDataBinder binder = binderFactory.createBinder(webRequest, <span class=\"keyword\">null</span>, propName);</span><br><span class=\"line\">                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (setValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            setter.invoke(obj, setValue);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-加入-argumentResolvers-列表\"><a href=\"#2-3-加入-argumentResolvers-列表\" class=\"headerlink\" title=\"2.3 加入 argumentResolvers 列表\"></a>2.3 加入 argumentResolvers 列表</h1><p>最后再 SpringMVC 的配置中把我们定义的 CookieObjectMethodArgumentResolver 实例化后加入 argumentResolvers 列表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">addArgumentResolvers</span><span class=\"params\">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;</span><br><span class=\"line\">        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = <span class=\"keyword\">new</span> CookieObjectMethodArgumentResolver()</span><br><span class=\"line\">        argumentResolvers.add(cookieObjectMethodArgumentResolver());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3. 使用\"></a>3. 使用</h1><h1 id=\"3-1-定义一个-pojo\"><a href=\"#3-1-定义一个-pojo\" class=\"headerlink\" title=\"3.1 定义一个 pojo\"></a>3.1 定义一个 pojo</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties</span>(ignoreUnknown = <span class=\"keyword\">true</span>)</span><br><span class=\"line\"><span class=\"meta\">@EqualsAndHashCode</span>(callSuper = <span class=\"keyword\">false</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCookieParam</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String foo;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-2-在-Controller-中接收\"><a href=\"#3-2-在-Controller-中接收\" class=\"headerlink\" title=\"3.2 在 Controller 中接收\"></a>3.2 在 Controller 中接收</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testCookieObject\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testCookieObject</span><span class=\"params\">(@CookieObject MyCookieParam cookieParam)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cookieParam</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"linux硬盘分区格式化以及挂载","date":"2018-10-23T02:02:43.000Z","_content":"\n# 1. 分区\n\n## 1.1 使用fdisk\n\n1）先查看下是否有磁盘没有分区\n\n```bash\nfdisk -l\n```\n\n2） 分区\n\n```bash\nfdisk /dev/sdb\n```\n\n3）根据提示操作\n\n### 1.2 使用 parted\n\n## 2. 格式化新硬盘\n\n```bash\nmkfs.ext4 /dev/sdb1  \n```\n\n## 3. 挂载\n\n1) 创建/data目录（/data目录为硬盘将挂载的地方）：\n\n```bash\nmkdir /data  \n```\n\n2）挂载分区：\n\n```bash\nmount /dev/sdb1 /data  \n```\n\n## 4. 查看磁盘分区的UUID\n\n```bash\n1. $ sudo blkid  \n```\n\n效果如下：\n\n```bash\n/dev/sda1: UUID=\"8048997a-16c9-447b-a209-82e4d380326e\" TYPE=\"ext4\"\n/dev/sda5: UUID=\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\" TYPE=\"swap\"\n/dev/sdb1: UUID=\"11263962-9715-473f-9421-0b604e895aaa\" TYPE=\"ext4\"\n/dev/sr0: LABEL=\"Join Me\" TYPE=\"iso9660\" \n```\n\n## 5. 配置开机自动挂载：\n因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：\n\n```bash\nsudo vim /etc/fstab  \n```\n\n加入：\n\n```bash\nUUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1\n```\n\n```bash\n注：\n<fs spec> <fs file> <fs vfstype> <fs mntops> <fs freq> <fs passno>\n具体说明，以挂载/dev/sdb1为例:\n<fs spec> :\n分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software\n<fs file> : 具体挂载点的位置，例如：/data\n<fs vfstype> : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs\n<fs mntops> : 挂载参数，一般为defaults\n<fs freq> : 磁盘检查，默认为0\n<fs passno> : 磁盘检查，默认为0,不需要检查 \n```\n\n修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。","source":"_posts/2018-10-linux-mount-harddisk.md","raw":"---\ntitle: linux硬盘分区格式化以及挂载\ndate: 2018-10-23 10:02:43\ntags: [harddisk,linux,mount,format]\ncategories: 运维\n---\n\n# 1. 分区\n\n## 1.1 使用fdisk\n\n1）先查看下是否有磁盘没有分区\n\n```bash\nfdisk -l\n```\n\n2） 分区\n\n```bash\nfdisk /dev/sdb\n```\n\n3）根据提示操作\n\n### 1.2 使用 parted\n\n## 2. 格式化新硬盘\n\n```bash\nmkfs.ext4 /dev/sdb1  \n```\n\n## 3. 挂载\n\n1) 创建/data目录（/data目录为硬盘将挂载的地方）：\n\n```bash\nmkdir /data  \n```\n\n2）挂载分区：\n\n```bash\nmount /dev/sdb1 /data  \n```\n\n## 4. 查看磁盘分区的UUID\n\n```bash\n1. $ sudo blkid  \n```\n\n效果如下：\n\n```bash\n/dev/sda1: UUID=\"8048997a-16c9-447b-a209-82e4d380326e\" TYPE=\"ext4\"\n/dev/sda5: UUID=\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\" TYPE=\"swap\"\n/dev/sdb1: UUID=\"11263962-9715-473f-9421-0b604e895aaa\" TYPE=\"ext4\"\n/dev/sr0: LABEL=\"Join Me\" TYPE=\"iso9660\" \n```\n\n## 5. 配置开机自动挂载：\n因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：\n\n```bash\nsudo vim /etc/fstab  \n```\n\n加入：\n\n```bash\nUUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1\n```\n\n```bash\n注：\n<fs spec> <fs file> <fs vfstype> <fs mntops> <fs freq> <fs passno>\n具体说明，以挂载/dev/sdb1为例:\n<fs spec> :\n分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software\n<fs file> : 具体挂载点的位置，例如：/data\n<fs vfstype> : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs\n<fs mntops> : 挂载参数，一般为defaults\n<fs freq> : 磁盘检查，默认为0\n<fs passno> : 磁盘检查，默认为0,不需要检查 \n```\n\n修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。","slug":"linux-mount-harddisk","published":1,"updated":"2018-10-23T02:58:52.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qti000fgmo5c8j4e6nv","content":"<h1 id=\"1-分区\"><a href=\"#1-分区\" class=\"headerlink\" title=\"1. 分区\"></a>1. 分区</h1><h2 id=\"1-1-使用fdisk\"><a href=\"#1-1-使用fdisk\" class=\"headerlink\" title=\"1.1 使用fdisk\"></a>1.1 使用fdisk</h2><p>1）先查看下是否有磁盘没有分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n<p>2） 分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n<p>3）根据提示操作</p>\n<h3 id=\"1-2-使用-parted\"><a href=\"#1-2-使用-parted\" class=\"headerlink\" title=\"1.2 使用 parted\"></a>1.2 使用 parted</h3><h2 id=\"2-格式化新硬盘\"><a href=\"#2-格式化新硬盘\" class=\"headerlink\" title=\"2. 格式化新硬盘\"></a>2. 格式化新硬盘</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-挂载\"><a href=\"#3-挂载\" class=\"headerlink\" title=\"3. 挂载\"></a>3. 挂载</h2><p>1) 创建/data目录（/data目录为硬盘将挂载的地方）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data</span><br></pre></td></tr></table></figure>\n<p>2）挂载分区：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sdb1 /data</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-查看磁盘分区的UUID\"><a href=\"#4-查看磁盘分区的UUID\" class=\"headerlink\" title=\"4. 查看磁盘分区的UUID\"></a>4. 查看磁盘分区的UUID</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. $ sudo blkid</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda1: UUID=<span class=\"string\">\"8048997a-16c9-447b-a209-82e4d380326e\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sda5: UUID=<span class=\"string\">\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\"</span> TYPE=<span class=\"string\">\"swap\"</span></span><br><span class=\"line\">/dev/sdb1: UUID=<span class=\"string\">\"11263962-9715-473f-9421-0b604e895aaa\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sr0: LABEL=<span class=\"string\">\"Join Me\"</span> TYPE=<span class=\"string\">\"iso9660\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-配置开机自动挂载：\"><a href=\"#5-配置开机自动挂载：\" class=\"headerlink\" title=\"5. 配置开机自动挂载：\"></a>5. 配置开机自动挂载：</h2><p>因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：</span><br><span class=\"line\">&lt;fs spec&gt; &lt;fs file&gt; &lt;fs vfstype&gt; &lt;fs mntops&gt; &lt;fs freq&gt; &lt;fs passno&gt;</span><br><span class=\"line\">具体说明，以挂载/dev/sdb1为例:</span><br><span class=\"line\">&lt;fs spec&gt; :</span><br><span class=\"line\">分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software</span><br><span class=\"line\">&lt;fs file&gt; : 具体挂载点的位置，例如：/data</span><br><span class=\"line\">&lt;fs vfstype&gt; : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs</span><br><span class=\"line\">&lt;fs mntops&gt; : 挂载参数，一般为defaults</span><br><span class=\"line\">&lt;fs freq&gt; : 磁盘检查，默认为0</span><br><span class=\"line\">&lt;fs passno&gt; : 磁盘检查，默认为0,不需要检查</span><br></pre></td></tr></table></figure>\n<p>修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-分区\"><a href=\"#1-分区\" class=\"headerlink\" title=\"1. 分区\"></a>1. 分区</h1><h2 id=\"1-1-使用fdisk\"><a href=\"#1-1-使用fdisk\" class=\"headerlink\" title=\"1.1 使用fdisk\"></a>1.1 使用fdisk</h2><p>1）先查看下是否有磁盘没有分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n<p>2） 分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n<p>3）根据提示操作</p>\n<h3 id=\"1-2-使用-parted\"><a href=\"#1-2-使用-parted\" class=\"headerlink\" title=\"1.2 使用 parted\"></a>1.2 使用 parted</h3><h2 id=\"2-格式化新硬盘\"><a href=\"#2-格式化新硬盘\" class=\"headerlink\" title=\"2. 格式化新硬盘\"></a>2. 格式化新硬盘</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-挂载\"><a href=\"#3-挂载\" class=\"headerlink\" title=\"3. 挂载\"></a>3. 挂载</h2><p>1) 创建/data目录（/data目录为硬盘将挂载的地方）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data</span><br></pre></td></tr></table></figure>\n<p>2）挂载分区：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sdb1 /data</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-查看磁盘分区的UUID\"><a href=\"#4-查看磁盘分区的UUID\" class=\"headerlink\" title=\"4. 查看磁盘分区的UUID\"></a>4. 查看磁盘分区的UUID</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. $ sudo blkid</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda1: UUID=<span class=\"string\">\"8048997a-16c9-447b-a209-82e4d380326e\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sda5: UUID=<span class=\"string\">\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\"</span> TYPE=<span class=\"string\">\"swap\"</span></span><br><span class=\"line\">/dev/sdb1: UUID=<span class=\"string\">\"11263962-9715-473f-9421-0b604e895aaa\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sr0: LABEL=<span class=\"string\">\"Join Me\"</span> TYPE=<span class=\"string\">\"iso9660\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-配置开机自动挂载：\"><a href=\"#5-配置开机自动挂载：\" class=\"headerlink\" title=\"5. 配置开机自动挂载：\"></a>5. 配置开机自动挂载：</h2><p>因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：</span><br><span class=\"line\">&lt;fs spec&gt; &lt;fs file&gt; &lt;fs vfstype&gt; &lt;fs mntops&gt; &lt;fs freq&gt; &lt;fs passno&gt;</span><br><span class=\"line\">具体说明，以挂载/dev/sdb1为例:</span><br><span class=\"line\">&lt;fs spec&gt; :</span><br><span class=\"line\">分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software</span><br><span class=\"line\">&lt;fs file&gt; : 具体挂载点的位置，例如：/data</span><br><span class=\"line\">&lt;fs vfstype&gt; : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs</span><br><span class=\"line\">&lt;fs mntops&gt; : 挂载参数，一般为defaults</span><br><span class=\"line\">&lt;fs freq&gt; : 磁盘检查，默认为0</span><br><span class=\"line\">&lt;fs passno&gt; : 磁盘检查，默认为0,不需要检查</span><br></pre></td></tr></table></figure>\n<p>修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。</p>\n"},{"title":"Spring自定义Scope (译)","date":"2018-10-24T01:16:21.000Z","_content":"\n# 1. 概述\n\n开箱即用的spring boot提供了\"singleton\"和\"prototype\"2个标准的，可以在任何spring application中使用的bean scope，\n以及\"request\",\"session\",\"globalSession\" 3个附加的，只能在web-aware application中使用的bean scope。\n\n标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。\n\n比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。\n\n在这篇教程中，将阐述怎样在spring中 **创建,注册,使用** 自定义bean scope。\n\n# 2. 创建一个自定义Scope类\n\n为了创建一个自定义类，我们需要implement Scope Interface,\n并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。\n\n# 2.1 管理 Scope Object \bCallback\n\n实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。\n举个例子，本教程使用了线程安全的 synchronized maps.\n让我们开始定义我们的scope类\n\n```java\npublic class TenantScope implements Scope {\n    private Map<String, Object> scopedObjects\n      = Collections.synchronizedMap(new HashMap<String, Object>());\n    private Map<String, Runnable> destructionCallbacks\n      = Collections.synchronizedMap(new HashMap<String, Runnable>());\n...\n}\n```\n\n# 2.2 从Scope中获取\bObject\n\n为了用name\b从Scope获取Object，我们需要实现getObject方法，**如果取不到Object，我们必须新建一个Object并返回它**\n\n在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。\n\n```java\n@Override\npublic Object get(String name, ObjectFactory<?> objectFactory) {\n    if(!scopedObjects.containsKey(name)) {\n        scopedObjects.put(name, objectFactory.getObject());\n    }\n    return scopedObjects.get(name);\n}\n```\n\n在Scope接口中定义的5个方法中，**只有get方法是\b必须要实现的**，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。\n\n# 2.3 实现销毁回调（Destruction Callback）\n\n我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。\n\n```java\n@Override\npublic void registerDestructionCallback(String name, Runnable callback) {\n    destructionCallbacks.put(name, callback);\n}\n```\n\n# 2.4 从Scope移除Object\n\n接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object\n\n```java\n@Override\npublic Object remove(String name) {\n    destructionCallbacks.remove(name);\n    return scopedObjects.remove(name);\n}\n```\n\n注意： **是调用此方法的caller去真正的执行callback并销毁被移除的object**\n\n# 2.5 获取Conversation ID\n\n现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,\n你可以在这里返回，如果不支持，返回null就可以。\n\n```java\n@Override\npublic String getConversationId() {\n    return \"tenant\";\n}\n```\n\n# 2.6 Resolving Contextual Objects\n\n最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。\n如果不支持，返回null就可以了。\n\n```java\n@Override\npublic Object resolveContextualObject(String key) {\n    return null;\n}\n```\n\n# 3. 注册自定义Scope\n\n为了让spring容器意识到你的新Scope，**我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope**. 我们来看一个这个方法的定义\n\n```java\nvoid registerScope(String scopeName, Scope scope);\n```\n\n第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。\n\n让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope\n\n```java\npublic class TenantBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory factory) throws BeansException {\n        factory.registerScope(\"tenant\", new TenantScope());\n    }\n}\n```\n\n现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。\n\n```java\n@Configuration\npublic class TenantScopeConfig {\n    @Bean\n    public static BeanFactoryPostProcessor beanFactoryPostProcessor() {\n        return new TenantBeanFactoryPostProcessor();\n    }\n}\n```\n\n# 4. 使用自定义Scope\n\n至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。\n\n先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。\n\n```java\npublic class TenantBean {\n\n    private final String name;\n\n    public TenantBean(String name) {\n        this.name = name;\n    }\n\n    public void sayHello() {\n        System.out.println(\n          String.format(\"Hello from %s of type %s\",\n          this.name,\n          this.getClass().getName()));\n    }\n}\n```\n\n注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans\n\n```java\n@Configuration\npublic class TenantBeansConfig {\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean foo() {\n        return new TenantBean(\"foo\");\n    }\n\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean bar() {\n        return new TenantBean(\"bar\");\n    }\n}\n```\n\n# 5. 测试自定义Scope\n\n让我们写一些单元测试测试一下\n\n```java\n@Test\npublic final void whenRegisterScopeAndBeans_thenContextContainsFooAndBar() {\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n    try{\n        ctx.register(TenantScopeConfig.class);\n        ctx.register(TenantBeansConfig.class);\n        ctx.refresh();\n\n        TenantBean foo = (TenantBean) ctx.getBean(\"foo\", TenantBean.class);\n        foo.sayHello();\n        TenantBean bar = (TenantBean) ctx.getBean(\"bar\", TenantBean.class);\n        bar.sayHello();\n        Map<String, TenantBean> foos = ctx.getBeansOfType(TenantBean.class);\n\n        assertThat(foo, not(equalTo(bar)));\n        assertThat(foos.size(), equalTo(2));\n        assertTrue(foos.containsValue(foo));\n        assertTrue(foos.containsValue(bar));\n\n        BeanDefinition fooDefinition = ctx.getBeanDefinition(\"foo\");\n        BeanDefinition barDefinition = ctx.getBeanDefinition(\"bar\");\n\n        assertThat(fooDefinition.getScope(), equalTo(\"tenant\"));\n        assertThat(barDefinition.getScope(), equalTo(\"tenant\"));\n    }\n    finally {\n        ctx.close();\n    }\n}\n```\n\n测试输出：\n\n```log\nHello from foo of type org.baeldung.customscope.TenantBean\nHello from bar of type org.baeldung.customscope.TenantBean\n```\n\n# 6. 总结\n\n在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读\n[Spring Framework Reference](https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom)了解更多细节，你也可以通过[Spring Framework](https://github.com/spring-projects/spring-framework)源码.看一下Spring是如何实现了各种Scope.\n\n\b你可以[点这里](https://github.com/eugenp/tutorials/tree/master/spring-all)获取本教程代码\n\n**[原文链接](https://www.baeldung.com/spring-custom-scope)** : [https://www.baeldung.com/spring-custom-scope](https://www.baeldung.com/spring-custom-scope)","source":"_posts/2018-10-spring-custom-scope.md","raw":"---\ntitle: Spring自定义Scope (译)\ndate: 2018-10-24 09:16:21\ntags: [spring,scope,java,scope,译]\ncategories: spring \n---\n\n# 1. 概述\n\n开箱即用的spring boot提供了\"singleton\"和\"prototype\"2个标准的，可以在任何spring application中使用的bean scope，\n以及\"request\",\"session\",\"globalSession\" 3个附加的，只能在web-aware application中使用的bean scope。\n\n标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。\n\n比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。\n\n在这篇教程中，将阐述怎样在spring中 **创建,注册,使用** 自定义bean scope。\n\n# 2. 创建一个自定义Scope类\n\n为了创建一个自定义类，我们需要implement Scope Interface,\n并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。\n\n# 2.1 管理 Scope Object \bCallback\n\n实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。\n举个例子，本教程使用了线程安全的 synchronized maps.\n让我们开始定义我们的scope类\n\n```java\npublic class TenantScope implements Scope {\n    private Map<String, Object> scopedObjects\n      = Collections.synchronizedMap(new HashMap<String, Object>());\n    private Map<String, Runnable> destructionCallbacks\n      = Collections.synchronizedMap(new HashMap<String, Runnable>());\n...\n}\n```\n\n# 2.2 从Scope中获取\bObject\n\n为了用name\b从Scope获取Object，我们需要实现getObject方法，**如果取不到Object，我们必须新建一个Object并返回它**\n\n在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。\n\n```java\n@Override\npublic Object get(String name, ObjectFactory<?> objectFactory) {\n    if(!scopedObjects.containsKey(name)) {\n        scopedObjects.put(name, objectFactory.getObject());\n    }\n    return scopedObjects.get(name);\n}\n```\n\n在Scope接口中定义的5个方法中，**只有get方法是\b必须要实现的**，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。\n\n# 2.3 实现销毁回调（Destruction Callback）\n\n我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。\n\n```java\n@Override\npublic void registerDestructionCallback(String name, Runnable callback) {\n    destructionCallbacks.put(name, callback);\n}\n```\n\n# 2.4 从Scope移除Object\n\n接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object\n\n```java\n@Override\npublic Object remove(String name) {\n    destructionCallbacks.remove(name);\n    return scopedObjects.remove(name);\n}\n```\n\n注意： **是调用此方法的caller去真正的执行callback并销毁被移除的object**\n\n# 2.5 获取Conversation ID\n\n现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,\n你可以在这里返回，如果不支持，返回null就可以。\n\n```java\n@Override\npublic String getConversationId() {\n    return \"tenant\";\n}\n```\n\n# 2.6 Resolving Contextual Objects\n\n最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。\n如果不支持，返回null就可以了。\n\n```java\n@Override\npublic Object resolveContextualObject(String key) {\n    return null;\n}\n```\n\n# 3. 注册自定义Scope\n\n为了让spring容器意识到你的新Scope，**我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope**. 我们来看一个这个方法的定义\n\n```java\nvoid registerScope(String scopeName, Scope scope);\n```\n\n第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。\n\n让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope\n\n```java\npublic class TenantBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory factory) throws BeansException {\n        factory.registerScope(\"tenant\", new TenantScope());\n    }\n}\n```\n\n现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。\n\n```java\n@Configuration\npublic class TenantScopeConfig {\n    @Bean\n    public static BeanFactoryPostProcessor beanFactoryPostProcessor() {\n        return new TenantBeanFactoryPostProcessor();\n    }\n}\n```\n\n# 4. 使用自定义Scope\n\n至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。\n\n先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。\n\n```java\npublic class TenantBean {\n\n    private final String name;\n\n    public TenantBean(String name) {\n        this.name = name;\n    }\n\n    public void sayHello() {\n        System.out.println(\n          String.format(\"Hello from %s of type %s\",\n          this.name,\n          this.getClass().getName()));\n    }\n}\n```\n\n注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans\n\n```java\n@Configuration\npublic class TenantBeansConfig {\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean foo() {\n        return new TenantBean(\"foo\");\n    }\n\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean bar() {\n        return new TenantBean(\"bar\");\n    }\n}\n```\n\n# 5. 测试自定义Scope\n\n让我们写一些单元测试测试一下\n\n```java\n@Test\npublic final void whenRegisterScopeAndBeans_thenContextContainsFooAndBar() {\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n    try{\n        ctx.register(TenantScopeConfig.class);\n        ctx.register(TenantBeansConfig.class);\n        ctx.refresh();\n\n        TenantBean foo = (TenantBean) ctx.getBean(\"foo\", TenantBean.class);\n        foo.sayHello();\n        TenantBean bar = (TenantBean) ctx.getBean(\"bar\", TenantBean.class);\n        bar.sayHello();\n        Map<String, TenantBean> foos = ctx.getBeansOfType(TenantBean.class);\n\n        assertThat(foo, not(equalTo(bar)));\n        assertThat(foos.size(), equalTo(2));\n        assertTrue(foos.containsValue(foo));\n        assertTrue(foos.containsValue(bar));\n\n        BeanDefinition fooDefinition = ctx.getBeanDefinition(\"foo\");\n        BeanDefinition barDefinition = ctx.getBeanDefinition(\"bar\");\n\n        assertThat(fooDefinition.getScope(), equalTo(\"tenant\"));\n        assertThat(barDefinition.getScope(), equalTo(\"tenant\"));\n    }\n    finally {\n        ctx.close();\n    }\n}\n```\n\n测试输出：\n\n```log\nHello from foo of type org.baeldung.customscope.TenantBean\nHello from bar of type org.baeldung.customscope.TenantBean\n```\n\n# 6. 总结\n\n在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读\n[Spring Framework Reference](https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom)了解更多细节，你也可以通过[Spring Framework](https://github.com/spring-projects/spring-framework)源码.看一下Spring是如何实现了各种Scope.\n\n\b你可以[点这里](https://github.com/eugenp/tutorials/tree/master/spring-all)获取本教程代码\n\n**[原文链接](https://www.baeldung.com/spring-custom-scope)** : [https://www.baeldung.com/spring-custom-scope](https://www.baeldung.com/spring-custom-scope)","slug":"spring-custom-scope","published":1,"updated":"2018-11-05T07:00:38.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtk000jgmo5eoxpm5kk","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>开箱即用的spring boot提供了”singleton”和”prototype”2个标准的，可以在任何spring application中使用的bean scope，<br>以及”request”,”session”,”globalSession” 3个附加的，只能在web-aware application中使用的bean scope。</p>\n<p>标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。</p>\n<p>比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。</p>\n<p>在这篇教程中，将阐述怎样在spring中 <strong>创建,注册,使用</strong> 自定义bean scope。</p>\n<h1 id=\"2-创建一个自定义Scope类\"><a href=\"#2-创建一个自定义Scope类\" class=\"headerlink\" title=\"2. 创建一个自定义Scope类\"></a>2. 创建一个自定义Scope类</h1><p>为了创建一个自定义类，我们需要implement Scope Interface,<br>并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。</p>\n<h1 id=\"2-1-管理-Scope-Object-Callback\"><a href=\"#2-1-管理-Scope-Object-Callback\" class=\"headerlink\" title=\"2.1 管理 Scope Object \bCallback\"></a>2.1 管理 Scope Object \bCallback</h1><p>实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。<br>举个例子，本教程使用了线程安全的 synchronized maps.<br>让我们开始定义我们的scope类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScope</span> <span class=\"keyword\">implements</span> <span class=\"title\">Scope</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; scopedObjects</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Runnable&gt; destructionCallbacks</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Runnable&gt;());</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-从Scope中获取Object\"><a href=\"#2-2-从Scope中获取Object\" class=\"headerlink\" title=\"2.2 从Scope中获取\bObject\"></a>2.2 从Scope中获取\bObject</h1><p>为了用name\b从Scope获取Object，我们需要实现getObject方法，<strong>如果取不到Object，我们必须新建一个Object并返回它</strong></p>\n<p>在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(String name, ObjectFactory&lt;?&gt; objectFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!scopedObjects.containsKey(name)) &#123;</span><br><span class=\"line\">        scopedObjects.put(name, objectFactory.getObject());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.get(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Scope接口中定义的5个方法中，<strong>只有get方法是\b必须要实现的</strong>，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。</p>\n<h1 id=\"2-3-实现销毁回调（Destruction-Callback）\"><a href=\"#2-3-实现销毁回调（Destruction-Callback）\" class=\"headerlink\" title=\"2.3 实现销毁回调（Destruction Callback）\"></a>2.3 实现销毁回调（Destruction Callback）</h1><p>我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDestructionCallback</span><span class=\"params\">(String name, Runnable callback)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.put(name, callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-4-从Scope移除Object\"><a href=\"#2-4-从Scope移除Object\" class=\"headerlink\" title=\"2.4 从Scope移除Object\"></a>2.4 从Scope移除Object</h1><p>接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">remove</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.remove(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.remove(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： <strong>是调用此方法的caller去真正的执行callback并销毁被移除的object</strong></p>\n<h1 id=\"2-5-获取Conversation-ID\"><a href=\"#2-5-获取Conversation-ID\" class=\"headerlink\" title=\"2.5 获取Conversation ID\"></a>2.5 获取Conversation ID</h1><p>现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,<br>你可以在这里返回，如果不支持，返回null就可以。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConversationId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"tenant\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-6-Resolving-Contextual-Objects\"><a href=\"#2-6-Resolving-Contextual-Objects\" class=\"headerlink\" title=\"2.6 Resolving Contextual Objects\"></a>2.6 Resolving Contextual Objects</h1><p>最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。<br>如果不支持，返回null就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveContextualObject</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-注册自定义Scope\"><a href=\"#3-注册自定义Scope\" class=\"headerlink\" title=\"3. 注册自定义Scope\"></a>3. 注册自定义Scope</h1><p>为了让spring容器意识到你的新Scope，<strong>我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope</strong>. 我们来看一个这个方法的定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registerScope</span><span class=\"params\">(String scopeName, Scope scope)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。</p>\n<p>让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeanFactoryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory factory)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        factory.registerScope(<span class=\"string\">\"tenant\"</span>, <span class=\"keyword\">new</span> TenantScope());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScopeConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BeanFactoryPostProcessor <span class=\"title\">beanFactoryPostProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBeanFactoryPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-使用自定义Scope\"><a href=\"#4-使用自定义Scope\" class=\"headerlink\" title=\"4. 使用自定义Scope\"></a>4. 使用自定义Scope</h1><p>至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。</p>\n<p>先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TenantBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">          String.format(<span class=\"string\">\"Hello from %s of type %s\"</span>,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.getClass().getName()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeansConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-测试自定义Scope\"><a href=\"#5-测试自定义Scope\" class=\"headerlink\" title=\"5. 测试自定义Scope\"></a>5. 测试自定义Scope</h1><p>让我们写一些单元测试测试一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">whenRegisterScopeAndBeans_thenContextContainsFooAndBar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AnnotationConfigApplicationContext ctx = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        ctx.register(TenantScopeConfig.class);</span><br><span class=\"line\">        ctx.register(TenantBeansConfig.class);</span><br><span class=\"line\">        ctx.refresh();</span><br><span class=\"line\"></span><br><span class=\"line\">        TenantBean foo = (TenantBean) ctx.getBean(<span class=\"string\">\"foo\"</span>, TenantBean.class);</span><br><span class=\"line\">        foo.sayHello();</span><br><span class=\"line\">        TenantBean bar = (TenantBean) ctx.getBean(<span class=\"string\">\"bar\"</span>, TenantBean.class);</span><br><span class=\"line\">        bar.sayHello();</span><br><span class=\"line\">        Map&lt;String, TenantBean&gt; foos = ctx.getBeansOfType(TenantBean.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(foo, not(equalTo(bar)));</span><br><span class=\"line\">        assertThat(foos.size(), equalTo(<span class=\"number\">2</span>));</span><br><span class=\"line\">        assertTrue(foos.containsValue(foo));</span><br><span class=\"line\">        assertTrue(foos.containsValue(bar));</span><br><span class=\"line\"></span><br><span class=\"line\">        BeanDefinition fooDefinition = ctx.getBeanDefinition(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">        BeanDefinition barDefinition = ctx.getBeanDefinition(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(fooDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">        assertThat(barDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello from foo of type org.baeldung.customscope.TenantBean</span><br><span class=\"line\">Hello from bar of type org.baeldung.customscope.TenantBean</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><p>在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读<br><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom\" target=\"_blank\" rel=\"noopener\">Spring Framework Reference</a>了解更多细节，你也可以通过<a href=\"https://github.com/spring-projects/spring-framework\" target=\"_blank\" rel=\"noopener\">Spring Framework</a>源码.看一下Spring是如何实现了各种Scope.</p>\n<p>\b你可以<a href=\"https://github.com/eugenp/tutorials/tree/master/spring-all\" target=\"_blank\" rel=\"noopener\">点这里</a>获取本教程代码</p>\n<p><strong><a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">原文链接</a></strong> : <a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">https://www.baeldung.com/spring-custom-scope</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>开箱即用的spring boot提供了”singleton”和”prototype”2个标准的，可以在任何spring application中使用的bean scope，<br>以及”request”,”session”,”globalSession” 3个附加的，只能在web-aware application中使用的bean scope。</p>\n<p>标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。</p>\n<p>比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。</p>\n<p>在这篇教程中，将阐述怎样在spring中 <strong>创建,注册,使用</strong> 自定义bean scope。</p>\n<h1 id=\"2-创建一个自定义Scope类\"><a href=\"#2-创建一个自定义Scope类\" class=\"headerlink\" title=\"2. 创建一个自定义Scope类\"></a>2. 创建一个自定义Scope类</h1><p>为了创建一个自定义类，我们需要implement Scope Interface,<br>并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。</p>\n<h1 id=\"2-1-管理-Scope-Object-Callback\"><a href=\"#2-1-管理-Scope-Object-Callback\" class=\"headerlink\" title=\"2.1 管理 Scope Object \bCallback\"></a>2.1 管理 Scope Object \bCallback</h1><p>实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。<br>举个例子，本教程使用了线程安全的 synchronized maps.<br>让我们开始定义我们的scope类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScope</span> <span class=\"keyword\">implements</span> <span class=\"title\">Scope</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; scopedObjects</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Runnable&gt; destructionCallbacks</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Runnable&gt;());</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-从Scope中获取Object\"><a href=\"#2-2-从Scope中获取Object\" class=\"headerlink\" title=\"2.2 从Scope中获取\bObject\"></a>2.2 从Scope中获取\bObject</h1><p>为了用name\b从Scope获取Object，我们需要实现getObject方法，<strong>如果取不到Object，我们必须新建一个Object并返回它</strong></p>\n<p>在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(String name, ObjectFactory&lt;?&gt; objectFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!scopedObjects.containsKey(name)) &#123;</span><br><span class=\"line\">        scopedObjects.put(name, objectFactory.getObject());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.get(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Scope接口中定义的5个方法中，<strong>只有get方法是\b必须要实现的</strong>，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。</p>\n<h1 id=\"2-3-实现销毁回调（Destruction-Callback）\"><a href=\"#2-3-实现销毁回调（Destruction-Callback）\" class=\"headerlink\" title=\"2.3 实现销毁回调（Destruction Callback）\"></a>2.3 实现销毁回调（Destruction Callback）</h1><p>我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDestructionCallback</span><span class=\"params\">(String name, Runnable callback)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.put(name, callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-4-从Scope移除Object\"><a href=\"#2-4-从Scope移除Object\" class=\"headerlink\" title=\"2.4 从Scope移除Object\"></a>2.4 从Scope移除Object</h1><p>接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">remove</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.remove(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.remove(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： <strong>是调用此方法的caller去真正的执行callback并销毁被移除的object</strong></p>\n<h1 id=\"2-5-获取Conversation-ID\"><a href=\"#2-5-获取Conversation-ID\" class=\"headerlink\" title=\"2.5 获取Conversation ID\"></a>2.5 获取Conversation ID</h1><p>现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,<br>你可以在这里返回，如果不支持，返回null就可以。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConversationId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"tenant\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-6-Resolving-Contextual-Objects\"><a href=\"#2-6-Resolving-Contextual-Objects\" class=\"headerlink\" title=\"2.6 Resolving Contextual Objects\"></a>2.6 Resolving Contextual Objects</h1><p>最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。<br>如果不支持，返回null就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveContextualObject</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-注册自定义Scope\"><a href=\"#3-注册自定义Scope\" class=\"headerlink\" title=\"3. 注册自定义Scope\"></a>3. 注册自定义Scope</h1><p>为了让spring容器意识到你的新Scope，<strong>我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope</strong>. 我们来看一个这个方法的定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registerScope</span><span class=\"params\">(String scopeName, Scope scope)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。</p>\n<p>让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeanFactoryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory factory)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        factory.registerScope(<span class=\"string\">\"tenant\"</span>, <span class=\"keyword\">new</span> TenantScope());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScopeConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BeanFactoryPostProcessor <span class=\"title\">beanFactoryPostProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBeanFactoryPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-使用自定义Scope\"><a href=\"#4-使用自定义Scope\" class=\"headerlink\" title=\"4. 使用自定义Scope\"></a>4. 使用自定义Scope</h1><p>至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。</p>\n<p>先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TenantBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">          String.format(<span class=\"string\">\"Hello from %s of type %s\"</span>,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.getClass().getName()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeansConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-测试自定义Scope\"><a href=\"#5-测试自定义Scope\" class=\"headerlink\" title=\"5. 测试自定义Scope\"></a>5. 测试自定义Scope</h1><p>让我们写一些单元测试测试一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">whenRegisterScopeAndBeans_thenContextContainsFooAndBar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AnnotationConfigApplicationContext ctx = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        ctx.register(TenantScopeConfig.class);</span><br><span class=\"line\">        ctx.register(TenantBeansConfig.class);</span><br><span class=\"line\">        ctx.refresh();</span><br><span class=\"line\"></span><br><span class=\"line\">        TenantBean foo = (TenantBean) ctx.getBean(<span class=\"string\">\"foo\"</span>, TenantBean.class);</span><br><span class=\"line\">        foo.sayHello();</span><br><span class=\"line\">        TenantBean bar = (TenantBean) ctx.getBean(<span class=\"string\">\"bar\"</span>, TenantBean.class);</span><br><span class=\"line\">        bar.sayHello();</span><br><span class=\"line\">        Map&lt;String, TenantBean&gt; foos = ctx.getBeansOfType(TenantBean.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(foo, not(equalTo(bar)));</span><br><span class=\"line\">        assertThat(foos.size(), equalTo(<span class=\"number\">2</span>));</span><br><span class=\"line\">        assertTrue(foos.containsValue(foo));</span><br><span class=\"line\">        assertTrue(foos.containsValue(bar));</span><br><span class=\"line\"></span><br><span class=\"line\">        BeanDefinition fooDefinition = ctx.getBeanDefinition(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">        BeanDefinition barDefinition = ctx.getBeanDefinition(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(fooDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">        assertThat(barDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello from foo of type org.baeldung.customscope.TenantBean</span><br><span class=\"line\">Hello from bar of type org.baeldung.customscope.TenantBean</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><p>在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读<br><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom\" target=\"_blank\" rel=\"noopener\">Spring Framework Reference</a>了解更多细节，你也可以通过<a href=\"https://github.com/spring-projects/spring-framework\" target=\"_blank\" rel=\"noopener\">Spring Framework</a>源码.看一下Spring是如何实现了各种Scope.</p>\n<p>\b你可以<a href=\"https://github.com/eugenp/tutorials/tree/master/spring-all\" target=\"_blank\" rel=\"noopener\">点这里</a>获取本教程代码</p>\n<p><strong><a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">原文链接</a></strong> : <a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">https://www.baeldung.com/spring-custom-scope</a></p>\n"},{"title":"利用ApplicationContextAware制作一个获取ApplicationContext的Provider","date":"2018-10-26T02:54:37.000Z","_content":"\n# 1. 定义一个继承 ApplicationContextAware 的 bean\n\n定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean\n\n```java\n@Component\npublic class ApplicationContextProvider implements ApplicationContextAware {\n\n  private ApplicationContext applicationContext;\n\n  @Override\n  public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n    this.applicationContext = applicationContext;\n  }\n\n  public ApplicationContext getContext() {\n    return applicationContext;\n  }\n\n}\n```\n\n# 2. 使用\n\n``` java\n@Service\npublic class UseSample {\n  @Autoware\n  private ApplicationContextProvider applicationContextProvider;\n\n  public void sample(){\n    ApplicationContext appctx = applicationContextProvider.getContext();\n    ......\n    ......\n\n  }\n}\n\n```\n\n# 3. 实现原理\n\nspirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用\nsetApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。\n\n\nspring源码:\n\n```java\nprivate void invokeAwareInterfaces(Object bean) {\n        .....\n if (bean instanceof ApplicationContextAware) {\n  ((ApplicationContextAware)bean).setApplicationContext(this.applicationContext);\n   }\n}\n```","source":"_posts/2018-10-use-of-application-context-aware.md","raw":"---\ntitle: 利用ApplicationContextAware制作一个获取ApplicationContext的Provider\ndate: 2018-10-26 10:54:37\ntags: [spring]\ncategories: [bean]\n---\n\n# 1. 定义一个继承 ApplicationContextAware 的 bean\n\n定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean\n\n```java\n@Component\npublic class ApplicationContextProvider implements ApplicationContextAware {\n\n  private ApplicationContext applicationContext;\n\n  @Override\n  public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n    this.applicationContext = applicationContext;\n  }\n\n  public ApplicationContext getContext() {\n    return applicationContext;\n  }\n\n}\n```\n\n# 2. 使用\n\n``` java\n@Service\npublic class UseSample {\n  @Autoware\n  private ApplicationContextProvider applicationContextProvider;\n\n  public void sample(){\n    ApplicationContext appctx = applicationContextProvider.getContext();\n    ......\n    ......\n\n  }\n}\n\n```\n\n# 3. 实现原理\n\nspirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用\nsetApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。\n\n\nspring源码:\n\n```java\nprivate void invokeAwareInterfaces(Object bean) {\n        .....\n if (bean instanceof ApplicationContextAware) {\n  ((ApplicationContextAware)bean).setApplicationContext(this.applicationContext);\n   }\n}\n```","slug":"use-of-application-context-aware","published":1,"updated":"2018-11-05T07:00:38.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtm000lgmo5kztzyaeu","content":"<h1 id=\"1-定义一个继承-ApplicationContextAware-的-bean\"><a href=\"#1-定义一个继承-ApplicationContextAware-的-bean\" class=\"headerlink\" title=\"1. 定义一个继承 ApplicationContextAware 的 bean\"></a>1. 定义一个继承 ApplicationContextAware 的 bean</h1><p>定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationContextProvider</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ApplicationContext <span class=\"title\">getContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseSample</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Autoware</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContextProvider applicationContextProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sample</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ApplicationContext appctx = applicationContextProvider.getContext();</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-实现原理\"><a href=\"#3-实现原理\" class=\"headerlink\" title=\"3. 实现原理\"></a>3. 实现原理</h1><p>spirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用<br>setApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。</p>\n<p>spring源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAwareInterfaces</span><span class=\"params\">(Object bean)</span> </span>&#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationContextAware) &#123;</span><br><span class=\"line\">  ((ApplicationContextAware)bean).setApplicationContext(<span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-定义一个继承-ApplicationContextAware-的-bean\"><a href=\"#1-定义一个继承-ApplicationContextAware-的-bean\" class=\"headerlink\" title=\"1. 定义一个继承 ApplicationContextAware 的 bean\"></a>1. 定义一个继承 ApplicationContextAware 的 bean</h1><p>定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationContextProvider</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ApplicationContext <span class=\"title\">getContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseSample</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Autoware</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContextProvider applicationContextProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sample</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ApplicationContext appctx = applicationContextProvider.getContext();</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-实现原理\"><a href=\"#3-实现原理\" class=\"headerlink\" title=\"3. 实现原理\"></a>3. 实现原理</h1><p>spirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用<br>setApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。</p>\n<p>spring源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAwareInterfaces</span><span class=\"params\">(Object bean)</span> </span>&#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationContextAware) &#123;</span><br><span class=\"line\">  ((ApplicationContextAware)bean).setApplicationContext(<span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"SpringMVC源码解析(一) - Http请求处理流程","date":"2018-10-30T01:48:46.000Z","_content":"\n# 1. 概述\n\n我们在使用 SpringMVC 开发业务逻辑的时候，经常使用@Controller，@RequestMapping 等注解快速注册并接收网络请求。\n那今天我们来看一下，当接收到一个网络请求后，SpringMVC 框架是如何找到你的业务逻辑代码处理请求，并返回结果的。\n\n# 2. 核心类图及方法\n\nSpringMVC 处理请求的核心类是 DispatcherServlet，我们先来看一下他的类图\n\n{% asset_img springmvc_class.jpg DispatcherServler类图 %}\n\n我们看到核心类 DispacherServlet 的祖先都是一些个抽象类。真正可以被实例化使用的只有 DispatcherServlert，那关于处理请求方面，\n这些抽象类都干了些什么呢？我们先来看一下定义了 Servlet 容器的接口**javax.servlet.http.Servlet**的源码\n\n# 2.1 Servlet 接口 及 HttpServlet 中的实现\n\n```java\npublic interface Servlet {\n  /**\n  * Servlet容器初始化接口，Servlet初始化后备调用。\n  */\n  public void init(ServletConfig config) throws ServletException;\n  /**\n  * 返回Servlet配置对象\n  */\n  public ServletConfig getServletConfig();\n\n  /**\n  * Servlet处理请求的接口\n  */\n  public void service(ServletRequest req, ServletResponse res)\n            throws ServletException, IOException;\n\n  /**\n  * 返回servlet的信息，例如作者，版本和copyright\n  */\n  public String getServletInfo();\n  /**\n  * 当Servlet被移出服务的时候被调用\n  */\n  public void destroy();\n}\n```\n\n在这里我们主要关心的是处理请求的 service 方法，我们来看一下他在**HttpServlet**中的实现。\n\n```java\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException {\n\n        String method = req.getMethod();\n\n        if (method.equals(METHOD_GET)) {\n            long lastModified = getLastModified(req);\n            if (lastModified == -1) {\n                // servlet doesn't support if-modified-since, no reason\n                // to go through further expensive logic\n                doGet(req, resp);\n            } else {\n                long ifModifiedSince;\n                try {\n                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n                } catch (IllegalArgumentException iae) {\n                    // Invalid date header - proceed as if none was set\n                    ifModifiedSince = -1;\n                }\n                if (ifModifiedSince < (lastModified / 1000 * 1000)) {\n                    // If the servlet mod time is later, call doGet()\n                    // Round down to the nearest second for a proper compare\n                    // A ifModifiedSince of -1 will always be less\n                    maybeSetLastModified(resp, lastModified);\n                    doGet(req, resp);\n                } else {\n                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            }\n\n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n\n        } else if (method.equals(METHOD_POST)) {\n            doPost(req, resp);\n\n        } else if (method.equals(METHOD_PUT)) {\n            doPut(req, resp);\n\n        } else if (method.equals(METHOD_DELETE)) {\n            doDelete(req, resp);\n\n        } else if (method.equals(METHOD_OPTIONS)) {\n            doOptions(req,resp);\n\n        } else if (method.equals(METHOD_TRACE)) {\n            doTrace(req,resp);\n\n        } else {\n            //\n            // Note that this means NO servlet supports whatever\n            // method was requested, anywhere on this server.\n            //\n\n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[1];\n            errArgs[0] = method;\n            errMsg = MessageFormat.format(errMsg, errArgs);\n\n            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n        }\n    }\n```\n\n可见 HttpServlet 实现了 service 方法并根据 Http 请求的 Method 调用了 doGet,doHead,doPost,doPut,doDelete,doOptions,doTrace 等方法。那末，请求便根据 requestMethod 被分散到了不通的方法中处理。\n\n# 2.2 FrameworkServlet\n\n我们再来看一下 DispatcherServlet 的父类 FrameworkServlet 的源码\n\n```java\n  /**\n   * Override the parent class implementation in order to intercept PATCH requests.\n   */\n  @Override\n  protected void service(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    HttpMethod httpMethod = HttpMethod.resolve(request.getMethod());\n    if (httpMethod == HttpMethod.PATCH || httpMethod == null) {\n      processRequest(request, response);\n    }\n    else {\n      super.service(request, response);\n    }\n  }\n\n  /**\n   * Delegate GET requests to processRequest/doService.\n   * <p>Will also be invoked by HttpServlet's default implementation of {@code doHead},\n   * with a {@code NoBodyResponse} that just captures the content length.\n   * @see #doService\n   * @see #doHead\n   */\n  @Override\n  protected final void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    processRequest(request, response);\n  }\n\n  /**\n   * Delegate POST requests to {@link #processRequest}.\n   * @see #doService\n   */\n  @Override\n  protected final void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    processRequest(request, response);\n  }\n\n  /**\n   * Delegate PUT requests to {@link #processRequest}.\n   * @see #doService\n   */\n  @Override\n  protected final void doPut(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    processRequest(request, response);\n  }\n\n  /**\n   * Delegate DELETE requests to {@link #processRequest}.\n   * @see #doService\n   */\n  @Override\n  protected final void doDelete(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    processRequest(request, response);\n  }\n\n  /**\n   * Delegate OPTIONS requests to {@link #processRequest}, if desired.\n   * <p>Applies HttpServlet's standard OPTIONS processing otherwise,\n   * and also if there is still no 'Allow' header set after dispatching.\n   * @see #doService\n   */\n  @Override\n  protected void doOptions(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    if (this.dispatchOptionsRequest || CorsUtils.isPreFlightRequest(request)) {\n      processRequest(request, response);\n      if (response.containsHeader(\"Allow\")) {\n        // Proper OPTIONS response coming from a handler - we're done.\n        return;\n      }\n    }\n\n    // Use response wrapper in order to always add PATCH to the allowed methods\n    super.doOptions(request, new HttpServletResponseWrapper(response) {\n      @Override\n      public void setHeader(String name, String value) {\n        if (\"Allow\".equals(name)) {\n          value = (StringUtils.hasLength(value) ? value + \", \" : \"\") + HttpMethod.PATCH.name();\n        }\n        super.setHeader(name, value);\n      }\n    });\n  }\n\n  /**\n   * Delegate TRACE requests to {@link #processRequest}, if desired.\n   * <p>Applies HttpServlet's standard TRACE processing otherwise.\n   * @see #doService\n   */\n  @Override\n  protected void doTrace(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    if (this.dispatchTraceRequest) {\n      processRequest(request, response);\n      if (\"message/http\".equals(response.getContentType())) {\n        // Proper TRACE response coming from a handler - we're done.\n        return;\n      }\n    }\n    super.doTrace(request, response);\n  }\n\n  /**\n   * Process this request, publishing an event regardless of the outcome.\n   * <p>The actual event handling is performed by the abstract\n   * {@link #doService} template method.\n   */\n  protected final void processRequest(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    long startTime = System.currentTimeMillis();\n    Throwable failureCause = null;\n\n    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();\n    LocaleContext localeContext = buildLocaleContext(request);\n\n    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();\n    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);\n\n    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());\n\n    initContextHolders(request, localeContext, requestAttributes);\n\n    try {\n      doService(request, response);\n    }\n    catch (ServletException | IOException ex) {\n      failureCause = ex;\n      throw ex;\n    }\n    catch (Throwable ex) {\n      failureCause = ex;\n      throw new NestedServletException(\"Request processing failed\", ex);\n    }\n\n    finally {\n      resetContextHolders(request, previousLocaleContext, previousAttributes);\n      if (requestAttributes != null) {\n        requestAttributes.requestCompleted();\n      }\n\n      if (logger.isDebugEnabled()) {\n        if (failureCause != null) {\n          this.logger.debug(\"Could not complete request\", failureCause);\n        }\n        else {\n          if (asyncManager.isConcurrentHandlingStarted()) {\n            logger.debug(\"Leaving response open for concurrent processing\");\n          }\n          else {\n            this.logger.debug(\"Successfully completed request\");\n          }\n        }\n      }\n\n      publishRequestHandledEvent(request, response, startTime, failureCause);\n    }\n  }\n```\n\nFrameworkServlet 做了以下几件事情:\n\n1. 覆写 doGet,doPost,doPut 等方法，都调用了 processRequest 来处理请求，把父类 HttpServlet 分散到各个方法中处理的请求又归拢到了一起，使用 processRequest 集中处理。\n2. 覆写 service 方法，支持了 http PATCH 方法。\n3. processRequest 方法初始化了 ContextHolder 并调用了抽象方法**doService**处理请求。\n4. publish 了请求已被处理的 ApplicationEvent。\n\n# 2.3 DispatcherServlet\n\nDispacherServlet 实现了父类的抽象方法 doService。先做了一些准备工作，便调用了 doDispatch 处理请求。\n\n```java\n/**\n   * Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch}\n   * for the actual dispatching.\n   */\n  @Override\n  protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    if (logger.isDebugEnabled()) {\n      String resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? \" resumed\" : \"\";\n      logger.debug(\"DispatcherServlet with name '\" + getServletName() + \"'\" + resumed +\n          \" processing \" + request.getMethod() + \" request for [\" + getRequestUri(request) + \"]\");\n    }\n\n    // Keep a snapshot of the request attributes in case of an include,\n    // to be able to restore the original attributes after the include.\n    Map<String, Object> attributesSnapshot = null;\n    if (WebUtils.isIncludeRequest(request)) {\n      attributesSnapshot = new HashMap<>();\n      Enumeration<?> attrNames = request.getAttributeNames();\n      while (attrNames.hasMoreElements()) {\n        String attrName = (String) attrNames.nextElement();\n        if (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {\n          attributesSnapshot.put(attrName, request.getAttribute(attrName));\n        }\n      }\n    }\n\n    // Make framework objects available to handlers and view objects.\n    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());\n    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);\n    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);\n    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());\n\n    if (this.flashMapManager != null) {\n      FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);\n      if (inputFlashMap != null) {\n        request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));\n      }\n      request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());\n      request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);\n    }\n\n    try {\n      doDispatch(request, response);\n    }\n    finally {\n      if (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n        // Restore the original attribute snapshot, in case of an include.\n        if (attributesSnapshot != null) {\n          restoreAttributesAfterInclude(request, attributesSnapshot);\n        }\n      }\n    }\n  }\n```\n\nDispacherServlet 的 doDispatch 方法是 SpringMVC 处理请求的核心方法，我们来看一下源码：\n\n```java\n  /**\n   * Process the actual dispatching to the handler.\n   * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\n   * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\n   * to find the first that supports the handler class.\n   * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\n   * themselves to decide which methods are acceptable.\n   * @param request current HTTP request\n   * @param response current HTTP response\n   * @throws Exception in case of any kind of processing failure\n   */\n  protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    HttpServletRequest processedRequest = request;\n    HandlerExecutionChain mappedHandler = null;\n    boolean multipartRequestParsed = false;\n\n    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n    try {\n      ModelAndView mv = null;\n      Exception dispatchException = null;\n\n      try {\n        processedRequest = checkMultipart(request);\n        multipartRequestParsed = (processedRequest != request);\n\n        // Determine handler for the current request.\n        mappedHandler = getHandler(processedRequest);\n        if (mappedHandler == null) {\n          noHandlerFound(processedRequest, response);\n          return;\n        }\n\n        // Determine handler adapter for the current request.\n        HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n        // Process last-modified header, if supported by the handler.\n        String method = request.getMethod();\n        boolean isGet = \"GET\".equals(method);\n        if (isGet || \"HEAD\".equals(method)) {\n          long lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n          if (logger.isDebugEnabled()) {\n            logger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n          }\n          if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n            return;\n          }\n        }\n\n        if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n          return;\n        }\n\n        // Actually invoke the handler.\n        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n        if (asyncManager.isConcurrentHandlingStarted()) {\n          return;\n        }\n\n        applyDefaultViewName(processedRequest, mv);\n        mappedHandler.applyPostHandle(processedRequest, response, mv);\n      }\n      catch (Exception ex) {\n        dispatchException = ex;\n      }\n      catch (Throwable err) {\n        // As of 4.3, we're processing Errors thrown from handler methods as well,\n        // making them available for @ExceptionHandler methods and other scenarios.\n        dispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n      }\n      processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n    }\n    catch (Exception ex) {\n      triggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n    }\n    catch (Throwable err) {\n      triggerAfterCompletion(processedRequest, response, mappedHandler,\n          new NestedServletException(\"Handler processing failed\", err));\n    }\n    finally {\n      if (asyncManager.isConcurrentHandlingStarted()) {\n        // Instead of postHandle and afterCompletion\n        if (mappedHandler != null) {\n          mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n        }\n      }\n      else {\n        // Clean up any resources used by a multipart request.\n        if (multipartRequestParsed) {\n          cleanupMultipart(processedRequest);\n        }\n      }\n    }\n  t }\n```\n\n处理步骤：\n\n1. 获取请求对应的 HandlerExecutionChain，HandlerExecution 中的 handler 记录了业务代码的入口方法。\n2. 获取该 HandlerExecutionChain 中 handler 对应的 handlerAdapter\n3. 执行 HandlerExecutionChain 中拦截器的 preHandler 方法。\n4. 执行 hander,获得 ModelAndView 对象 mv\n5. 执行 HandlerExecutionChain 中拦截器的 postHandler 方法。\n6. 执行 postDispatchResult 方法，如果 mv!=null,渲染视图。\n\n# 3. 总结\n\n整个请求的处理流程的时序图如下：\n\n{% asset_img DispatcherServletSequence.jpg SpringMVC请求处理总时序图 %}\n\n下一篇：\n\n**[SpringMVC 源码解析(二) - 怎样找到处理 Http 请求的 Method](/blog/2018/11/17/springmvc-find-request-handler/)**\n","source":"_posts/2018-10-springmvc-resquest-flow.md","raw":"---\ntitle: SpringMVC源码解析(一) - Http请求处理流程\ndate: 2018-10-30 09:48:46\ntags: [spring, 源码解析, springMVC]\ncategories: [spring源码解析]\n---\n\n# 1. 概述\n\n我们在使用 SpringMVC 开发业务逻辑的时候，经常使用@Controller，@RequestMapping 等注解快速注册并接收网络请求。\n那今天我们来看一下，当接收到一个网络请求后，SpringMVC 框架是如何找到你的业务逻辑代码处理请求，并返回结果的。\n\n# 2. 核心类图及方法\n\nSpringMVC 处理请求的核心类是 DispatcherServlet，我们先来看一下他的类图\n\n{% asset_img springmvc_class.jpg DispatcherServler类图 %}\n\n我们看到核心类 DispacherServlet 的祖先都是一些个抽象类。真正可以被实例化使用的只有 DispatcherServlert，那关于处理请求方面，\n这些抽象类都干了些什么呢？我们先来看一下定义了 Servlet 容器的接口**javax.servlet.http.Servlet**的源码\n\n# 2.1 Servlet 接口 及 HttpServlet 中的实现\n\n```java\npublic interface Servlet {\n  /**\n  * Servlet容器初始化接口，Servlet初始化后备调用。\n  */\n  public void init(ServletConfig config) throws ServletException;\n  /**\n  * 返回Servlet配置对象\n  */\n  public ServletConfig getServletConfig();\n\n  /**\n  * Servlet处理请求的接口\n  */\n  public void service(ServletRequest req, ServletResponse res)\n            throws ServletException, IOException;\n\n  /**\n  * 返回servlet的信息，例如作者，版本和copyright\n  */\n  public String getServletInfo();\n  /**\n  * 当Servlet被移出服务的时候被调用\n  */\n  public void destroy();\n}\n```\n\n在这里我们主要关心的是处理请求的 service 方法，我们来看一下他在**HttpServlet**中的实现。\n\n```java\n    protected void service(HttpServletRequest req, HttpServletResponse resp)\n        throws ServletException, IOException {\n\n        String method = req.getMethod();\n\n        if (method.equals(METHOD_GET)) {\n            long lastModified = getLastModified(req);\n            if (lastModified == -1) {\n                // servlet doesn't support if-modified-since, no reason\n                // to go through further expensive logic\n                doGet(req, resp);\n            } else {\n                long ifModifiedSince;\n                try {\n                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n                } catch (IllegalArgumentException iae) {\n                    // Invalid date header - proceed as if none was set\n                    ifModifiedSince = -1;\n                }\n                if (ifModifiedSince < (lastModified / 1000 * 1000)) {\n                    // If the servlet mod time is later, call doGet()\n                    // Round down to the nearest second for a proper compare\n                    // A ifModifiedSince of -1 will always be less\n                    maybeSetLastModified(resp, lastModified);\n                    doGet(req, resp);\n                } else {\n                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n                }\n            }\n\n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n\n        } else if (method.equals(METHOD_POST)) {\n            doPost(req, resp);\n\n        } else if (method.equals(METHOD_PUT)) {\n            doPut(req, resp);\n\n        } else if (method.equals(METHOD_DELETE)) {\n            doDelete(req, resp);\n\n        } else if (method.equals(METHOD_OPTIONS)) {\n            doOptions(req,resp);\n\n        } else if (method.equals(METHOD_TRACE)) {\n            doTrace(req,resp);\n\n        } else {\n            //\n            // Note that this means NO servlet supports whatever\n            // method was requested, anywhere on this server.\n            //\n\n            String errMsg = lStrings.getString(\"http.method_not_implemented\");\n            Object[] errArgs = new Object[1];\n            errArgs[0] = method;\n            errMsg = MessageFormat.format(errMsg, errArgs);\n\n            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n        }\n    }\n```\n\n可见 HttpServlet 实现了 service 方法并根据 Http 请求的 Method 调用了 doGet,doHead,doPost,doPut,doDelete,doOptions,doTrace 等方法。那末，请求便根据 requestMethod 被分散到了不通的方法中处理。\n\n# 2.2 FrameworkServlet\n\n我们再来看一下 DispatcherServlet 的父类 FrameworkServlet 的源码\n\n```java\n  /**\n   * Override the parent class implementation in order to intercept PATCH requests.\n   */\n  @Override\n  protected void service(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    HttpMethod httpMethod = HttpMethod.resolve(request.getMethod());\n    if (httpMethod == HttpMethod.PATCH || httpMethod == null) {\n      processRequest(request, response);\n    }\n    else {\n      super.service(request, response);\n    }\n  }\n\n  /**\n   * Delegate GET requests to processRequest/doService.\n   * <p>Will also be invoked by HttpServlet's default implementation of {@code doHead},\n   * with a {@code NoBodyResponse} that just captures the content length.\n   * @see #doService\n   * @see #doHead\n   */\n  @Override\n  protected final void doGet(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    processRequest(request, response);\n  }\n\n  /**\n   * Delegate POST requests to {@link #processRequest}.\n   * @see #doService\n   */\n  @Override\n  protected final void doPost(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    processRequest(request, response);\n  }\n\n  /**\n   * Delegate PUT requests to {@link #processRequest}.\n   * @see #doService\n   */\n  @Override\n  protected final void doPut(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    processRequest(request, response);\n  }\n\n  /**\n   * Delegate DELETE requests to {@link #processRequest}.\n   * @see #doService\n   */\n  @Override\n  protected final void doDelete(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    processRequest(request, response);\n  }\n\n  /**\n   * Delegate OPTIONS requests to {@link #processRequest}, if desired.\n   * <p>Applies HttpServlet's standard OPTIONS processing otherwise,\n   * and also if there is still no 'Allow' header set after dispatching.\n   * @see #doService\n   */\n  @Override\n  protected void doOptions(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    if (this.dispatchOptionsRequest || CorsUtils.isPreFlightRequest(request)) {\n      processRequest(request, response);\n      if (response.containsHeader(\"Allow\")) {\n        // Proper OPTIONS response coming from a handler - we're done.\n        return;\n      }\n    }\n\n    // Use response wrapper in order to always add PATCH to the allowed methods\n    super.doOptions(request, new HttpServletResponseWrapper(response) {\n      @Override\n      public void setHeader(String name, String value) {\n        if (\"Allow\".equals(name)) {\n          value = (StringUtils.hasLength(value) ? value + \", \" : \"\") + HttpMethod.PATCH.name();\n        }\n        super.setHeader(name, value);\n      }\n    });\n  }\n\n  /**\n   * Delegate TRACE requests to {@link #processRequest}, if desired.\n   * <p>Applies HttpServlet's standard TRACE processing otherwise.\n   * @see #doService\n   */\n  @Override\n  protected void doTrace(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    if (this.dispatchTraceRequest) {\n      processRequest(request, response);\n      if (\"message/http\".equals(response.getContentType())) {\n        // Proper TRACE response coming from a handler - we're done.\n        return;\n      }\n    }\n    super.doTrace(request, response);\n  }\n\n  /**\n   * Process this request, publishing an event regardless of the outcome.\n   * <p>The actual event handling is performed by the abstract\n   * {@link #doService} template method.\n   */\n  protected final void processRequest(HttpServletRequest request, HttpServletResponse response)\n      throws ServletException, IOException {\n\n    long startTime = System.currentTimeMillis();\n    Throwable failureCause = null;\n\n    LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();\n    LocaleContext localeContext = buildLocaleContext(request);\n\n    RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();\n    ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);\n\n    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());\n\n    initContextHolders(request, localeContext, requestAttributes);\n\n    try {\n      doService(request, response);\n    }\n    catch (ServletException | IOException ex) {\n      failureCause = ex;\n      throw ex;\n    }\n    catch (Throwable ex) {\n      failureCause = ex;\n      throw new NestedServletException(\"Request processing failed\", ex);\n    }\n\n    finally {\n      resetContextHolders(request, previousLocaleContext, previousAttributes);\n      if (requestAttributes != null) {\n        requestAttributes.requestCompleted();\n      }\n\n      if (logger.isDebugEnabled()) {\n        if (failureCause != null) {\n          this.logger.debug(\"Could not complete request\", failureCause);\n        }\n        else {\n          if (asyncManager.isConcurrentHandlingStarted()) {\n            logger.debug(\"Leaving response open for concurrent processing\");\n          }\n          else {\n            this.logger.debug(\"Successfully completed request\");\n          }\n        }\n      }\n\n      publishRequestHandledEvent(request, response, startTime, failureCause);\n    }\n  }\n```\n\nFrameworkServlet 做了以下几件事情:\n\n1. 覆写 doGet,doPost,doPut 等方法，都调用了 processRequest 来处理请求，把父类 HttpServlet 分散到各个方法中处理的请求又归拢到了一起，使用 processRequest 集中处理。\n2. 覆写 service 方法，支持了 http PATCH 方法。\n3. processRequest 方法初始化了 ContextHolder 并调用了抽象方法**doService**处理请求。\n4. publish 了请求已被处理的 ApplicationEvent。\n\n# 2.3 DispatcherServlet\n\nDispacherServlet 实现了父类的抽象方法 doService。先做了一些准备工作，便调用了 doDispatch 处理请求。\n\n```java\n/**\n   * Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch}\n   * for the actual dispatching.\n   */\n  @Override\n  protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    if (logger.isDebugEnabled()) {\n      String resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? \" resumed\" : \"\";\n      logger.debug(\"DispatcherServlet with name '\" + getServletName() + \"'\" + resumed +\n          \" processing \" + request.getMethod() + \" request for [\" + getRequestUri(request) + \"]\");\n    }\n\n    // Keep a snapshot of the request attributes in case of an include,\n    // to be able to restore the original attributes after the include.\n    Map<String, Object> attributesSnapshot = null;\n    if (WebUtils.isIncludeRequest(request)) {\n      attributesSnapshot = new HashMap<>();\n      Enumeration<?> attrNames = request.getAttributeNames();\n      while (attrNames.hasMoreElements()) {\n        String attrName = (String) attrNames.nextElement();\n        if (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {\n          attributesSnapshot.put(attrName, request.getAttribute(attrName));\n        }\n      }\n    }\n\n    // Make framework objects available to handlers and view objects.\n    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());\n    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);\n    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);\n    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());\n\n    if (this.flashMapManager != null) {\n      FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);\n      if (inputFlashMap != null) {\n        request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));\n      }\n      request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());\n      request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);\n    }\n\n    try {\n      doDispatch(request, response);\n    }\n    finally {\n      if (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n        // Restore the original attribute snapshot, in case of an include.\n        if (attributesSnapshot != null) {\n          restoreAttributesAfterInclude(request, attributesSnapshot);\n        }\n      }\n    }\n  }\n```\n\nDispacherServlet 的 doDispatch 方法是 SpringMVC 处理请求的核心方法，我们来看一下源码：\n\n```java\n  /**\n   * Process the actual dispatching to the handler.\n   * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\n   * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\n   * to find the first that supports the handler class.\n   * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\n   * themselves to decide which methods are acceptable.\n   * @param request current HTTP request\n   * @param response current HTTP response\n   * @throws Exception in case of any kind of processing failure\n   */\n  protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    HttpServletRequest processedRequest = request;\n    HandlerExecutionChain mappedHandler = null;\n    boolean multipartRequestParsed = false;\n\n    WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n    try {\n      ModelAndView mv = null;\n      Exception dispatchException = null;\n\n      try {\n        processedRequest = checkMultipart(request);\n        multipartRequestParsed = (processedRequest != request);\n\n        // Determine handler for the current request.\n        mappedHandler = getHandler(processedRequest);\n        if (mappedHandler == null) {\n          noHandlerFound(processedRequest, response);\n          return;\n        }\n\n        // Determine handler adapter for the current request.\n        HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n        // Process last-modified header, if supported by the handler.\n        String method = request.getMethod();\n        boolean isGet = \"GET\".equals(method);\n        if (isGet || \"HEAD\".equals(method)) {\n          long lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n          if (logger.isDebugEnabled()) {\n            logger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n          }\n          if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n            return;\n          }\n        }\n\n        if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n          return;\n        }\n\n        // Actually invoke the handler.\n        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n        if (asyncManager.isConcurrentHandlingStarted()) {\n          return;\n        }\n\n        applyDefaultViewName(processedRequest, mv);\n        mappedHandler.applyPostHandle(processedRequest, response, mv);\n      }\n      catch (Exception ex) {\n        dispatchException = ex;\n      }\n      catch (Throwable err) {\n        // As of 4.3, we're processing Errors thrown from handler methods as well,\n        // making them available for @ExceptionHandler methods and other scenarios.\n        dispatchException = new NestedServletException(\"Handler dispatch failed\", err);\n      }\n      processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n    }\n    catch (Exception ex) {\n      triggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n    }\n    catch (Throwable err) {\n      triggerAfterCompletion(processedRequest, response, mappedHandler,\n          new NestedServletException(\"Handler processing failed\", err));\n    }\n    finally {\n      if (asyncManager.isConcurrentHandlingStarted()) {\n        // Instead of postHandle and afterCompletion\n        if (mappedHandler != null) {\n          mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n        }\n      }\n      else {\n        // Clean up any resources used by a multipart request.\n        if (multipartRequestParsed) {\n          cleanupMultipart(processedRequest);\n        }\n      }\n    }\n  t }\n```\n\n处理步骤：\n\n1. 获取请求对应的 HandlerExecutionChain，HandlerExecution 中的 handler 记录了业务代码的入口方法。\n2. 获取该 HandlerExecutionChain 中 handler 对应的 handlerAdapter\n3. 执行 HandlerExecutionChain 中拦截器的 preHandler 方法。\n4. 执行 hander,获得 ModelAndView 对象 mv\n5. 执行 HandlerExecutionChain 中拦截器的 postHandler 方法。\n6. 执行 postDispatchResult 方法，如果 mv!=null,渲染视图。\n\n# 3. 总结\n\n整个请求的处理流程的时序图如下：\n\n{% asset_img DispatcherServletSequence.jpg SpringMVC请求处理总时序图 %}\n\n下一篇：\n\n**[SpringMVC 源码解析(二) - 怎样找到处理 Http 请求的 Method](/blog/2018/11/17/springmvc-find-request-handler/)**\n","slug":"springmvc-resquest-flow","published":1,"updated":"2018-11-19T13:29:53.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtn000ogmo52j42p934","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>我们在使用 SpringMVC 开发业务逻辑的时候，经常使用@Controller，@RequestMapping 等注解快速注册并接收网络请求。<br>那今天我们来看一下，当接收到一个网络请求后，SpringMVC 框架是如何找到你的业务逻辑代码处理请求，并返回结果的。</p>\n<h1 id=\"2-核心类图及方法\"><a href=\"#2-核心类图及方法\" class=\"headerlink\" title=\"2. 核心类图及方法\"></a>2. 核心类图及方法</h1><p>SpringMVC 处理请求的核心类是 DispatcherServlet，我们先来看一下他的类图</p>\n<img src=\"/blog/2018/10/30/springmvc-resquest-flow/springmvc_class.jpg\" title=\"DispatcherServler类图\">\n<p>我们看到核心类 DispacherServlet 的祖先都是一些个抽象类。真正可以被实例化使用的只有 DispatcherServlert，那关于处理请求方面，<br>这些抽象类都干了些什么呢？我们先来看一下定义了 Servlet 容器的接口<strong>javax.servlet.http.Servlet</strong>的源码</p>\n<h1 id=\"2-1-Servlet-接口-及-HttpServlet-中的实现\"><a href=\"#2-1-Servlet-接口-及-HttpServlet-中的实现\" class=\"headerlink\" title=\"2.1 Servlet 接口 及 HttpServlet 中的实现\"></a>2.1 Servlet 接口 及 HttpServlet 中的实现</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Servlet</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Servlet容器初始化接口，Servlet初始化后备调用。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException</span>;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 返回Servlet配置对象</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ServletConfig <span class=\"title\">getServletConfig</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Servlet处理请求的接口</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 返回servlet的信息，例如作者，版本和copyright</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getServletInfo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 当Servlet被移出服务的时候被调用</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里我们主要关心的是处理请求的 service 方法，我们来看一下他在<strong>HttpServlet</strong>中的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String method = req.getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// servlet doesn't support if-modified-since, no reason</span></span><br><span class=\"line\">            <span class=\"comment\">// to go through further expensive logic</span></span><br><span class=\"line\">            doGet(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> ifModifiedSince;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Invalid date header - proceed as if none was set</span></span><br><span class=\"line\">                ifModifiedSince = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ifModifiedSince &lt; (lastModified / <span class=\"number\">1000</span> * <span class=\"number\">1000</span>)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If the servlet mod time is later, call doGet()</span></span><br><span class=\"line\">                <span class=\"comment\">// Round down to the nearest second for a proper compare</span></span><br><span class=\"line\">                <span class=\"comment\">// A ifModifiedSince of -1 will always be less</span></span><br><span class=\"line\">                maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">        doHead(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class=\"line\">        doPost(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class=\"line\">        doPut(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class=\"line\">        doDelete(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class=\"line\">        doOptions(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class=\"line\">        doTrace(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Note that this means NO servlet supports whatever</span></span><br><span class=\"line\">        <span class=\"comment\">// method was requested, anywhere on this server.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</span><br><span class=\"line\">        Object[] errArgs = <span class=\"keyword\">new</span> Object[<span class=\"number\">1</span>];</span><br><span class=\"line\">        errArgs[<span class=\"number\">0</span>] = method;</span><br><span class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见 HttpServlet 实现了 service 方法并根据 Http 请求的 Method 调用了 doGet,doHead,doPost,doPut,doDelete,doOptions,doTrace 等方法。那末，请求便根据 requestMethod 被分散到了不通的方法中处理。</p>\n<h1 id=\"2-2-FrameworkServlet\"><a href=\"#2-2-FrameworkServlet\" class=\"headerlink\" title=\"2.2 FrameworkServlet\"></a>2.2 FrameworkServlet</h1><p>我们再来看一下 DispatcherServlet 的父类 FrameworkServlet 的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Override the parent class implementation in order to intercept PATCH requests.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  HttpMethod httpMethod = HttpMethod.resolve(request.getMethod());</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (httpMethod == HttpMethod.PATCH || httpMethod == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    processRequest(request, response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.service(request, response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate GET requests to processRequest/doService.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Will also be invoked by HttpServlet's default implementation of &#123;<span class=\"doctag\">@code</span> doHead&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> * with a &#123;<span class=\"doctag\">@code</span> NoBodyResponse&#125; that just captures the content length.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doHead</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  processRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate POST requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  processRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate PUT requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doPut</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  processRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate DELETE requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doDelete</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  processRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate OPTIONS requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;, if desired.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Applies HttpServlet's standard OPTIONS processing otherwise,</span></span><br><span class=\"line\"><span class=\"comment\"> * and also if there is still no 'Allow' header set after dispatching.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doOptions</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dispatchOptionsRequest || CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class=\"line\">    processRequest(request, response);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (response.containsHeader(<span class=\"string\">\"Allow\"</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Proper OPTIONS response coming from a handler - we're done.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Use response wrapper in order to always add PATCH to the allowed methods</span></span><br><span class=\"line\">  <span class=\"keyword\">super</span>.doOptions(request, <span class=\"keyword\">new</span> HttpServletResponseWrapper(response) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeader</span><span class=\"params\">(String name, String value)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">\"Allow\"</span>.equals(name)) &#123;</span><br><span class=\"line\">        value = (StringUtils.hasLength(value) ? value + <span class=\"string\">\", \"</span> : <span class=\"string\">\"\"</span>) + HttpMethod.PATCH.name();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.setHeader(name, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate TRACE requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;, if desired.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Applies HttpServlet's standard TRACE processing otherwise.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doTrace</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dispatchTraceRequest) &#123;</span><br><span class=\"line\">    processRequest(request, response);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"message/http\"</span>.equals(response.getContentType())) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Proper TRACE response coming from a handler - we're done.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.doTrace(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Process this request, publishing an event regardless of the outcome.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The actual event handling is performed by the abstract</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #doService&#125; template method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">  Throwable failureCause = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class=\"line\">  LocaleContext localeContext = buildLocaleContext(request);</span><br><span class=\"line\"></span><br><span class=\"line\">  RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">  ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">  WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\">  asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class=\"keyword\">new</span> RequestBindingInterceptor());</span><br><span class=\"line\"></span><br><span class=\"line\">  initContextHolders(request, localeContext, requestAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    doService(request, response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (ServletException | IOException ex) &#123;</span><br><span class=\"line\">    failureCause = ex;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">    failureCause = ex;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Request processing failed\"</span>, ex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestAttributes != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      requestAttributes.requestCompleted();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (failureCause != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.debug(<span class=\"string\">\"Could not complete request\"</span>, failureCause);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">          logger.debug(<span class=\"string\">\"Leaving response open for concurrent processing\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.logger.debug(<span class=\"string\">\"Successfully completed request\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FrameworkServlet 做了以下几件事情:</p>\n<ol>\n<li>覆写 doGet,doPost,doPut 等方法，都调用了 processRequest 来处理请求，把父类 HttpServlet 分散到各个方法中处理的请求又归拢到了一起，使用 processRequest 集中处理。</li>\n<li>覆写 service 方法，支持了 http PATCH 方法。</li>\n<li>processRequest 方法初始化了 ContextHolder 并调用了抽象方法<strong>doService</strong>处理请求。</li>\n<li>publish 了请求已被处理的 ApplicationEvent。</li>\n</ol>\n<h1 id=\"2-3-DispatcherServlet\"><a href=\"#2-3-DispatcherServlet\" class=\"headerlink\" title=\"2.3 DispatcherServlet\"></a>2.3 DispatcherServlet</h1><p>DispacherServlet 实现了父类的抽象方法 doService。先做了一些准备工作，便调用了 doDispatch 处理请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Exposes the DispatcherServlet-specific request attributes and delegates to &#123;<span class=\"doctag\">@link</span> #doDispatch&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   * for the actual dispatching.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doService</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">      String resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? <span class=\"string\">\" resumed\"</span> : <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">\"DispatcherServlet with name '\"</span> + getServletName() + <span class=\"string\">\"'\"</span> + resumed +</span><br><span class=\"line\">          <span class=\"string\">\" processing \"</span> + request.getMethod() + <span class=\"string\">\" request for [\"</span> + getRequestUri(request) + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class=\"line\">    <span class=\"comment\">// to be able to restore the original attributes after the include.</span></span><br><span class=\"line\">    Map&lt;String, Object&gt; attributesSnapshot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class=\"line\">      attributesSnapshot = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">      Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class=\"line\">        String attrName = (String) attrNames.nextElement();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class=\"line\">          attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Make framework objects available to handlers and view objects.</span></span><br><span class=\"line\">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class=\"line\">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class=\"keyword\">this</span>.localeResolver);</span><br><span class=\"line\">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class=\"keyword\">this</span>.themeResolver);</span><br><span class=\"line\">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flashMapManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      FlashMap inputFlashMap = <span class=\"keyword\">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (inputFlashMap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class=\"keyword\">new</span> FlashMap());</span><br><span class=\"line\">      request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class=\"keyword\">this</span>.flashMapManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      doDispatch(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (attributesSnapshot != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>DispacherServlet 的 doDispatch 方法是 SpringMVC 处理请求的核心方法，我们来看一下源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Process the actual dispatching to the handler.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order.</span></span><br><span class=\"line\"><span class=\"comment\"> * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</span></span><br><span class=\"line\"><span class=\"comment\"> * to find the first that supports the handler class.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</span></span><br><span class=\"line\"><span class=\"comment\"> * themselves to decide which methods are acceptable.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request current HTTP request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response current HTTP response</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception in case of any kind of processing failure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  HttpServletRequest processedRequest = request;</span><br><span class=\"line\">  HandlerExecutionChain mappedHandler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> multipartRequestParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    ModelAndView mv = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Exception dispatchException = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      processedRequest = checkMultipart(request);</span><br><span class=\"line\">      multipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">      mappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mappedHandler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        noHandlerFound(processedRequest, response);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">      HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">      String method = request.getMethod();</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> isGet = <span class=\"string\">\"GET\"</span>.equals(method);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isGet || <span class=\"string\">\"HEAD\"</span>.equals(method)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">          logger.debug(<span class=\"string\">\"Last-Modified value for [\"</span> + getRequestUri(request) + <span class=\"string\">\"] is: \"</span> + lastModified);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">      mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      applyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">      mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">      dispatchException = ex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">      <span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">      dispatchException = <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Handler dispatch failed\"</span>, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">    triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">    triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Handler processing failed\"</span>, err));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mappedHandler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">        cleanupMultipart(processedRequest);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">t &#125;</span><br></pre></td></tr></table></figure>\n<p>处理步骤：</p>\n<ol>\n<li>获取请求对应的 HandlerExecutionChain，HandlerExecution 中的 handler 记录了业务代码的入口方法。</li>\n<li>获取该 HandlerExecutionChain 中 handler 对应的 handlerAdapter</li>\n<li>执行 HandlerExecutionChain 中拦截器的 preHandler 方法。</li>\n<li>执行 hander,获得 ModelAndView 对象 mv</li>\n<li>执行 HandlerExecutionChain 中拦截器的 postHandler 方法。</li>\n<li>执行 postDispatchResult 方法，如果 mv!=null,渲染视图。</li>\n</ol>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>整个请求的处理流程的时序图如下：</p>\n<img src=\"/blog/2018/10/30/springmvc-resquest-flow/DispatcherServletSequence.jpg\" title=\"SpringMVC请求处理总时序图\">\n<p>下一篇：</p>\n<p><strong><a href=\"/blog/2018/11/17/springmvc-find-request-handler/\">SpringMVC 源码解析(二) - 怎样找到处理 Http 请求的 Method</a></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>我们在使用 SpringMVC 开发业务逻辑的时候，经常使用@Controller，@RequestMapping 等注解快速注册并接收网络请求。<br>那今天我们来看一下，当接收到一个网络请求后，SpringMVC 框架是如何找到你的业务逻辑代码处理请求，并返回结果的。</p>\n<h1 id=\"2-核心类图及方法\"><a href=\"#2-核心类图及方法\" class=\"headerlink\" title=\"2. 核心类图及方法\"></a>2. 核心类图及方法</h1><p>SpringMVC 处理请求的核心类是 DispatcherServlet，我们先来看一下他的类图</p>\n<img src=\"/blog/2018/10/30/springmvc-resquest-flow/springmvc_class.jpg\" title=\"DispatcherServler类图\">\n<p>我们看到核心类 DispacherServlet 的祖先都是一些个抽象类。真正可以被实例化使用的只有 DispatcherServlert，那关于处理请求方面，<br>这些抽象类都干了些什么呢？我们先来看一下定义了 Servlet 容器的接口<strong>javax.servlet.http.Servlet</strong>的源码</p>\n<h1 id=\"2-1-Servlet-接口-及-HttpServlet-中的实现\"><a href=\"#2-1-Servlet-接口-及-HttpServlet-中的实现\" class=\"headerlink\" title=\"2.1 Servlet 接口 及 HttpServlet 中的实现\"></a>2.1 Servlet 接口 及 HttpServlet 中的实现</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Servlet</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Servlet容器初始化接口，Servlet初始化后备调用。</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException</span>;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 返回Servlet配置对象</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ServletConfig <span class=\"title\">getServletConfig</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Servlet处理请求的接口</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 返回servlet的信息，例如作者，版本和copyright</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getServletInfo</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 当Servlet被移出服务的时候被调用</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这里我们主要关心的是处理请求的 service 方法，我们来看一下他在<strong>HttpServlet</strong>中的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String method = req.getMethod();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lastModified == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// servlet doesn't support if-modified-since, no reason</span></span><br><span class=\"line\">            <span class=\"comment\">// to go through further expensive logic</span></span><br><span class=\"line\">            doGet(req, resp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> ifModifiedSince;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Invalid date header - proceed as if none was set</span></span><br><span class=\"line\">                ifModifiedSince = -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ifModifiedSince &lt; (lastModified / <span class=\"number\">1000</span> * <span class=\"number\">1000</span>)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If the servlet mod time is later, call doGet()</span></span><br><span class=\"line\">                <span class=\"comment\">// Round down to the nearest second for a proper compare</span></span><br><span class=\"line\">                <span class=\"comment\">// A ifModifiedSince of -1 will always be less</span></span><br><span class=\"line\">                maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">                doGet(req, resp);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = getLastModified(req);</span><br><span class=\"line\">        maybeSetLastModified(resp, lastModified);</span><br><span class=\"line\">        doHead(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class=\"line\">        doPost(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class=\"line\">        doPut(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class=\"line\">        doDelete(req, resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class=\"line\">        doOptions(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class=\"line\">        doTrace(req,resp);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Note that this means NO servlet supports whatever</span></span><br><span class=\"line\">        <span class=\"comment\">// method was requested, anywhere on this server.</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String errMsg = lStrings.getString(<span class=\"string\">\"http.method_not_implemented\"</span>);</span><br><span class=\"line\">        Object[] errArgs = <span class=\"keyword\">new</span> Object[<span class=\"number\">1</span>];</span><br><span class=\"line\">        errArgs[<span class=\"number\">0</span>] = method;</span><br><span class=\"line\">        errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">        resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见 HttpServlet 实现了 service 方法并根据 Http 请求的 Method 调用了 doGet,doHead,doPost,doPut,doDelete,doOptions,doTrace 等方法。那末，请求便根据 requestMethod 被分散到了不通的方法中处理。</p>\n<h1 id=\"2-2-FrameworkServlet\"><a href=\"#2-2-FrameworkServlet\" class=\"headerlink\" title=\"2.2 FrameworkServlet\"></a>2.2 FrameworkServlet</h1><p>我们再来看一下 DispatcherServlet 的父类 FrameworkServlet 的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Override the parent class implementation in order to intercept PATCH requests.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  HttpMethod httpMethod = HttpMethod.resolve(request.getMethod());</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (httpMethod == HttpMethod.PATCH || httpMethod == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    processRequest(request, response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.service(request, response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate GET requests to processRequest/doService.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Will also be invoked by HttpServlet's default implementation of &#123;<span class=\"doctag\">@code</span> doHead&#125;,</span></span><br><span class=\"line\"><span class=\"comment\"> * with a &#123;<span class=\"doctag\">@code</span> NoBodyResponse&#125; that just captures the content length.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doHead</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  processRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate POST requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  processRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate PUT requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doPut</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  processRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate DELETE requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">doDelete</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  processRequest(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate OPTIONS requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;, if desired.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Applies HttpServlet's standard OPTIONS processing otherwise,</span></span><br><span class=\"line\"><span class=\"comment\"> * and also if there is still no 'Allow' header set after dispatching.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doOptions</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dispatchOptionsRequest || CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class=\"line\">    processRequest(request, response);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (response.containsHeader(<span class=\"string\">\"Allow\"</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Proper OPTIONS response coming from a handler - we're done.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Use response wrapper in order to always add PATCH to the allowed methods</span></span><br><span class=\"line\">  <span class=\"keyword\">super</span>.doOptions(request, <span class=\"keyword\">new</span> HttpServletResponseWrapper(response) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setHeader</span><span class=\"params\">(String name, String value)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"string\">\"Allow\"</span>.equals(name)) &#123;</span><br><span class=\"line\">        value = (StringUtils.hasLength(value) ? value + <span class=\"string\">\", \"</span> : <span class=\"string\">\"\"</span>) + HttpMethod.PATCH.name();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>.setHeader(name, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Delegate TRACE requests to &#123;<span class=\"doctag\">@link</span> #processRequest&#125;, if desired.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;Applies HttpServlet's standard TRACE processing otherwise.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> #doService</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doTrace</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.dispatchTraceRequest) &#123;</span><br><span class=\"line\">    processRequest(request, response);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">\"message/http\"</span>.equals(response.getContentType())) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Proper TRACE response coming from a handler - we're done.</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.doTrace(request, response);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Process this request, publishing an event regardless of the outcome.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The actual event handling is performed by the abstract</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@link</span> #doService&#125; template method.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">processRequest</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">  Throwable failureCause = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class=\"line\">  LocaleContext localeContext = buildLocaleContext(request);</span><br><span class=\"line\"></span><br><span class=\"line\">  RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class=\"line\">  ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">  WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\">  asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class=\"keyword\">new</span> RequestBindingInterceptor());</span><br><span class=\"line\"></span><br><span class=\"line\">  initContextHolders(request, localeContext, requestAttributes);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    doService(request, response);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (ServletException | IOException ex) &#123;</span><br><span class=\"line\">    failureCause = ex;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">    failureCause = ex;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Request processing failed\"</span>, ex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestAttributes != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      requestAttributes.requestCompleted();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (failureCause != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.logger.debug(<span class=\"string\">\"Could not complete request\"</span>, failureCause);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">          logger.debug(<span class=\"string\">\"Leaving response open for concurrent processing\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.logger.debug(<span class=\"string\">\"Successfully completed request\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>FrameworkServlet 做了以下几件事情:</p>\n<ol>\n<li>覆写 doGet,doPost,doPut 等方法，都调用了 processRequest 来处理请求，把父类 HttpServlet 分散到各个方法中处理的请求又归拢到了一起，使用 processRequest 集中处理。</li>\n<li>覆写 service 方法，支持了 http PATCH 方法。</li>\n<li>processRequest 方法初始化了 ContextHolder 并调用了抽象方法<strong>doService</strong>处理请求。</li>\n<li>publish 了请求已被处理的 ApplicationEvent。</li>\n</ol>\n<h1 id=\"2-3-DispatcherServlet\"><a href=\"#2-3-DispatcherServlet\" class=\"headerlink\" title=\"2.3 DispatcherServlet\"></a>2.3 DispatcherServlet</h1><p>DispacherServlet 实现了父类的抽象方法 doService。先做了一些准备工作，便调用了 doDispatch 处理请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Exposes the DispatcherServlet-specific request attributes and delegates to &#123;<span class=\"doctag\">@link</span> #doDispatch&#125;</span></span><br><span class=\"line\"><span class=\"comment\">   * for the actual dispatching.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doService</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">      String resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? <span class=\"string\">\" resumed\"</span> : <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">\"DispatcherServlet with name '\"</span> + getServletName() + <span class=\"string\">\"'\"</span> + resumed +</span><br><span class=\"line\">          <span class=\"string\">\" processing \"</span> + request.getMethod() + <span class=\"string\">\" request for [\"</span> + getRequestUri(request) + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class=\"line\">    <span class=\"comment\">// to be able to restore the original attributes after the include.</span></span><br><span class=\"line\">    Map&lt;String, Object&gt; attributesSnapshot = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class=\"line\">      attributesSnapshot = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">      Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class=\"line\">        String attrName = (String) attrNames.nextElement();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class=\"line\">          attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Make framework objects available to handlers and view objects.</span></span><br><span class=\"line\">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class=\"line\">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class=\"keyword\">this</span>.localeResolver);</span><br><span class=\"line\">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class=\"keyword\">this</span>.themeResolver);</span><br><span class=\"line\">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.flashMapManager != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      FlashMap inputFlashMap = <span class=\"keyword\">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (inputFlashMap != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class=\"keyword\">new</span> FlashMap());</span><br><span class=\"line\">      request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class=\"keyword\">this</span>.flashMapManager);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      doDispatch(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (attributesSnapshot != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>DispacherServlet 的 doDispatch 方法是 SpringMVC 处理请求的核心方法，我们来看一下源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Process the actual dispatching to the handler.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order.</span></span><br><span class=\"line\"><span class=\"comment\"> * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</span></span><br><span class=\"line\"><span class=\"comment\"> * to find the first that supports the handler class.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</span></span><br><span class=\"line\"><span class=\"comment\"> * themselves to decide which methods are acceptable.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request current HTTP request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> response current HTTP response</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@throws</span> Exception in case of any kind of processing failure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  HttpServletRequest processedRequest = request;</span><br><span class=\"line\">  HandlerExecutionChain mappedHandler = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> multipartRequestParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    ModelAndView mv = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    Exception dispatchException = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      processedRequest = checkMultipart(request);</span><br><span class=\"line\">      multipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">      mappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mappedHandler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        noHandlerFound(processedRequest, response);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">      HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Process last-modified header, if supported by the handler.</span></span><br><span class=\"line\">      String method = request.getMethod();</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> isGet = <span class=\"string\">\"GET\"</span>.equals(method);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isGet || <span class=\"string\">\"HEAD\"</span>.equals(method)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">          logger.debug(<span class=\"string\">\"Last-Modified value for [\"</span> + getRequestUri(request) + <span class=\"string\">\"] is: \"</span> + lastModified);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">      mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      applyDefaultViewName(processedRequest, mv);</span><br><span class=\"line\">      mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">      dispatchException = ex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// As of 4.3, we're processing Errors thrown from handler methods as well,</span></span><br><span class=\"line\">      <span class=\"comment\">// making them available for @ExceptionHandler methods and other scenarios.</span></span><br><span class=\"line\">      dispatchException = <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Handler dispatch failed\"</span>, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">    triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">catch</span> (Throwable err) &#123;</span><br><span class=\"line\">    triggerAfterCompletion(processedRequest, response, mappedHandler,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> NestedServletException(<span class=\"string\">\"Handler processing failed\"</span>, err));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Instead of postHandle and afterCompletion</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mappedHandler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Clean up any resources used by a multipart request.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (multipartRequestParsed) &#123;</span><br><span class=\"line\">        cleanupMultipart(processedRequest);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">t &#125;</span><br></pre></td></tr></table></figure>\n<p>处理步骤：</p>\n<ol>\n<li>获取请求对应的 HandlerExecutionChain，HandlerExecution 中的 handler 记录了业务代码的入口方法。</li>\n<li>获取该 HandlerExecutionChain 中 handler 对应的 handlerAdapter</li>\n<li>执行 HandlerExecutionChain 中拦截器的 preHandler 方法。</li>\n<li>执行 hander,获得 ModelAndView 对象 mv</li>\n<li>执行 HandlerExecutionChain 中拦截器的 postHandler 方法。</li>\n<li>执行 postDispatchResult 方法，如果 mv!=null,渲染视图。</li>\n</ol>\n<h1 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h1><p>整个请求的处理流程的时序图如下：</p>\n<img src=\"/blog/2018/10/30/springmvc-resquest-flow/DispatcherServletSequence.jpg\" title=\"SpringMVC请求处理总时序图\">\n<p>下一篇：</p>\n<p><strong><a href=\"/blog/2018/11/17/springmvc-find-request-handler/\">SpringMVC 源码解析(二) - 怎样找到处理 Http 请求的 Method</a></strong></p>\n"},{"title":"git删除错误的提交","date":"2018-11-07T12:14:48.000Z","_content":"\n# 方法一\n\n```bash\ngit reset --hard f9782944b2f80433ead80de6dbe517bd7f9f7974\ngit push origin HEAD --force\n```\n\n# 方法二\n\n回退到上一个版本\n\n```bash\ngit reset --hard HEAD~1\ngit push origin HEAD --force\n```\n","source":"_posts/2018-11-git-remove-commit.md","raw":"---\ntitle: git删除错误的提交\ndate: 2018-11-07 20:14:48\ntags: [git]\ncategories: [git]\n---\n\n# 方法一\n\n```bash\ngit reset --hard f9782944b2f80433ead80de6dbe517bd7f9f7974\ngit push origin HEAD --force\n```\n\n# 方法二\n\n回退到上一个版本\n\n```bash\ngit reset --hard HEAD~1\ngit push origin HEAD --force\n```\n","slug":"git-remove-commit","published":1,"updated":"2018-11-13T15:01:44.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qto000rgmo5z9h32k16","content":"<h1 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard f9782944b2f80433ead80de6dbe517bd7f9f7974</span><br><span class=\"line\">git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n<h1 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h1><p>回退到上一个版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD~1</span><br><span class=\"line\">git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard f9782944b2f80433ead80de6dbe517bd7f9f7974</span><br><span class=\"line\">git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n<h1 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h1><p>回退到上一个版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD~1</span><br><span class=\"line\">git push origin HEAD --force</span><br></pre></td></tr></table></figure>\n"},{"title":"国内安装minibuke","date":"2018-11-29T13:43:03.000Z","_content":"\nclone 阿里的 minibuke 仓库\n\n```bash\ngit clone https://github.com/AliyunContainerService/minikube\n```\n\n切换到阿里云分支 aliyun-v0.30.0\n\n```bash\nmkdir $GOPATH/src/k8s.io\nmv minikube $GOPATH/src/k8s.io/\ncd $GOPATH/src/k8s.io/minikube\nmake\ncp out/minikube /usr/local/bin/\nchmod a+x/usr/local/bin/minikube\n```\n","source":"_posts/2018-11-install-minibuke-china.md","raw":"---\ntitle: 国内安装minibuke\ndate: 2018-11-29 21:43:03\ntags: [k8s]\n---\n\nclone 阿里的 minibuke 仓库\n\n```bash\ngit clone https://github.com/AliyunContainerService/minikube\n```\n\n切换到阿里云分支 aliyun-v0.30.0\n\n```bash\nmkdir $GOPATH/src/k8s.io\nmv minikube $GOPATH/src/k8s.io/\ncd $GOPATH/src/k8s.io/minikube\nmake\ncp out/minikube /usr/local/bin/\nchmod a+x/usr/local/bin/minikube\n```\n","slug":"install-minibuke-china","published":1,"updated":"2018-11-29T13:47:59.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtq000tgmo537rigvpf","content":"<p>clone 阿里的 minibuke 仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/AliyunContainerService/minikube</span><br></pre></td></tr></table></figure>\n<p>切换到阿里云分支 aliyun-v0.30.0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir <span class=\"variable\">$GOPATH</span>/src/k8s.io</span><br><span class=\"line\">mv minikube <span class=\"variable\">$GOPATH</span>/src/k8s.io/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/k8s.io/minikube</span><br><span class=\"line\">make</span><br><span class=\"line\">cp out/minikube /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">chmod a+x/usr/<span class=\"built_in\">local</span>/bin/minikube</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>clone 阿里的 minibuke 仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/AliyunContainerService/minikube</span><br></pre></td></tr></table></figure>\n<p>切换到阿里云分支 aliyun-v0.30.0</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir <span class=\"variable\">$GOPATH</span>/src/k8s.io</span><br><span class=\"line\">mv minikube <span class=\"variable\">$GOPATH</span>/src/k8s.io/</span><br><span class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$GOPATH</span>/src/k8s.io/minikube</span><br><span class=\"line\">make</span><br><span class=\"line\">cp out/minikube /usr/<span class=\"built_in\">local</span>/bin/</span><br><span class=\"line\">chmod a+x/usr/<span class=\"built_in\">local</span>/bin/minikube</span><br></pre></td></tr></table></figure>\n"},{"title":"几种用SSH执行远程命令的方法（译）","date":"2018-11-03T05:45:34.000Z","_content":"\n这篇文章将罗列几种使用SSH远程执行命令的方法。\n假设 HOST 参数已经配置好了你的测试服务器信息。\n\n# 单行命令\n\n执行一个单行命令：\n\n```bash\nssh $HOST ls\n```\n\n执行多个用;分割的内联命令 (inlined, separated with ;)\n\n```bash\nssh $HOST ls; pwd; cat /path/to/remote/file\n```\n\n使用sudo权限执行命令\n\n```bash\nssh $HOST sudo ls /root\nsudo: no tty present and no askpass program specified\n```\n\nsudo 需要与shell交互, 需要用 -t 参数开启\n\n```bash\nssh -t $HOST sudo ls /root\n[sudo] password for zaiste:\n```\n\n# 简单的多行命令\n\n```bash\nVAR1=\"Variable 1\"\nssh $HOST '\nls\npwd\nif true; then\n    echo \"True\"\n    echo $VAR1      # <-- it won't work\nelse\n    echo \"False\"\nfi\n'\n```\n\nshell 变量$VAR1将不会传递到远程命令中\n\n# 可以带变量的多行远程命令\n\n为了能够传递变量，我们使用bash -c 命令\n\n```bash\nVAR1=\"Variable 1\"\nssh $HOST bash -c \"'\nls\npwd\nif true; then\n    echo $VAR1\nelse\n    echo \"False\"\nfi\n'\"\n```\n\n# 在远程机器上执行本地脚本\n\n可以简单的用stdin重定向实现\n\n```output\ncat script.sh\nls\npwd\nhostname\n```\n\n```bash\nssh $HOST < script.sh\n```\n\n# 使用Heredoc远程执行多行命令\n\n使用**heredoc**可能是最方便的远程执行多行命令的方式了。\n而且支持代码块外的变量传递。\n\n```bash\nVAR1=\"boo\"\nssh -T $HOST << EOSSH\nls\npwd\nif true; then\n  echo $VAR1\nelse\n  echo \"False\"\nfi\nEOSSH\n```\n\n如果需要在heredoc代码块内定义变量，那就在heredoc开始的标记上打上单引号\n\n```bash\nssh -T $HOST <<'EOSSH'\nVAR1=`pwd`\necho $VAR1\n\nVAR2=$(uname -a)\necho $VAR2\n\nEOSSH\n```\n\n如果出现以下的警告信息\n\n```output\nPseudo-terminal will not be allocated because stdin is not a terminal.\n```\n\n可以执行ssh命令的时候加上 -T 参数消除这个警告\n\n# 原文链接\n\n[here](https://zaiste.net/a_few_ways_to_execute_commands_remotely_using_ssh/)","source":"_posts/2018-11-ssh-remote-command.md","raw":"---\ntitle: 几种用SSH执行远程命令的方法（译）\ndate: 2018-11-03 13:45:34\ntags: [bash,ssh,remote] \ncategories: [运维]\n---\n\n这篇文章将罗列几种使用SSH远程执行命令的方法。\n假设 HOST 参数已经配置好了你的测试服务器信息。\n\n# 单行命令\n\n执行一个单行命令：\n\n```bash\nssh $HOST ls\n```\n\n执行多个用;分割的内联命令 (inlined, separated with ;)\n\n```bash\nssh $HOST ls; pwd; cat /path/to/remote/file\n```\n\n使用sudo权限执行命令\n\n```bash\nssh $HOST sudo ls /root\nsudo: no tty present and no askpass program specified\n```\n\nsudo 需要与shell交互, 需要用 -t 参数开启\n\n```bash\nssh -t $HOST sudo ls /root\n[sudo] password for zaiste:\n```\n\n# 简单的多行命令\n\n```bash\nVAR1=\"Variable 1\"\nssh $HOST '\nls\npwd\nif true; then\n    echo \"True\"\n    echo $VAR1      # <-- it won't work\nelse\n    echo \"False\"\nfi\n'\n```\n\nshell 变量$VAR1将不会传递到远程命令中\n\n# 可以带变量的多行远程命令\n\n为了能够传递变量，我们使用bash -c 命令\n\n```bash\nVAR1=\"Variable 1\"\nssh $HOST bash -c \"'\nls\npwd\nif true; then\n    echo $VAR1\nelse\n    echo \"False\"\nfi\n'\"\n```\n\n# 在远程机器上执行本地脚本\n\n可以简单的用stdin重定向实现\n\n```output\ncat script.sh\nls\npwd\nhostname\n```\n\n```bash\nssh $HOST < script.sh\n```\n\n# 使用Heredoc远程执行多行命令\n\n使用**heredoc**可能是最方便的远程执行多行命令的方式了。\n而且支持代码块外的变量传递。\n\n```bash\nVAR1=\"boo\"\nssh -T $HOST << EOSSH\nls\npwd\nif true; then\n  echo $VAR1\nelse\n  echo \"False\"\nfi\nEOSSH\n```\n\n如果需要在heredoc代码块内定义变量，那就在heredoc开始的标记上打上单引号\n\n```bash\nssh -T $HOST <<'EOSSH'\nVAR1=`pwd`\necho $VAR1\n\nVAR2=$(uname -a)\necho $VAR2\n\nEOSSH\n```\n\n如果出现以下的警告信息\n\n```output\nPseudo-terminal will not be allocated because stdin is not a terminal.\n```\n\n可以执行ssh命令的时候加上 -T 参数消除这个警告\n\n# 原文链接\n\n[here](https://zaiste.net/a_few_ways_to_execute_commands_remotely_using_ssh/)","slug":"ssh-remote-command","published":1,"updated":"2018-11-05T07:11:31.871Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtr000xgmo593j68jov","content":"<p>这篇文章将罗列几种使用SSH远程执行命令的方法。<br>假设 HOST 参数已经配置好了你的测试服务器信息。</p>\n<h1 id=\"单行命令\"><a href=\"#单行命令\" class=\"headerlink\" title=\"单行命令\"></a>单行命令</h1><p>执行一个单行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> ls</span><br></pre></td></tr></table></figure>\n<p>执行多个用;分割的内联命令 (inlined, separated with ;)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> ls; <span class=\"built_in\">pwd</span>; cat /path/to/remote/file</span><br></pre></td></tr></table></figure>\n<p>使用sudo权限执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> sudo ls /root</span><br><span class=\"line\">sudo: no tty present and no askpass program specified</span><br></pre></td></tr></table></figure>\n<p>sudo 需要与shell交互, 需要用 -t 参数开启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -t <span class=\"variable\">$HOST</span> sudo ls /root</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> zaiste:</span><br></pre></td></tr></table></figure>\n<h1 id=\"简单的多行命令\"><a href=\"#简单的多行命令\" class=\"headerlink\" title=\"简单的多行命令\"></a>简单的多行命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"Variable 1\"</span></span><br><span class=\"line\">ssh <span class=\"variable\">$HOST</span> <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">pwd</span></span><br><span class=\"line\"><span class=\"string\">if true; then</span></span><br><span class=\"line\"><span class=\"string\">    echo \"True\"</span></span><br><span class=\"line\"><span class=\"string\">    echo $VAR1      # &lt;-- it won'</span>t work</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"False\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"string\">'</span></span><br></pre></td></tr></table></figure>\n<p>shell 变量$VAR1将不会传递到远程命令中</p>\n<h1 id=\"可以带变量的多行远程命令\"><a href=\"#可以带变量的多行远程命令\" class=\"headerlink\" title=\"可以带变量的多行远程命令\"></a>可以带变量的多行远程命令</h1><p>为了能够传递变量，我们使用bash -c 命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"Variable 1\"</span></span><br><span class=\"line\">ssh <span class=\"variable\">$HOST</span> bash -c <span class=\"string\">\"'</span></span><br><span class=\"line\"><span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">pwd</span></span><br><span class=\"line\"><span class=\"string\">if true; then</span></span><br><span class=\"line\"><span class=\"string\">    echo <span class=\"variable\">$VAR1</span></span></span><br><span class=\"line\"><span class=\"string\">else</span></span><br><span class=\"line\"><span class=\"string\">    echo \"</span>False<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">fi</span></span><br><span class=\"line\"><span class=\"string\">'\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"在远程机器上执行本地脚本\"><a href=\"#在远程机器上执行本地脚本\" class=\"headerlink\" title=\"在远程机器上执行本地脚本\"></a>在远程机器上执行本地脚本</h1><p>可以简单的用stdin重定向实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat script.sh</span><br><span class=\"line\">ls</span><br><span class=\"line\">pwd</span><br><span class=\"line\">hostname</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> &lt; script.sh</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Heredoc远程执行多行命令\"><a href=\"#使用Heredoc远程执行多行命令\" class=\"headerlink\" title=\"使用Heredoc远程执行多行命令\"></a>使用Heredoc远程执行多行命令</h1><p>使用<strong>heredoc</strong>可能是最方便的远程执行多行命令的方式了。<br>而且支持代码块外的变量传递。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"boo\"</span></span><br><span class=\"line\">ssh -T <span class=\"variable\">$HOST</span> &lt;&lt; EOSSH</span><br><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">true</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$VAR1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"False\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">EOSSH</span><br></pre></td></tr></table></figure>\n<p>如果需要在heredoc代码块内定义变量，那就在heredoc开始的标记上打上单引号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T <span class=\"variable\">$HOST</span> &lt;&lt;<span class=\"string\">'EOSSH'</span></span><br><span class=\"line\">VAR1=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$VAR1</span></span><br><span class=\"line\"></span><br><span class=\"line\">VAR2=$(uname -a)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$VAR2</span></span><br><span class=\"line\"></span><br><span class=\"line\">EOSSH</span><br></pre></td></tr></table></figure>\n<p>如果出现以下的警告信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pseudo-terminal will not be allocated because stdin is not a terminal.</span><br></pre></td></tr></table></figure>\n<p>可以执行ssh命令的时候加上 -T 参数消除这个警告</p>\n<h1 id=\"原文链接\"><a href=\"#原文链接\" class=\"headerlink\" title=\"原文链接\"></a>原文链接</h1><p><a href=\"https://zaiste.net/a_few_ways_to_execute_commands_remotely_using_ssh/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇文章将罗列几种使用SSH远程执行命令的方法。<br>假设 HOST 参数已经配置好了你的测试服务器信息。</p>\n<h1 id=\"单行命令\"><a href=\"#单行命令\" class=\"headerlink\" title=\"单行命令\"></a>单行命令</h1><p>执行一个单行命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> ls</span><br></pre></td></tr></table></figure>\n<p>执行多个用;分割的内联命令 (inlined, separated with ;)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> ls; <span class=\"built_in\">pwd</span>; cat /path/to/remote/file</span><br></pre></td></tr></table></figure>\n<p>使用sudo权限执行命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> sudo ls /root</span><br><span class=\"line\">sudo: no tty present and no askpass program specified</span><br></pre></td></tr></table></figure>\n<p>sudo 需要与shell交互, 需要用 -t 参数开启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -t <span class=\"variable\">$HOST</span> sudo ls /root</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> zaiste:</span><br></pre></td></tr></table></figure>\n<h1 id=\"简单的多行命令\"><a href=\"#简单的多行命令\" class=\"headerlink\" title=\"简单的多行命令\"></a>简单的多行命令</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"Variable 1\"</span></span><br><span class=\"line\">ssh <span class=\"variable\">$HOST</span> <span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">pwd</span></span><br><span class=\"line\"><span class=\"string\">if true; then</span></span><br><span class=\"line\"><span class=\"string\">    echo \"True\"</span></span><br><span class=\"line\"><span class=\"string\">    echo $VAR1      # &lt;-- it won'</span>t work</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"False\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"string\">'</span></span><br></pre></td></tr></table></figure>\n<p>shell 变量$VAR1将不会传递到远程命令中</p>\n<h1 id=\"可以带变量的多行远程命令\"><a href=\"#可以带变量的多行远程命令\" class=\"headerlink\" title=\"可以带变量的多行远程命令\"></a>可以带变量的多行远程命令</h1><p>为了能够传递变量，我们使用bash -c 命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"Variable 1\"</span></span><br><span class=\"line\">ssh <span class=\"variable\">$HOST</span> bash -c <span class=\"string\">\"'</span></span><br><span class=\"line\"><span class=\"string\">ls</span></span><br><span class=\"line\"><span class=\"string\">pwd</span></span><br><span class=\"line\"><span class=\"string\">if true; then</span></span><br><span class=\"line\"><span class=\"string\">    echo <span class=\"variable\">$VAR1</span></span></span><br><span class=\"line\"><span class=\"string\">else</span></span><br><span class=\"line\"><span class=\"string\">    echo \"</span>False<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\">fi</span></span><br><span class=\"line\"><span class=\"string\">'\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"在远程机器上执行本地脚本\"><a href=\"#在远程机器上执行本地脚本\" class=\"headerlink\" title=\"在远程机器上执行本地脚本\"></a>在远程机器上执行本地脚本</h1><p>可以简单的用stdin重定向实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat script.sh</span><br><span class=\"line\">ls</span><br><span class=\"line\">pwd</span><br><span class=\"line\">hostname</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh <span class=\"variable\">$HOST</span> &lt; script.sh</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用Heredoc远程执行多行命令\"><a href=\"#使用Heredoc远程执行多行命令\" class=\"headerlink\" title=\"使用Heredoc远程执行多行命令\"></a>使用Heredoc远程执行多行命令</h1><p>使用<strong>heredoc</strong>可能是最方便的远程执行多行命令的方式了。<br>而且支持代码块外的变量传递。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAR1=<span class=\"string\">\"boo\"</span></span><br><span class=\"line\">ssh -T <span class=\"variable\">$HOST</span> &lt;&lt; EOSSH</span><br><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"built_in\">pwd</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"literal\">true</span>; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$VAR1</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"False\"</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">EOSSH</span><br></pre></td></tr></table></figure>\n<p>如果需要在heredoc代码块内定义变量，那就在heredoc开始的标记上打上单引号</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T <span class=\"variable\">$HOST</span> &lt;&lt;<span class=\"string\">'EOSSH'</span></span><br><span class=\"line\">VAR1=`<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$VAR1</span></span><br><span class=\"line\"></span><br><span class=\"line\">VAR2=$(uname -a)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$VAR2</span></span><br><span class=\"line\"></span><br><span class=\"line\">EOSSH</span><br></pre></td></tr></table></figure>\n<p>如果出现以下的警告信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pseudo-terminal will not be allocated because stdin is not a terminal.</span><br></pre></td></tr></table></figure>\n<p>可以执行ssh命令的时候加上 -T 参数消除这个警告</p>\n<h1 id=\"原文链接\"><a href=\"#原文链接\" class=\"headerlink\" title=\"原文链接\"></a>原文链接</h1><p><a href=\"https://zaiste.net/a_few_ways_to_execute_commands_remotely_using_ssh/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n"},{"title":"linux设置虚拟内存","date":"2019-03-08T01:53:50.000Z","_content":"\n1. 创建交换文件。\n\n```bash\ndd if=/dev/zero of=/opt/swap bs=4096 count=2048000\n```\n\n2. 使用以下命令来设置交换文件：\n\n```bash\nmkswap /opt/swap\n```\n\n3. 设置文件权限\n\n```bash\nchmod 0600 /opt/swap\n```\n\n4. 启用交换分区文件：\n要立即启用交换文件而不是在引导时自动启用，使用以下命令：\n\n```bash\nswapon /opt/swap\n```\n\n5. 下次启动启用swap。\n\n```bash\nvim /etc/fstab\n/opt/swap     swap      swap defaults 0 0\n```\n","source":"_posts/2019-03-set-swap.md","raw":"---\ntitle: linux设置虚拟内存\ndate: 2019-03-08 09:53:50\ntags: [bash,ssh,swap] \ncategories: [运维]\n---\n\n1. 创建交换文件。\n\n```bash\ndd if=/dev/zero of=/opt/swap bs=4096 count=2048000\n```\n\n2. 使用以下命令来设置交换文件：\n\n```bash\nmkswap /opt/swap\n```\n\n3. 设置文件权限\n\n```bash\nchmod 0600 /opt/swap\n```\n\n4. 启用交换分区文件：\n要立即启用交换文件而不是在引导时自动启用，使用以下命令：\n\n```bash\nswapon /opt/swap\n```\n\n5. 下次启动启用swap。\n\n```bash\nvim /etc/fstab\n/opt/swap     swap      swap defaults 0 0\n```\n","slug":"set-swap","published":1,"updated":"2019-03-08T01:58:24.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qts0010gmo536tdiwma","content":"<ol>\n<li>创建交换文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd <span class=\"keyword\">if</span>=/dev/zero of=/opt/swap bs=4096 count=2048000</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用以下命令来设置交换文件：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkswap /opt/swap</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>设置文件权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 0600 /opt/swap</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>启用交换分区文件：<br>要立即启用交换文件而不是在引导时自动启用，使用以下命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapon /opt/swap</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>下次启动启用swap。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/fstab</span><br><span class=\"line\">/opt/swap     swap      swap defaults 0 0</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>创建交换文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd <span class=\"keyword\">if</span>=/dev/zero of=/opt/swap bs=4096 count=2048000</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用以下命令来设置交换文件：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkswap /opt/swap</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>设置文件权限</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 0600 /opt/swap</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>启用交换分区文件：<br>要立即启用交换文件而不是在引导时自动启用，使用以下命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swapon /opt/swap</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>下次启动启用swap。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/fstab</span><br><span class=\"line\">/opt/swap     swap      swap defaults 0 0</span><br></pre></td></tr></table></figure>\n"},{"title":"SpringMVC源码解析(二) - 怎样找到处理Http请求的Method","date":"2018-11-17T04:02:24.000Z","_content":"\n# 1 获取 HandlerExecutionChain\n\nDispatchServlet 的 doDispatch 方法中调用了 getHandler 方法获取了执行请求的 HandlerExecutionChain。\nHandlerExecutionChain 包含了拦截器已经处理该请求的 handler 等信息。\n\n来看一下 doDispatch 的源码片段\n\n```java\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n  ...\n  ...\n        processedRequest = checkMultipart(request);\n        multipartRequestParsed = (processedRequest != request);\n\n        // Determine handler for the current request.\n        mappedHandler = getHandler(processedRequest);\n        if (mappedHandler == null) {\n          noHandlerFound(processedRequest, response);\n          return;\n        }\n  ...\n  ...\n\n```\n\n## 1.1 获取 HandlerExecutionChain\n\n在来看一下获取 HandlerExecutionChain 实例 mappedHandler 的方法 getHandler\n\n```java\n  @Nullable\n  protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n    if (this.handlerMappings != null) {\n      for (HandlerMapping hm : this.handlerMappings) {\n        if (logger.isTraceEnabled()) {\n          logger.trace(\n              \"Testing handler map [\" + hm + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n        }\n        HandlerExecutionChain handler = hm.getHandler(request);\n        if (handler != null) {\n          return handler;\n        }\n      }\n    }\n    return null;\n  }\n```\n\n这个方法，for 循环了 this.handlerMappings 列表，当列表中的 HandlerMapping 元素 hm 能取到 handler 则立即返回。\n那么这个类属性列表 this.handlerMappings 如何初始化的呢？\n我们来看一下它的初始化方法 DispatcherServlet.initHandlerMappings\n\n```java\n  private void initHandlerMappings(ApplicationContext context) {\n    this.handlerMappings = null;\n\n    if (this.detectAllHandlerMappings) {\n      // Find all HandlerMappings in the ApplicationContext, including ancestor contexts.\n      Map<String, HandlerMapping> matchingBeans =\n          BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);\n      if (!matchingBeans.isEmpty()) {\n        this.handlerMappings = new ArrayList<>(matchingBeans.values());\n        // We keep HandlerMappings in sorted order.\n        AnnotationAwareOrderComparator.sort(this.handlerMappings);\n      }\n    }\n    else {\n      try {\n        HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\n        this.handlerMappings = Collections.singletonList(hm);\n      }\n      catch (NoSuchBeanDefinitionException ex) {\n        // Ignore, we'll add a default HandlerMapping later.\n      }\n    }\n\n    // Ensure we have at least one HandlerMapping, by registering\n    // a default HandlerMapping if no other mappings are found.\n    if (this.handlerMappings == null) {\n      this.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\n      }\n    }\n  }\n```\n\n因为 this.detectAllHandlerMappings 默认为 true 所以初始化方法从 ApplicationContext 里获取了所有继承\nHandlerMapping 接口的 bean，并把它加入到了 handlerMappings 中。\nSpringBoot 为我们默认注入了一下几个 geHandlerMapping 的实现类\n\n- SimpleUrlHandlerMapping\n- RequestMappingHandlerMapping\n- BeanNameUrlHanderMapping\n- WebMvcConfigurationSupport\n- WelcomePageHanderMapping\n\n限于篇幅，这里将重点分析我们常用的 RequestMappingHandlerMapping。\n\nSpringbooot 框架中 ，RequestMappingHandlerMapping 是在哪里被注入的呢？\n是在 spring-boot-autoconfigure 包中的 WebMvcAutoConfiguration 里注入的。\n\n```java\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n    ValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n  ...\n  ...\n\n    @Bean\n    @Primary\n    @Override\n    public RequestMappingHandlerMapping requestMappingHandlerMapping() {\n      // Must be @Primary for MvcUriComponentsBuilder to work\n      return super.requestMappingHandlerMapping();\n    }\n\n  ...\n  ...\n}\n```\n\n## 1.2 RequestMappingHandlerMapping,构建所有@RequestMapping 接口的注册表\n\nRequestMappingHandlerMapping 实例中构建了一个 所有@RequestMapping 接口的注册表，我们来看一下它的初始化构建过程。\n\n### 1.2.1 RequestMappingHandlerMapping 类图\n\n{% asset_img RequestMappingHandlerMapping_uml_class.jpg RequestMappingHandlerMapping类图 %}\n\n### 1.2.2 RequestMappingHandlerMapping 初始化\n\nRequestMappingHandlerMapping 的父类 AbstractHandlerMethodMapping 实现了 InitializedBean 接口。\n在 spring 初始化 bean 的时候，如果 bean 实现了 InitializingBean 接口，会自动调用 afterPropertiesSet 方法。\n\n来看 RequestMappingHandlerMapping 的 afterPropertiesSet 方法：\n\n```java\npublic class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping\n    implements MatchableHandlerMapping, EmbeddedValueResolverAware {\n      ...\n      ...\n  @Override\n  public void afterPropertiesSet() {\n    this.config = new RequestMappingInfo.BuilderConfiguration();\n    this.config.setUrlPathHelper(getUrlPathHelper());\n    this.config.setPathMatcher(getPathMatcher());\n    this.config.setSuffixPatternMatch(this.useSuffixPatternMatch);\n    this.config.setTrailingSlashMatch(this.useTrailingSlashMatch);\n    this.config.setRegisteredSuffixPatternMatch(this.useRegisteredSuffixPatternMatch);\n    this.config.setContentNegotiationManager(getContentNegotiationManager());\n\n    super.afterPropertiesSet();\n  }\n}\n```\n\n在做了一些配置之后调用了祖先 AbstractHandlerMethodMapping 的 afterPropertiesSet() (父类 RequestMappingInfoHandlerMapping 没有相应实现)\n\n```java\npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements InitializingBean {\n  ...\n  ...\n  @Override\n  public void afterPropertiesSet() {\n    initHandlerMethods();\n  }\n  /**\n   * Scan beans in the ApplicationContext, detect and register handler methods.\n   * @see #isHandler(Class)\n   * @see #getMappingForMethod(Method, Class)\n   * @see #handlerMethodsInitialized(Map)\n   */\n  protected void initHandlerMethods() {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Looking for request mappings in application context: \" + getApplicationContext());\n    }\n    String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ?\n        BeanFactoryUtils.beanNamesForTypeIncludingAncestors(obtainApplicationContext(), Object.class) :\n        obtainApplicationContext().getBeanNamesForType(Object.class));\n\n    for (String beanName : beanNames) {\n      if (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) {\n        Class<?> beanType = null;\n        try {\n          beanType = obtainApplicationContext().getType(beanName);\n        }\n        catch (Throwable ex) {\n          // An unresolvable bean type, probably from a lazy bean - let's ignore it.\n          if (logger.isDebugEnabled()) {\n            logger.debug(\"Could not resolve target class for bean with name '\" + beanName + \"'\", ex);\n          }\n        }\n        if (beanType != null && isHandler(beanType)) {\n          detectHandlerMethods(beanName);\n        }\n      }\n    }\n    handlerMethodsInitialized(getHandlerMethods());\n  }\n}\n```\n\n```java\npublic class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping\n    implements MatchableHandlerMapping, EmbeddedValueResolverAware {\n  ...\n  ...\n  @Override\n  protected boolean isHandler(Class<?> beanType) {\n    return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||\n        AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class));\n  }\n  ...\n  ...\n}\n```\n\n这里调用了 initHandlerMethods 来查找所有 Handler 的方法。\n\n1. 第一步把 ApplicationContext 里所有的 bean 的名称全部去出来。\n2. 根据 bean 的名称获取 bean 的类型 beanType\n3. 调用 isHandler 判断是否是 Handler，\n4. RequestMappingHandlerMapping 的 isHanlder 方法，根据类型是否有@Controller 或\n   @RequestMapping 注解判断是否是 Handler\n5. 如果是 Handler 调用 detectHandlerMethods 注册所有的 handler 方法。\n\n我们来看一下 detectHandlerMethods 方法\n\n```java\npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements InitializingBean {\n  ...\n  ...\n  protected void detectHandlerMethods(final Object handler) {\n    Class<?> handlerType = (handler instanceof String ?\n        obtainApplicationContext().getType((String) handler) : handler.getClass());\n\n    if (handlerType != null) {\n      final Class<?> userType = ClassUtils.getUserClass(handlerType);\n      Map<Method, T> methods = MethodIntrospector.selectMethods(userType,\n          (MethodIntrospector.MetadataLookup<T>) method -> {\n            try {\n              return getMappingForMethod(method, userType);\n            }\n            catch (Throwable ex) {\n              throw new IllegalStateException(\"Invalid mapping on handler class [\" +\n                  userType.getName() + \"]: \" + method, ex);\n            }\n          });\n      if (logger.isDebugEnabled()) {\n        logger.debug(methods.size() + \" request handler methods found on \" + userType + \": \" + methods);\n      }\n      methods.forEach((method, mapping) -> {\n        Method invocableMethod = AopUtils.selectInvocableMethod(method, userType);\n        registerHandlerMethod(handler, invocableMethod, mapping);\n      });\n    }\n  }\n\n  /**\n   * Register a handler method and its unique mapping. Invoked at startup for\n   * each detected handler method.\n   * @param handler the bean name of the handler or the handler instance\n   * @param method the method to register\n   * @param mapping the mapping conditions associated with the handler method\n   * @throws IllegalStateException if another method was already registered\n   * under the same mapping\n   */\n  protected void registerHandlerMethod(Object handler, Method method, T mapping) {\n    this.mappingRegistry.register(mapping, handler, method);\n  }\n\n}\n```\n\n```java\npublic class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping\n    implements MatchableHandlerMapping, EmbeddedValueResolverAware {\n  ...\n  ...\n  @Override\n  @Nullable\n  protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {\n    RequestMappingInfo info = createRequestMappingInfo(method);\n    if (info != null) {\n      RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);\n      if (typeInfo != null) {\n        info = typeInfo.combine(info);\n      }\n    }\n    return info;\n  }\n\n  /**\n   * Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},\n   * supplying the appropriate custom {@link RequestCondition} depending on whether\n   * the supplied {@code annotatedElement} is a class or method.\n   * @see #getCustomTypeCondition(Class)\n   * @see #getCustomMethodCondition(Method)\n   */\n  @Nullable\n  private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {\n    RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);\n    RequestCondition<?> condition = (element instanceof Class ?\n        getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element));\n    return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null);\n  }\n\n\n\n}\n```\n\n```java\n    public void register(T mapping, Object handler, Method method) {\n      this.readWriteLock.writeLock().lock();\n      try {\n        HandlerMethod handlerMethod = createHandlerMethod(handler, method);\n        assertUniqueMethodMapping(handlerMethod, mapping);\n\n        if (logger.isInfoEnabled()) {\n          logger.info(\"Mapped \\\"\" + mapping + \"\\\" onto \" + handlerMethod);\n        }\n        this.mappingLookup.put(mapping, handlerMethod);\n\n        List<String> directUrls = getDirectUrls(mapping);\n        for (String url : directUrls) {\n          this.urlLookup.add(url, mapping);\n        }\n\n        String name = null;\n        if (getNamingStrategy() != null) {\n          name = getNamingStrategy().getName(handlerMethod, mapping);\n          addMappingName(name, handlerMethod);\n        }\n\n        CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);\n        if (corsConfig != null) {\n          this.corsLookup.put(handlerMethod, corsConfig);\n        }\n\n        this.registry.put(mapping, new MappingRegistration<>(mapping, handlerMethod, directUrls, name));\n      }\n      finally {\n        this.readWriteLock.writeLock().unlock();\n      }\n    }\n\n```\n\ndetectHandlerMethods\n\n1. 先调用了 MethodIntrospector.selectMethods。MethodIntrospector.selectMethods 的第二参数传入了一个 filter 函数。当返回不是 null 的时候，将会把返回结果保存在 Map<Method,T>中。\n2. filter 中调用了 getMappingForMethod 方法,传入 method 和 该方法所在类 handlerType\n3. 调用 createRequestMappingInfo 传入 method，如果这个方法被@RequestMapping 注解修饰，就会返回一个 RequestMappingInfo 实例，RequestMappingInfo 实例记录接口 method 处理 HttpRequest 的所有信息，包括路径，接口允许的方法，CORS 信息，已经各种限制条件。\n4. 如果返回实例不为 null，再次调用 getMappingForMethod 方法，传入该方法所在类型 handlerType 获得一个基于类的 RequestMappingInfo 实例，\n5. 两个实例 merge 得到一个新的 RequestMappingInfo 实例。（请求路径的合并等。。）\n6. 得到所有 methods 的 map 以后进行遍历，调用 registerHandlerMethod 进行注册保存。\n7. 调用了 this.mappingRegistry.register 进行注册。保存了 mapping(requestMappingInfo)和 handlerMethod 的关系，\n   以及 urlString 与 mapping(requestMappingInfo)的关系。\n\n### 1.2.3 初始化总结\n\n在完成了 RequestMappingHandlerMapping 的初始化以后，这个实例中便保存了我们所有@RequestMapping 修饰的接口信息。\n\n## 1.3 RequestMappingHanderMapping 获取 handlerChain\n\n我们回到文章的第一段代码\n\n```java\nprotected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n    if (this.handlerMappings != null) {\n      for (HandlerMapping hm : this.handlerMappings) {\n        if (logger.isTraceEnabled()) {\n          logger.trace(\n              \"Testing handler map [\" + hm + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n        }\n        HandlerExecutionChain handler = hm.getHandler(request);\n        if (handler != null) {\n          return handler;\n        }\n      }\n    }\n    return null;\n  }\n```\n\nhandlerMapping 调用了 getHandler(request)获取 HandlerExecutionChain 实例，那么我们来看一下\nRequestMappingHanderMapping 的 getHandler 方法。\n\n```java\npublic abstract class AbstractHandlerMapping extends WebApplicationObjectSupport implements HandlerMapping, Ordered {\n  @Override\n  @Nullable\n  public final HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n    Object handler = getHandlerInternal(request);\n    if (handler == null) {\n      handler = getDefaultHandler();\n    }\n    if (handler == null) {\n      return null;\n    }\n    // Bean name or resolved handler?\n    if (handler instanceof String) {\n      String handlerName = (String) handler;\n      handler = obtainApplicationContext().getBean(handlerName);\n\n    HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);\n    if (CorsUtils.isCorsRequest(request)) {\n      CorsConfiguration globalConfig = this.globalCorsConfigSource.getCorsConfiguration(request);\n      CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);\n      CorsConfiguration config = (globalConfig != null ? globalConfig.combine(handlerConfig) : handlerConfig);\n      executionChain = getCorsHandlerExecutionChain(request, executionChain, config);\n    }\n    return executionChain;\n  }\n}\n```\n\n调用了 getHandlerInternal,\n从 mappingRegistry 中获取匹配路径的 mapping，并排序获取最匹配的 handlerMethod\n\n```java\npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements InitializingBean {\n  @Override\n  protected HandlerMethod getHandlerInternal(HttpServletRequest request) throws Exception {\n    String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Looking up handler method for path \" + lookupPath);\n    }\n    this.mappingRegistry.acquireReadLock();\n    try {\n      HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);\n      if (logger.isDebugEnabled()) {\n        if (handlerMethod != null) {\n          logger.debug(\"Returning handler method [\" + handlerMethod + \"]\");\n        }\n        else {\n          logger.debug(\"Did not find handler method for [\" + lookupPath + \"]\");\n        }\n      }\n      return (handlerMethod != null ? handlerMethod.createWithResolvedBean() : null);\n    }\n    finally {\n      this.mappingRegistry.releaseReadLock();\n    }\n  }\n\n  protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletRequest request) throws Exception {\n    List<Match> matches = new ArrayList<>();\n    List<T> directPathMatches = this.mappingRegistry.getMappingsByUrl(lookupPath);\n    if (directPathMatches != null) {\n      addMatchingMappings(directPathMatches, matches, request);\n    }\n    if (matches.isEmpty()) {\n      // No choice but to go through all mappings...\n      addMatchingMappings(this.mappingRegistry.getMappings().keySet(), matches, request);\n    }\n\n    if (!matches.isEmpty()) {\n      Comparator<Match> comparator = new MatchComparator(getMappingComparator(request));\n      matches.sort(comparator);\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Found \" + matches.size() + \" matching mapping(s) for [\" + lookupPath + \"] : \" + matches);\n      }\n      Match bestMatch = matches.get(0);\n      if (matches.size() > 1) {\n        if (CorsUtils.isPreFlightRequest(request)) {\n          return PREFLIGHT_AMBIGUOUS_MATCH;\n        }\n        Match secondBestMatch = matches.get(1);\n        if (comparator.compare(bestMatch, secondBestMatch) == 0) {\n          Method m1 = bestMatch.handlerMethod.getMethod();\n          Method m2 = secondBestMatch.handlerMethod.getMethod();\n          throw new IllegalStateException(\"Ambiguous handler methods mapped for HTTP path '\" +\n              request.getRequestURL() + \"': {\" + m1 + \", \" + m2 + \"}\");\n        }\n      }\n      handleMatch(bestMatch.mapping, lookupPath, request);\n      return bestMatch.handlerMethod;\n    }\n    else {\n      return handleNoMatch(this.mappingRegistry.getMappings().keySet(), lookupPath, request);\n    }\n  }\n\n  private void addMatchingMappings(Collection<T> mappings, List<Match> matches, HttpServletRequest request) {\n    for (T mapping : mappings) {\n      T match = getMatchingMapping(mapping, request);\n      if (match != null) {\n        matches.add(new Match(match, this.mappingRegistry.getMappings().get(mapping)));\n      }\n    }\n  }\n}\n```\n\n获取到了 handlerMethod 以后调用了 getHandlerExecutionChain 把匹配的 Intercepters 组装成了 HandlerExecutionChain 对象\n\n```java\n  protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) {\n    HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ?\n        (HandlerExecutionChain) handler : new HandlerExecutionChain(handler));\n\n    String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);\n    for (HandlerInterceptor interceptor : this.adaptedInterceptors) {\n      if (interceptor instanceof MappedInterceptor) {\n        MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;\n        if (mappedInterceptor.matches(lookupPath, this.pathMatcher)) {\n          chain.addInterceptor(mappedInterceptor.getInterceptor());\n        }\n      }\n      else {\n        chain.addInterceptor(interceptor);\n      }\n    }\n    return chain;\n  }\n```\n\n# 2. 获取 HandlerAdapter\n\n回到 doDispatchServlet 的代码片段\n\n```java\n        // Determine handler adapter for the current request.\n        HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n```\n\n调用了 getHandlerAdapter 获取 HandlerAdapter 实例 ha。\nDispatchServlet 初始化的时候会把 appContext 里所有实现了 HandlerAdapter 的 bean 添加到 this.handlerAdapters 里，\n然后通过 for 循环查找支持传入的 handler 的 HanderAdapter。支持 RequestMappingHandlerMapping 的是\nRequestMappingHandlerAdapter。\n\n```java\n  protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {\n    if (this.handlerAdapters != null) {\n      for (HandlerAdapter ha : this.handlerAdapters) {\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"Testing handler adapter [\" + ha + \"]\");\n        }\n        if (ha.supports(handler)) {\n          return ha;\n        }\n      }\n    }\n    throw new ServletException(\"No adapter for handler [\" + handler +\n        \"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler\");\n  }\n```\n\nRequestMappingHandlerAdapter 的 support 方法，如果 handler 的类型是 HandlerMethod 即支持，RequestMappingHandlerMapping 返回的 handler 类型就是 HandlerMethod\n\n```java\n  @Override\n  public final boolean supports(Object handler) {\n    return (handler instanceof HandlerMethod && supportsInternal((HandlerMethod) handler));\n  }\n\n  @Override\n  protected boolean supportsInternal(HandlerMethod handlerMethod) {\n    return true;\n  }\n```\n\n# 3. HandlerAdapter 执行 handler 方法。\n\n回到 doDispatchServlet 的代码片段,获取 ha 以后，先调用了 preHandle 里的 interceptors，如果返回是 true，\n则执行了 ha.handle，执行了 handler。\n\n```java\n...\n...\n        if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n          return;\n        }\n\n        // Actually invoke the handler.\n        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n        if (asyncManager.isConcurrentHandlingStarted()) {\n          return;\n        }\n...\n...\n```\n\n# 3.1 RequestMappingHandlerAdapterd 的 handler 方法\n\n```java\n\t@Override\n\t@Nullable\n\tpublic final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler)\n\t\t\tthrows Exception {\n\n\t\treturn handleInternal(request, response, (HandlerMethod) handler);\n\t}\n```\n\nhandlerInternal 调用了 invokeHandlerMethod 执行 handlerMethod\n\n```java\n\t@Override\n\tprotected ModelAndView handleInternal(HttpServletRequest request,\n\t\t\tHttpServletResponse response, HandlerMethod handlerMethod) throws Exception {\n\n\t\tModelAndView mav;\n\t\tcheckRequest(request);\n\n\t\t// Execute invokeHandlerMethod in synchronized block if required.\n\t\tif (this.synchronizeOnSession) {\n\t\t\tHttpSession session = request.getSession(false);\n\t\t\tif (session != null) {\n\t\t\t\tObject mutex = WebUtils.getSessionMutex(session);\n\t\t\t\tsynchronized (mutex) {\n\t\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// No HttpSession available -> no mutex necessary\n\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No synchronization on session demanded at all...\n\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t}\n\n\t\tif (!response.containsHeader(HEADER_CACHE_CONTROL)) {\n\t\t\tif (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) {\n\t\t\t\tapplyCacheSeconds(response, this.cacheSecondsForSessionAttributeHandlers);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprepareResponse(response);\n\t\t\t}\n\t\t}\n\n\t\treturn mav;\n\t}\n```\n\ninvokeHandlerMethod 组装了两个实例，\nServletInvocableHandlerMethod 对象 invocableMethod 和 ModelAndViewContainer 对象 mavContainer\n\n把一堆必要的信息传递给了 invocableMethod,比如参数解释器 this.argumentResolvers,返回值处理器 this.retrunValueHandler 等。。。\n\n然后调用了方法 invocableMethod.invokeAndHandle(webRequest, mavContainer);\n\n```java\n\t@Nullable\n\tprotected ModelAndView invokeHandlerMethod(HttpServletRequest request,\n\t\t\tHttpServletResponse response, HandlerMethod handlerMethod) throws Exception {\n\n\t\tServletWebRequest webRequest = new ServletWebRequest(request, response);\n\t\ttry {\n\t\t\tWebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);\n\t\t\tModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);\n\n\t\t\tServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);\n\t\t\tif (this.argumentResolvers != null) {\n\t\t\t\tinvocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);\n\t\t\t}\n\t\t\tif (this.returnValueHandlers != null) {\n\t\t\t\tinvocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);\n\t\t\t}\n\t\t\tinvocableMethod.setDataBinderFactory(binderFactory);\n\t\t\tinvocableMethod.setParameterNameDiscoverer(this.parameterNameDiscoverer);\n\n\t\t\tModelAndViewContainer mavContainer = new ModelAndViewContainer();\n\t\t\tmavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));\n\t\t\tmodelFactory.initModel(webRequest, mavContainer, invocableMethod);\n\t\t\tmavContainer.setIgnoreDefaultModelOnRedirect(this.ignoreDefaultModelOnRedirect);\n\n\t\t\tAsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);\n\t\t\tasyncWebRequest.setTimeout(this.asyncRequestTimeout);\n\n\t\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\t\t\tasyncManager.setTaskExecutor(this.taskExecutor);\n\t\t\tasyncManager.setAsyncWebRequest(asyncWebRequest);\n\t\t\tasyncManager.registerCallableInterceptors(this.callableInterceptors);\n\t\t\tasyncManager.registerDeferredResultInterceptors(this.deferredResultInterceptors);\n\n\t\t\tif (asyncManager.hasConcurrentResult()) {\n\t\t\t\tObject result = asyncManager.getConcurrentResult();\n\t\t\t\tmavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[0];\n\t\t\t\tasyncManager.clearConcurrentResult();\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Found concurrent result value [\" + result + \"]\");\n\t\t\t\t}\n\t\t\t\tinvocableMethod = invocableMethod.wrapConcurrentResult(result);\n\t\t\t}\n\n\t\t\tinvocableMethod.invokeAndHandle(webRequest, mavContainer);\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn getModelAndView(mavContainer, modelFactory, webRequest);\n\t\t}\n\t\tfinally {\n\t\t\twebRequest.requestCompleted();\n    }\n  }\n```\n\ninvokeAndHandle 调用了 invokeAndHandle 处理请求，如果返回值为空且请求被处理则调用 mavContainer.setRequestHandled(true)后返回。\n如果返回值不为空则使用 this.returnValueHandlers.handleReturnValue 处理返回值。\n\n```java\n\tpublic void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);\n\t\tsetResponseStatus(webRequest);\n\n\t\tif (returnValue == null) {\n\t\t\tif (isRequestNotModified(webRequest) || getResponseStatus() != null || mavContainer.isRequestHandled()) {\n\t\t\t\tmavContainer.setRequestHandled(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (StringUtils.hasText(getResponseStatusReason())) {\n\t\t\tmavContainer.setRequestHandled(true);\n\t\t\treturn;\n\t\t}\n\n\t\tmavContainer.setRequestHandled(false);\n\t\tAssert.state(this.returnValueHandlers != null, \"No return value handlers\");\n\t\ttry {\n\t\t\tthis.returnValueHandlers.handleReturnValue(\n\t\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(getReturnValueHandlingErrorMessage(\"Error handling return value\", returnValue), ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\ngetMethodParameters 先调用了方法 getMethodArgumentValues(),getMethodArgumentValues 里为每一个参数检查是否有支持的参数解释器 argumentResovler，如果有的话则装备一个参数实例。如果找不到 methodResolver 的话就抛出异常。\n得到参数列表 args 以后调用 doInvoke()方法。\n\n```java\n  public Object invokeForRequest(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Invoking '\" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +\n\t\t\t\t\t\"' with arguments \" + Arrays.toString(args));\n\t\t}\n\t\tObject returnValue = doInvoke(args);\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Method [\" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +\n\t\t\t\t\t\"] returned [\" + returnValue + \"]\");\n\t\t}\n\t\treturn returnValue;\n\t}\n\n\n  /**\n\t * Get the method argument values for the current request.\n\t */\n\tprivate Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tMethodParameter[] parameters = getMethodParameters();\n\t\tObject[] args = new Object[parameters.length];\n\t\tfor (int i = 0; i < parameters.length; i++) {\n\t\t\tMethodParameter parameter = parameters[i];\n\t\t\tparameter.initParameterNameDiscovery(this.parameterNameDiscoverer);\n\t\t\targs[i] = resolveProvidedArgument(parameter, providedArgs);\n\t\t\tif (args[i] != null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.argumentResolvers.supportsParameter(parameter)) {\n\t\t\t\ttry {\n\t\t\t\t\targs[i] = this.argumentResolvers.resolveArgument(\n\t\t\t\t\t\t\tparameter, mavContainer, request, this.dataBinderFactory);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(getArgumentResolutionErrorMessage(\"Failed to resolve\", i), ex);\n\t\t\t\t\t}\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (args[i] == null) {\n\t\t\t\tthrow new IllegalStateException(\"Could not resolve method parameter at index \" +\n\t\t\t\t\t\tparameter.getParameterIndex() + \" in \" + parameter.getExecutable().toGenericString() +\n\t\t\t\t\t\t\": \" + getArgumentResolutionErrorMessage(\"No suitable resolver for\", i));\n\t\t\t}\n\t\t}\n\t\treturn args;\n\t}\n```\n\ndoInvoke 调用了 getBridgedMethod().invoke(getBean(), args) 执行了我们用@RequestMapping 修饰的方法，并返回了结果。\n\n```java\npublic class InvocableHandlerMethod\n...\n...\n\tprotected Object doInvoke(Object... args) throws Exception {\n\t\tReflectionUtils.makeAccessible(getBridgedMethod());\n\t\ttry {\n\t\t\treturn getBridgedMethod().invoke(getBean(), args);\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\tassertTargetBean(getBridgedMethod(), getBean(), args);\n\t\t\tString text = (ex.getMessage() != null ? ex.getMessage() : \"Illegal argument\");\n\t\t\tthrow new IllegalStateException(getInvocationErrorMessage(text, args), ex);\n\t\t}\n\t\tcatch (InvocationTargetException ex) {\n\t\t\t// Unwrap for HandlerExceptionResolvers ...\n\t\t\tThrowable targetException = ex.getTargetException();\n\t\t\tif (targetException instanceof RuntimeException) {\n\t\t\t\tthrow (RuntimeException) targetException;\n\t\t\t}\n\t\t\telse if (targetException instanceof Error) {\n\t\t\t\tthrow (Error) targetException;\n\t\t\t}\n\t\t\telse if (targetException instanceof Exception) {\n\t\t\t\tthrow (Exception) targetException;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString text = getInvocationErrorMessage(\"Failed to invoke handler method\", args);\n\t\t\t\tthrow new IllegalStateException(text, targetException);\n\t\t\t}\n\t\t}\n\t}\n  ...\n  ...\n}\n```\n","source":"_posts/2018-11-springmvc-find-request-handler.md","raw":"---\ntitle: SpringMVC源码解析(二) - 怎样找到处理Http请求的Method\ndate: 2018-11-17 12:02:24\ntags: [spring, 源码解析, springMVC]\ncategories: [spring源码解析]\n---\n\n# 1 获取 HandlerExecutionChain\n\nDispatchServlet 的 doDispatch 方法中调用了 getHandler 方法获取了执行请求的 HandlerExecutionChain。\nHandlerExecutionChain 包含了拦截器已经处理该请求的 handler 等信息。\n\n来看一下 doDispatch 的源码片段\n\n```java\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n  ...\n  ...\n        processedRequest = checkMultipart(request);\n        multipartRequestParsed = (processedRequest != request);\n\n        // Determine handler for the current request.\n        mappedHandler = getHandler(processedRequest);\n        if (mappedHandler == null) {\n          noHandlerFound(processedRequest, response);\n          return;\n        }\n  ...\n  ...\n\n```\n\n## 1.1 获取 HandlerExecutionChain\n\n在来看一下获取 HandlerExecutionChain 实例 mappedHandler 的方法 getHandler\n\n```java\n  @Nullable\n  protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n    if (this.handlerMappings != null) {\n      for (HandlerMapping hm : this.handlerMappings) {\n        if (logger.isTraceEnabled()) {\n          logger.trace(\n              \"Testing handler map [\" + hm + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n        }\n        HandlerExecutionChain handler = hm.getHandler(request);\n        if (handler != null) {\n          return handler;\n        }\n      }\n    }\n    return null;\n  }\n```\n\n这个方法，for 循环了 this.handlerMappings 列表，当列表中的 HandlerMapping 元素 hm 能取到 handler 则立即返回。\n那么这个类属性列表 this.handlerMappings 如何初始化的呢？\n我们来看一下它的初始化方法 DispatcherServlet.initHandlerMappings\n\n```java\n  private void initHandlerMappings(ApplicationContext context) {\n    this.handlerMappings = null;\n\n    if (this.detectAllHandlerMappings) {\n      // Find all HandlerMappings in the ApplicationContext, including ancestor contexts.\n      Map<String, HandlerMapping> matchingBeans =\n          BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);\n      if (!matchingBeans.isEmpty()) {\n        this.handlerMappings = new ArrayList<>(matchingBeans.values());\n        // We keep HandlerMappings in sorted order.\n        AnnotationAwareOrderComparator.sort(this.handlerMappings);\n      }\n    }\n    else {\n      try {\n        HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\n        this.handlerMappings = Collections.singletonList(hm);\n      }\n      catch (NoSuchBeanDefinitionException ex) {\n        // Ignore, we'll add a default HandlerMapping later.\n      }\n    }\n\n    // Ensure we have at least one HandlerMapping, by registering\n    // a default HandlerMapping if no other mappings are found.\n    if (this.handlerMappings == null) {\n      this.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\n      }\n    }\n  }\n```\n\n因为 this.detectAllHandlerMappings 默认为 true 所以初始化方法从 ApplicationContext 里获取了所有继承\nHandlerMapping 接口的 bean，并把它加入到了 handlerMappings 中。\nSpringBoot 为我们默认注入了一下几个 geHandlerMapping 的实现类\n\n- SimpleUrlHandlerMapping\n- RequestMappingHandlerMapping\n- BeanNameUrlHanderMapping\n- WebMvcConfigurationSupport\n- WelcomePageHanderMapping\n\n限于篇幅，这里将重点分析我们常用的 RequestMappingHandlerMapping。\n\nSpringbooot 框架中 ，RequestMappingHandlerMapping 是在哪里被注入的呢？\n是在 spring-boot-autoconfigure 包中的 WebMvcAutoConfiguration 里注入的。\n\n```java\n@Configuration\n@ConditionalOnWebApplication(type = Type.SERVLET)\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,\n    ValidationAutoConfiguration.class })\npublic class WebMvcAutoConfiguration {\n  ...\n  ...\n\n    @Bean\n    @Primary\n    @Override\n    public RequestMappingHandlerMapping requestMappingHandlerMapping() {\n      // Must be @Primary for MvcUriComponentsBuilder to work\n      return super.requestMappingHandlerMapping();\n    }\n\n  ...\n  ...\n}\n```\n\n## 1.2 RequestMappingHandlerMapping,构建所有@RequestMapping 接口的注册表\n\nRequestMappingHandlerMapping 实例中构建了一个 所有@RequestMapping 接口的注册表，我们来看一下它的初始化构建过程。\n\n### 1.2.1 RequestMappingHandlerMapping 类图\n\n{% asset_img RequestMappingHandlerMapping_uml_class.jpg RequestMappingHandlerMapping类图 %}\n\n### 1.2.2 RequestMappingHandlerMapping 初始化\n\nRequestMappingHandlerMapping 的父类 AbstractHandlerMethodMapping 实现了 InitializedBean 接口。\n在 spring 初始化 bean 的时候，如果 bean 实现了 InitializingBean 接口，会自动调用 afterPropertiesSet 方法。\n\n来看 RequestMappingHandlerMapping 的 afterPropertiesSet 方法：\n\n```java\npublic class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping\n    implements MatchableHandlerMapping, EmbeddedValueResolverAware {\n      ...\n      ...\n  @Override\n  public void afterPropertiesSet() {\n    this.config = new RequestMappingInfo.BuilderConfiguration();\n    this.config.setUrlPathHelper(getUrlPathHelper());\n    this.config.setPathMatcher(getPathMatcher());\n    this.config.setSuffixPatternMatch(this.useSuffixPatternMatch);\n    this.config.setTrailingSlashMatch(this.useTrailingSlashMatch);\n    this.config.setRegisteredSuffixPatternMatch(this.useRegisteredSuffixPatternMatch);\n    this.config.setContentNegotiationManager(getContentNegotiationManager());\n\n    super.afterPropertiesSet();\n  }\n}\n```\n\n在做了一些配置之后调用了祖先 AbstractHandlerMethodMapping 的 afterPropertiesSet() (父类 RequestMappingInfoHandlerMapping 没有相应实现)\n\n```java\npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements InitializingBean {\n  ...\n  ...\n  @Override\n  public void afterPropertiesSet() {\n    initHandlerMethods();\n  }\n  /**\n   * Scan beans in the ApplicationContext, detect and register handler methods.\n   * @see #isHandler(Class)\n   * @see #getMappingForMethod(Method, Class)\n   * @see #handlerMethodsInitialized(Map)\n   */\n  protected void initHandlerMethods() {\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Looking for request mappings in application context: \" + getApplicationContext());\n    }\n    String[] beanNames = (this.detectHandlerMethodsInAncestorContexts ?\n        BeanFactoryUtils.beanNamesForTypeIncludingAncestors(obtainApplicationContext(), Object.class) :\n        obtainApplicationContext().getBeanNamesForType(Object.class));\n\n    for (String beanName : beanNames) {\n      if (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) {\n        Class<?> beanType = null;\n        try {\n          beanType = obtainApplicationContext().getType(beanName);\n        }\n        catch (Throwable ex) {\n          // An unresolvable bean type, probably from a lazy bean - let's ignore it.\n          if (logger.isDebugEnabled()) {\n            logger.debug(\"Could not resolve target class for bean with name '\" + beanName + \"'\", ex);\n          }\n        }\n        if (beanType != null && isHandler(beanType)) {\n          detectHandlerMethods(beanName);\n        }\n      }\n    }\n    handlerMethodsInitialized(getHandlerMethods());\n  }\n}\n```\n\n```java\npublic class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping\n    implements MatchableHandlerMapping, EmbeddedValueResolverAware {\n  ...\n  ...\n  @Override\n  protected boolean isHandler(Class<?> beanType) {\n    return (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||\n        AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class));\n  }\n  ...\n  ...\n}\n```\n\n这里调用了 initHandlerMethods 来查找所有 Handler 的方法。\n\n1. 第一步把 ApplicationContext 里所有的 bean 的名称全部去出来。\n2. 根据 bean 的名称获取 bean 的类型 beanType\n3. 调用 isHandler 判断是否是 Handler，\n4. RequestMappingHandlerMapping 的 isHanlder 方法，根据类型是否有@Controller 或\n   @RequestMapping 注解判断是否是 Handler\n5. 如果是 Handler 调用 detectHandlerMethods 注册所有的 handler 方法。\n\n我们来看一下 detectHandlerMethods 方法\n\n```java\npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements InitializingBean {\n  ...\n  ...\n  protected void detectHandlerMethods(final Object handler) {\n    Class<?> handlerType = (handler instanceof String ?\n        obtainApplicationContext().getType((String) handler) : handler.getClass());\n\n    if (handlerType != null) {\n      final Class<?> userType = ClassUtils.getUserClass(handlerType);\n      Map<Method, T> methods = MethodIntrospector.selectMethods(userType,\n          (MethodIntrospector.MetadataLookup<T>) method -> {\n            try {\n              return getMappingForMethod(method, userType);\n            }\n            catch (Throwable ex) {\n              throw new IllegalStateException(\"Invalid mapping on handler class [\" +\n                  userType.getName() + \"]: \" + method, ex);\n            }\n          });\n      if (logger.isDebugEnabled()) {\n        logger.debug(methods.size() + \" request handler methods found on \" + userType + \": \" + methods);\n      }\n      methods.forEach((method, mapping) -> {\n        Method invocableMethod = AopUtils.selectInvocableMethod(method, userType);\n        registerHandlerMethod(handler, invocableMethod, mapping);\n      });\n    }\n  }\n\n  /**\n   * Register a handler method and its unique mapping. Invoked at startup for\n   * each detected handler method.\n   * @param handler the bean name of the handler or the handler instance\n   * @param method the method to register\n   * @param mapping the mapping conditions associated with the handler method\n   * @throws IllegalStateException if another method was already registered\n   * under the same mapping\n   */\n  protected void registerHandlerMethod(Object handler, Method method, T mapping) {\n    this.mappingRegistry.register(mapping, handler, method);\n  }\n\n}\n```\n\n```java\npublic class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping\n    implements MatchableHandlerMapping, EmbeddedValueResolverAware {\n  ...\n  ...\n  @Override\n  @Nullable\n  protected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType) {\n    RequestMappingInfo info = createRequestMappingInfo(method);\n    if (info != null) {\n      RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);\n      if (typeInfo != null) {\n        info = typeInfo.combine(info);\n      }\n    }\n    return info;\n  }\n\n  /**\n   * Delegates to {@link #createRequestMappingInfo(RequestMapping, RequestCondition)},\n   * supplying the appropriate custom {@link RequestCondition} depending on whether\n   * the supplied {@code annotatedElement} is a class or method.\n   * @see #getCustomTypeCondition(Class)\n   * @see #getCustomMethodCondition(Method)\n   */\n  @Nullable\n  private RequestMappingInfo createRequestMappingInfo(AnnotatedElement element) {\n    RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);\n    RequestCondition<?> condition = (element instanceof Class ?\n        getCustomTypeCondition((Class<?>) element) : getCustomMethodCondition((Method) element));\n    return (requestMapping != null ? createRequestMappingInfo(requestMapping, condition) : null);\n  }\n\n\n\n}\n```\n\n```java\n    public void register(T mapping, Object handler, Method method) {\n      this.readWriteLock.writeLock().lock();\n      try {\n        HandlerMethod handlerMethod = createHandlerMethod(handler, method);\n        assertUniqueMethodMapping(handlerMethod, mapping);\n\n        if (logger.isInfoEnabled()) {\n          logger.info(\"Mapped \\\"\" + mapping + \"\\\" onto \" + handlerMethod);\n        }\n        this.mappingLookup.put(mapping, handlerMethod);\n\n        List<String> directUrls = getDirectUrls(mapping);\n        for (String url : directUrls) {\n          this.urlLookup.add(url, mapping);\n        }\n\n        String name = null;\n        if (getNamingStrategy() != null) {\n          name = getNamingStrategy().getName(handlerMethod, mapping);\n          addMappingName(name, handlerMethod);\n        }\n\n        CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);\n        if (corsConfig != null) {\n          this.corsLookup.put(handlerMethod, corsConfig);\n        }\n\n        this.registry.put(mapping, new MappingRegistration<>(mapping, handlerMethod, directUrls, name));\n      }\n      finally {\n        this.readWriteLock.writeLock().unlock();\n      }\n    }\n\n```\n\ndetectHandlerMethods\n\n1. 先调用了 MethodIntrospector.selectMethods。MethodIntrospector.selectMethods 的第二参数传入了一个 filter 函数。当返回不是 null 的时候，将会把返回结果保存在 Map<Method,T>中。\n2. filter 中调用了 getMappingForMethod 方法,传入 method 和 该方法所在类 handlerType\n3. 调用 createRequestMappingInfo 传入 method，如果这个方法被@RequestMapping 注解修饰，就会返回一个 RequestMappingInfo 实例，RequestMappingInfo 实例记录接口 method 处理 HttpRequest 的所有信息，包括路径，接口允许的方法，CORS 信息，已经各种限制条件。\n4. 如果返回实例不为 null，再次调用 getMappingForMethod 方法，传入该方法所在类型 handlerType 获得一个基于类的 RequestMappingInfo 实例，\n5. 两个实例 merge 得到一个新的 RequestMappingInfo 实例。（请求路径的合并等。。）\n6. 得到所有 methods 的 map 以后进行遍历，调用 registerHandlerMethod 进行注册保存。\n7. 调用了 this.mappingRegistry.register 进行注册。保存了 mapping(requestMappingInfo)和 handlerMethod 的关系，\n   以及 urlString 与 mapping(requestMappingInfo)的关系。\n\n### 1.2.3 初始化总结\n\n在完成了 RequestMappingHandlerMapping 的初始化以后，这个实例中便保存了我们所有@RequestMapping 修饰的接口信息。\n\n## 1.3 RequestMappingHanderMapping 获取 handlerChain\n\n我们回到文章的第一段代码\n\n```java\nprotected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n    if (this.handlerMappings != null) {\n      for (HandlerMapping hm : this.handlerMappings) {\n        if (logger.isTraceEnabled()) {\n          logger.trace(\n              \"Testing handler map [\" + hm + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n        }\n        HandlerExecutionChain handler = hm.getHandler(request);\n        if (handler != null) {\n          return handler;\n        }\n      }\n    }\n    return null;\n  }\n```\n\nhandlerMapping 调用了 getHandler(request)获取 HandlerExecutionChain 实例，那么我们来看一下\nRequestMappingHanderMapping 的 getHandler 方法。\n\n```java\npublic abstract class AbstractHandlerMapping extends WebApplicationObjectSupport implements HandlerMapping, Ordered {\n  @Override\n  @Nullable\n  public final HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception {\n    Object handler = getHandlerInternal(request);\n    if (handler == null) {\n      handler = getDefaultHandler();\n    }\n    if (handler == null) {\n      return null;\n    }\n    // Bean name or resolved handler?\n    if (handler instanceof String) {\n      String handlerName = (String) handler;\n      handler = obtainApplicationContext().getBean(handlerName);\n\n    HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);\n    if (CorsUtils.isCorsRequest(request)) {\n      CorsConfiguration globalConfig = this.globalCorsConfigSource.getCorsConfiguration(request);\n      CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);\n      CorsConfiguration config = (globalConfig != null ? globalConfig.combine(handlerConfig) : handlerConfig);\n      executionChain = getCorsHandlerExecutionChain(request, executionChain, config);\n    }\n    return executionChain;\n  }\n}\n```\n\n调用了 getHandlerInternal,\n从 mappingRegistry 中获取匹配路径的 mapping，并排序获取最匹配的 handlerMethod\n\n```java\npublic abstract class AbstractHandlerMethodMapping<T> extends AbstractHandlerMapping implements InitializingBean {\n  @Override\n  protected HandlerMethod getHandlerInternal(HttpServletRequest request) throws Exception {\n    String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Looking up handler method for path \" + lookupPath);\n    }\n    this.mappingRegistry.acquireReadLock();\n    try {\n      HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);\n      if (logger.isDebugEnabled()) {\n        if (handlerMethod != null) {\n          logger.debug(\"Returning handler method [\" + handlerMethod + \"]\");\n        }\n        else {\n          logger.debug(\"Did not find handler method for [\" + lookupPath + \"]\");\n        }\n      }\n      return (handlerMethod != null ? handlerMethod.createWithResolvedBean() : null);\n    }\n    finally {\n      this.mappingRegistry.releaseReadLock();\n    }\n  }\n\n  protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletRequest request) throws Exception {\n    List<Match> matches = new ArrayList<>();\n    List<T> directPathMatches = this.mappingRegistry.getMappingsByUrl(lookupPath);\n    if (directPathMatches != null) {\n      addMatchingMappings(directPathMatches, matches, request);\n    }\n    if (matches.isEmpty()) {\n      // No choice but to go through all mappings...\n      addMatchingMappings(this.mappingRegistry.getMappings().keySet(), matches, request);\n    }\n\n    if (!matches.isEmpty()) {\n      Comparator<Match> comparator = new MatchComparator(getMappingComparator(request));\n      matches.sort(comparator);\n      if (logger.isTraceEnabled()) {\n        logger.trace(\"Found \" + matches.size() + \" matching mapping(s) for [\" + lookupPath + \"] : \" + matches);\n      }\n      Match bestMatch = matches.get(0);\n      if (matches.size() > 1) {\n        if (CorsUtils.isPreFlightRequest(request)) {\n          return PREFLIGHT_AMBIGUOUS_MATCH;\n        }\n        Match secondBestMatch = matches.get(1);\n        if (comparator.compare(bestMatch, secondBestMatch) == 0) {\n          Method m1 = bestMatch.handlerMethod.getMethod();\n          Method m2 = secondBestMatch.handlerMethod.getMethod();\n          throw new IllegalStateException(\"Ambiguous handler methods mapped for HTTP path '\" +\n              request.getRequestURL() + \"': {\" + m1 + \", \" + m2 + \"}\");\n        }\n      }\n      handleMatch(bestMatch.mapping, lookupPath, request);\n      return bestMatch.handlerMethod;\n    }\n    else {\n      return handleNoMatch(this.mappingRegistry.getMappings().keySet(), lookupPath, request);\n    }\n  }\n\n  private void addMatchingMappings(Collection<T> mappings, List<Match> matches, HttpServletRequest request) {\n    for (T mapping : mappings) {\n      T match = getMatchingMapping(mapping, request);\n      if (match != null) {\n        matches.add(new Match(match, this.mappingRegistry.getMappings().get(mapping)));\n      }\n    }\n  }\n}\n```\n\n获取到了 handlerMethod 以后调用了 getHandlerExecutionChain 把匹配的 Intercepters 组装成了 HandlerExecutionChain 对象\n\n```java\n  protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) {\n    HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ?\n        (HandlerExecutionChain) handler : new HandlerExecutionChain(handler));\n\n    String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);\n    for (HandlerInterceptor interceptor : this.adaptedInterceptors) {\n      if (interceptor instanceof MappedInterceptor) {\n        MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;\n        if (mappedInterceptor.matches(lookupPath, this.pathMatcher)) {\n          chain.addInterceptor(mappedInterceptor.getInterceptor());\n        }\n      }\n      else {\n        chain.addInterceptor(interceptor);\n      }\n    }\n    return chain;\n  }\n```\n\n# 2. 获取 HandlerAdapter\n\n回到 doDispatchServlet 的代码片段\n\n```java\n        // Determine handler adapter for the current request.\n        HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n```\n\n调用了 getHandlerAdapter 获取 HandlerAdapter 实例 ha。\nDispatchServlet 初始化的时候会把 appContext 里所有实现了 HandlerAdapter 的 bean 添加到 this.handlerAdapters 里，\n然后通过 for 循环查找支持传入的 handler 的 HanderAdapter。支持 RequestMappingHandlerMapping 的是\nRequestMappingHandlerAdapter。\n\n```java\n  protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException {\n    if (this.handlerAdapters != null) {\n      for (HandlerAdapter ha : this.handlerAdapters) {\n        if (logger.isTraceEnabled()) {\n          logger.trace(\"Testing handler adapter [\" + ha + \"]\");\n        }\n        if (ha.supports(handler)) {\n          return ha;\n        }\n      }\n    }\n    throw new ServletException(\"No adapter for handler [\" + handler +\n        \"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler\");\n  }\n```\n\nRequestMappingHandlerAdapter 的 support 方法，如果 handler 的类型是 HandlerMethod 即支持，RequestMappingHandlerMapping 返回的 handler 类型就是 HandlerMethod\n\n```java\n  @Override\n  public final boolean supports(Object handler) {\n    return (handler instanceof HandlerMethod && supportsInternal((HandlerMethod) handler));\n  }\n\n  @Override\n  protected boolean supportsInternal(HandlerMethod handlerMethod) {\n    return true;\n  }\n```\n\n# 3. HandlerAdapter 执行 handler 方法。\n\n回到 doDispatchServlet 的代码片段,获取 ha 以后，先调用了 preHandle 里的 interceptors，如果返回是 true，\n则执行了 ha.handle，执行了 handler。\n\n```java\n...\n...\n        if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n          return;\n        }\n\n        // Actually invoke the handler.\n        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n        if (asyncManager.isConcurrentHandlingStarted()) {\n          return;\n        }\n...\n...\n```\n\n# 3.1 RequestMappingHandlerAdapterd 的 handler 方法\n\n```java\n\t@Override\n\t@Nullable\n\tpublic final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler)\n\t\t\tthrows Exception {\n\n\t\treturn handleInternal(request, response, (HandlerMethod) handler);\n\t}\n```\n\nhandlerInternal 调用了 invokeHandlerMethod 执行 handlerMethod\n\n```java\n\t@Override\n\tprotected ModelAndView handleInternal(HttpServletRequest request,\n\t\t\tHttpServletResponse response, HandlerMethod handlerMethod) throws Exception {\n\n\t\tModelAndView mav;\n\t\tcheckRequest(request);\n\n\t\t// Execute invokeHandlerMethod in synchronized block if required.\n\t\tif (this.synchronizeOnSession) {\n\t\t\tHttpSession session = request.getSession(false);\n\t\t\tif (session != null) {\n\t\t\t\tObject mutex = WebUtils.getSessionMutex(session);\n\t\t\t\tsynchronized (mutex) {\n\t\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// No HttpSession available -> no mutex necessary\n\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No synchronization on session demanded at all...\n\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);\n\t\t}\n\n\t\tif (!response.containsHeader(HEADER_CACHE_CONTROL)) {\n\t\t\tif (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) {\n\t\t\t\tapplyCacheSeconds(response, this.cacheSecondsForSessionAttributeHandlers);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprepareResponse(response);\n\t\t\t}\n\t\t}\n\n\t\treturn mav;\n\t}\n```\n\ninvokeHandlerMethod 组装了两个实例，\nServletInvocableHandlerMethod 对象 invocableMethod 和 ModelAndViewContainer 对象 mavContainer\n\n把一堆必要的信息传递给了 invocableMethod,比如参数解释器 this.argumentResolvers,返回值处理器 this.retrunValueHandler 等。。。\n\n然后调用了方法 invocableMethod.invokeAndHandle(webRequest, mavContainer);\n\n```java\n\t@Nullable\n\tprotected ModelAndView invokeHandlerMethod(HttpServletRequest request,\n\t\t\tHttpServletResponse response, HandlerMethod handlerMethod) throws Exception {\n\n\t\tServletWebRequest webRequest = new ServletWebRequest(request, response);\n\t\ttry {\n\t\t\tWebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);\n\t\t\tModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);\n\n\t\t\tServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);\n\t\t\tif (this.argumentResolvers != null) {\n\t\t\t\tinvocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);\n\t\t\t}\n\t\t\tif (this.returnValueHandlers != null) {\n\t\t\t\tinvocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);\n\t\t\t}\n\t\t\tinvocableMethod.setDataBinderFactory(binderFactory);\n\t\t\tinvocableMethod.setParameterNameDiscoverer(this.parameterNameDiscoverer);\n\n\t\t\tModelAndViewContainer mavContainer = new ModelAndViewContainer();\n\t\t\tmavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));\n\t\t\tmodelFactory.initModel(webRequest, mavContainer, invocableMethod);\n\t\t\tmavContainer.setIgnoreDefaultModelOnRedirect(this.ignoreDefaultModelOnRedirect);\n\n\t\t\tAsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);\n\t\t\tasyncWebRequest.setTimeout(this.asyncRequestTimeout);\n\n\t\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\t\t\tasyncManager.setTaskExecutor(this.taskExecutor);\n\t\t\tasyncManager.setAsyncWebRequest(asyncWebRequest);\n\t\t\tasyncManager.registerCallableInterceptors(this.callableInterceptors);\n\t\t\tasyncManager.registerDeferredResultInterceptors(this.deferredResultInterceptors);\n\n\t\t\tif (asyncManager.hasConcurrentResult()) {\n\t\t\t\tObject result = asyncManager.getConcurrentResult();\n\t\t\t\tmavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[0];\n\t\t\t\tasyncManager.clearConcurrentResult();\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Found concurrent result value [\" + result + \"]\");\n\t\t\t\t}\n\t\t\t\tinvocableMethod = invocableMethod.wrapConcurrentResult(result);\n\t\t\t}\n\n\t\t\tinvocableMethod.invokeAndHandle(webRequest, mavContainer);\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn getModelAndView(mavContainer, modelFactory, webRequest);\n\t\t}\n\t\tfinally {\n\t\t\twebRequest.requestCompleted();\n    }\n  }\n```\n\ninvokeAndHandle 调用了 invokeAndHandle 处理请求，如果返回值为空且请求被处理则调用 mavContainer.setRequestHandled(true)后返回。\n如果返回值不为空则使用 this.returnValueHandlers.handleReturnValue 处理返回值。\n\n```java\n\tpublic void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);\n\t\tsetResponseStatus(webRequest);\n\n\t\tif (returnValue == null) {\n\t\t\tif (isRequestNotModified(webRequest) || getResponseStatus() != null || mavContainer.isRequestHandled()) {\n\t\t\t\tmavContainer.setRequestHandled(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (StringUtils.hasText(getResponseStatusReason())) {\n\t\t\tmavContainer.setRequestHandled(true);\n\t\t\treturn;\n\t\t}\n\n\t\tmavContainer.setRequestHandled(false);\n\t\tAssert.state(this.returnValueHandlers != null, \"No return value handlers\");\n\t\ttry {\n\t\t\tthis.returnValueHandlers.handleReturnValue(\n\t\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(getReturnValueHandlingErrorMessage(\"Error handling return value\", returnValue), ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\ngetMethodParameters 先调用了方法 getMethodArgumentValues(),getMethodArgumentValues 里为每一个参数检查是否有支持的参数解释器 argumentResovler，如果有的话则装备一个参数实例。如果找不到 methodResolver 的话就抛出异常。\n得到参数列表 args 以后调用 doInvoke()方法。\n\n```java\n  public Object invokeForRequest(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Invoking '\" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +\n\t\t\t\t\t\"' with arguments \" + Arrays.toString(args));\n\t\t}\n\t\tObject returnValue = doInvoke(args);\n\t\tif (logger.isTraceEnabled()) {\n\t\t\tlogger.trace(\"Method [\" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +\n\t\t\t\t\t\"] returned [\" + returnValue + \"]\");\n\t\t}\n\t\treturn returnValue;\n\t}\n\n\n  /**\n\t * Get the method argument values for the current request.\n\t */\n\tprivate Object[] getMethodArgumentValues(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tMethodParameter[] parameters = getMethodParameters();\n\t\tObject[] args = new Object[parameters.length];\n\t\tfor (int i = 0; i < parameters.length; i++) {\n\t\t\tMethodParameter parameter = parameters[i];\n\t\t\tparameter.initParameterNameDiscovery(this.parameterNameDiscoverer);\n\t\t\targs[i] = resolveProvidedArgument(parameter, providedArgs);\n\t\t\tif (args[i] != null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.argumentResolvers.supportsParameter(parameter)) {\n\t\t\t\ttry {\n\t\t\t\t\targs[i] = this.argumentResolvers.resolveArgument(\n\t\t\t\t\t\t\tparameter, mavContainer, request, this.dataBinderFactory);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(getArgumentResolutionErrorMessage(\"Failed to resolve\", i), ex);\n\t\t\t\t\t}\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (args[i] == null) {\n\t\t\t\tthrow new IllegalStateException(\"Could not resolve method parameter at index \" +\n\t\t\t\t\t\tparameter.getParameterIndex() + \" in \" + parameter.getExecutable().toGenericString() +\n\t\t\t\t\t\t\": \" + getArgumentResolutionErrorMessage(\"No suitable resolver for\", i));\n\t\t\t}\n\t\t}\n\t\treturn args;\n\t}\n```\n\ndoInvoke 调用了 getBridgedMethod().invoke(getBean(), args) 执行了我们用@RequestMapping 修饰的方法，并返回了结果。\n\n```java\npublic class InvocableHandlerMethod\n...\n...\n\tprotected Object doInvoke(Object... args) throws Exception {\n\t\tReflectionUtils.makeAccessible(getBridgedMethod());\n\t\ttry {\n\t\t\treturn getBridgedMethod().invoke(getBean(), args);\n\t\t}\n\t\tcatch (IllegalArgumentException ex) {\n\t\t\tassertTargetBean(getBridgedMethod(), getBean(), args);\n\t\t\tString text = (ex.getMessage() != null ? ex.getMessage() : \"Illegal argument\");\n\t\t\tthrow new IllegalStateException(getInvocationErrorMessage(text, args), ex);\n\t\t}\n\t\tcatch (InvocationTargetException ex) {\n\t\t\t// Unwrap for HandlerExceptionResolvers ...\n\t\t\tThrowable targetException = ex.getTargetException();\n\t\t\tif (targetException instanceof RuntimeException) {\n\t\t\t\tthrow (RuntimeException) targetException;\n\t\t\t}\n\t\t\telse if (targetException instanceof Error) {\n\t\t\t\tthrow (Error) targetException;\n\t\t\t}\n\t\t\telse if (targetException instanceof Exception) {\n\t\t\t\tthrow (Exception) targetException;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString text = getInvocationErrorMessage(\"Failed to invoke handler method\", args);\n\t\t\t\tthrow new IllegalStateException(text, targetException);\n\t\t\t}\n\t\t}\n\t}\n  ...\n  ...\n}\n```\n","slug":"springmvc-find-request-handler","published":1,"updated":"2018-11-22T01:43:55.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtt0014gmo5f44o2e3b","content":"<h1 id=\"1-获取-HandlerExecutionChain\"><a href=\"#1-获取-HandlerExecutionChain\" class=\"headerlink\" title=\"1 获取 HandlerExecutionChain\"></a>1 获取 HandlerExecutionChain</h1><p>DispatchServlet 的 doDispatch 方法中调用了 getHandler 方法获取了执行请求的 HandlerExecutionChain。<br>HandlerExecutionChain 包含了拦截器已经处理该请求的 handler 等信息。</p>\n<p>来看一下 doDispatch 的源码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">        processedRequest = checkMultipart(request);</span><br><span class=\"line\">        multipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">        mappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mappedHandler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          noHandlerFound(processedRequest, response);</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-1-获取-HandlerExecutionChain\"><a href=\"#1-1-获取-HandlerExecutionChain\" class=\"headerlink\" title=\"1.1 获取 HandlerExecutionChain\"></a>1.1 获取 HandlerExecutionChain</h2><p>在来看一下获取 HandlerExecutionChain 实例 mappedHandler 的方法 getHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerMappings != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HandlerMapping hm : <span class=\"keyword\">this</span>.handlerMappings) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">        logger.trace(</span><br><span class=\"line\">            <span class=\"string\">\"Testing handler map [\"</span> + hm + <span class=\"string\">\"] in DispatcherServlet with name '\"</span> + getServletName() + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (handler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法，for 循环了 this.handlerMappings 列表，当列表中的 HandlerMapping 元素 hm 能取到 handler 则立即返回。<br>那么这个类属性列表 this.handlerMappings 如何初始化的呢？<br>我们来看一下它的初始化方法 DispatcherServlet.initHandlerMappings</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initHandlerMappings</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlerMappings = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.detectAllHandlerMappings) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span><br><span class=\"line\">    Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class=\"line\">        BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.handlerMappings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(matchingBeans.values());</span><br><span class=\"line\">      <span class=\"comment\">// We keep HandlerMappings in sorted order.</span></span><br><span class=\"line\">      AnnotationAwareOrderComparator.sort(<span class=\"keyword\">this</span>.handlerMappings);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Ignore, we'll add a default HandlerMapping later.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class=\"line\">  <span class=\"comment\">// a default HandlerMapping if no other mappings are found.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerMappings == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">\"No HandlerMappings found in servlet '\"</span> + getServletName() + <span class=\"string\">\"': using default\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为 this.detectAllHandlerMappings 默认为 true 所以初始化方法从 ApplicationContext 里获取了所有继承<br>HandlerMapping 接口的 bean，并把它加入到了 handlerMappings 中。<br>SpringBoot 为我们默认注入了一下几个 geHandlerMapping 的实现类</p>\n<ul>\n<li>SimpleUrlHandlerMapping</li>\n<li>RequestMappingHandlerMapping</li>\n<li>BeanNameUrlHanderMapping</li>\n<li>WebMvcConfigurationSupport</li>\n<li>WelcomePageHanderMapping</li>\n</ul>\n<p>限于篇幅，这里将重点分析我们常用的 RequestMappingHandlerMapping。</p>\n<p>Springbooot 框架中 ，RequestMappingHandlerMapping 是在哪里被注入的呢？<br>是在 spring-boot-autoconfigure 包中的 WebMvcAutoConfiguration 里注入的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span>(WebMvcConfigurationSupport.class)</span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter</span>(&#123; DispatcherServletAutoConfiguration.class,</span><br><span class=\"line\">    ValidationAutoConfiguration.class &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RequestMappingHandlerMapping <span class=\"title\">requestMappingHandlerMapping</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Must be @Primary for MvcUriComponentsBuilder to work</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.requestMappingHandlerMapping();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-RequestMappingHandlerMapping-构建所有-RequestMapping-接口的注册表\"><a href=\"#1-2-RequestMappingHandlerMapping-构建所有-RequestMapping-接口的注册表\" class=\"headerlink\" title=\"1.2 RequestMappingHandlerMapping,构建所有@RequestMapping 接口的注册表\"></a>1.2 RequestMappingHandlerMapping,构建所有@RequestMapping 接口的注册表</h2><p>RequestMappingHandlerMapping 实例中构建了一个 所有@RequestMapping 接口的注册表，我们来看一下它的初始化构建过程。</p>\n<h3 id=\"1-2-1-RequestMappingHandlerMapping-类图\"><a href=\"#1-2-1-RequestMappingHandlerMapping-类图\" class=\"headerlink\" title=\"1.2.1 RequestMappingHandlerMapping 类图\"></a>1.2.1 RequestMappingHandlerMapping 类图</h3><img src=\"/blog/2018/11/17/springmvc-find-request-handler/RequestMappingHandlerMapping_uml_class.jpg\" title=\"RequestMappingHandlerMapping类图\">\n<h3 id=\"1-2-2-RequestMappingHandlerMapping-初始化\"><a href=\"#1-2-2-RequestMappingHandlerMapping-初始化\" class=\"headerlink\" title=\"1.2.2 RequestMappingHandlerMapping 初始化\"></a>1.2.2 RequestMappingHandlerMapping 初始化</h3><p>RequestMappingHandlerMapping 的父类 AbstractHandlerMethodMapping 实现了 InitializedBean 接口。<br>在 spring 初始化 bean 的时候，如果 bean 实现了 InitializingBean 接口，会自动调用 afterPropertiesSet 方法。</p>\n<p>来看 RequestMappingHandlerMapping 的 afterPropertiesSet 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestMappingHandlerMapping</span> <span class=\"keyword\">extends</span> <span class=\"title\">RequestMappingInfoHandlerMapping</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">MatchableHandlerMapping</span>, <span class=\"title\">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      ...</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config = <span class=\"keyword\">new</span> RequestMappingInfo.BuilderConfiguration();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setUrlPathHelper(getUrlPathHelper());</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setPathMatcher(getPathMatcher());</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setSuffixPatternMatch(<span class=\"keyword\">this</span>.useSuffixPatternMatch);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setTrailingSlashMatch(<span class=\"keyword\">this</span>.useTrailingSlashMatch);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setRegisteredSuffixPatternMatch(<span class=\"keyword\">this</span>.useRegisteredSuffixPatternMatch);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setContentNegotiationManager(getContentNegotiationManager());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.afterPropertiesSet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在做了一些配置之后调用了祖先 AbstractHandlerMethodMapping 的 afterPropertiesSet() (父类 RequestMappingInfoHandlerMapping 没有相应实现)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandlerMethodMapping</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandlerMapping</span> <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    initHandlerMethods();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Scan beans in the ApplicationContext, detect and register handler methods.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #isHandler(Class)</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #getMappingForMethod(Method, Class)</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #handlerMethodsInitialized(Map)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initHandlerMethods</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">\"Looking for request mappings in application context: \"</span> + getApplicationContext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String[] beanNames = (<span class=\"keyword\">this</span>.detectHandlerMethodsInAncestorContexts ?</span><br><span class=\"line\">        BeanFactoryUtils.beanNamesForTypeIncludingAncestors(obtainApplicationContext(), Object.class) :</span><br><span class=\"line\">        obtainApplicationContext().getBeanNamesForType(Object.class));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String beanName : beanNames) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; beanType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          beanType = obtainApplicationContext().getType(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// An unresolvable bean type, probably from a lazy bean - let's ignore it.</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Could not resolve target class for bean with name '\"</span> + beanName + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (beanType != <span class=\"keyword\">null</span> &amp;&amp; isHandler(beanType)) &#123;</span><br><span class=\"line\">          detectHandlerMethods(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handlerMethodsInitialized(getHandlerMethods());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestMappingHandlerMapping</span> <span class=\"keyword\">extends</span> <span class=\"title\">RequestMappingInfoHandlerMapping</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">MatchableHandlerMapping</span>, <span class=\"title\">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHandler</span><span class=\"params\">(Class&lt;?&gt; beanType)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||</span><br><span class=\"line\">        AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里调用了 initHandlerMethods 来查找所有 Handler 的方法。</p>\n<ol>\n<li>第一步把 ApplicationContext 里所有的 bean 的名称全部去出来。</li>\n<li>根据 bean 的名称获取 bean 的类型 beanType</li>\n<li>调用 isHandler 判断是否是 Handler，</li>\n<li>RequestMappingHandlerMapping 的 isHanlder 方法，根据类型是否有@Controller 或<br>@RequestMapping 注解判断是否是 Handler</li>\n<li>如果是 Handler 调用 detectHandlerMethods 注册所有的 handler 方法。</li>\n</ol>\n<p>我们来看一下 detectHandlerMethods 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandlerMethodMapping</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandlerMapping</span> <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">detectHandlerMethods</span><span class=\"params\">(<span class=\"keyword\">final</span> Object handler)</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; handlerType = (handler <span class=\"keyword\">instanceof</span> String ?</span><br><span class=\"line\">        obtainApplicationContext().getType((String) handler) : handler.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handlerType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Class&lt;?&gt; userType = ClassUtils.getUserClass(handlerType);</span><br><span class=\"line\">      Map&lt;Method, T&gt; methods = MethodIntrospector.selectMethods(userType,</span><br><span class=\"line\">          (MethodIntrospector.MetadataLookup&lt;T&gt;) method -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> getMappingForMethod(method, userType);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Invalid mapping on handler class [\"</span> +</span><br><span class=\"line\">                  userType.getName() + <span class=\"string\">\"]: \"</span> + method, ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">        logger.debug(methods.size() + <span class=\"string\">\" request handler methods found on \"</span> + userType + <span class=\"string\">\": \"</span> + methods);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      methods.forEach((method, mapping) -&gt; &#123;</span><br><span class=\"line\">        Method invocableMethod = AopUtils.selectInvocableMethod(method, userType);</span><br><span class=\"line\">        registerHandlerMethod(handler, invocableMethod, mapping);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Register a handler method and its unique mapping. Invoked at startup for</span></span><br><span class=\"line\"><span class=\"comment\">   * each detected handler method.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> handler the bean name of the handler or the handler instance</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> method the method to register</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> mapping the mapping conditions associated with the handler method</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@throws</span> IllegalStateException if another method was already registered</span></span><br><span class=\"line\"><span class=\"comment\">   * under the same mapping</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">registerHandlerMethod</span><span class=\"params\">(Object handler, Method method, T mapping)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mappingRegistry.register(mapping, handler, method);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestMappingHandlerMapping</span> <span class=\"keyword\">extends</span> <span class=\"title\">RequestMappingInfoHandlerMapping</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">MatchableHandlerMapping</span>, <span class=\"title\">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> RequestMappingInfo <span class=\"title\">getMappingForMethod</span><span class=\"params\">(Method method, Class&lt;?&gt; handlerType)</span> </span>&#123;</span><br><span class=\"line\">    RequestMappingInfo info = createRequestMappingInfo(method);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (typeInfo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        info = typeInfo.combine(info);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Delegates to &#123;<span class=\"doctag\">@link</span> #createRequestMappingInfo(RequestMapping, RequestCondition)&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">   * supplying the appropriate custom &#123;<span class=\"doctag\">@link</span> RequestCondition&#125; depending on whether</span></span><br><span class=\"line\"><span class=\"comment\">   * the supplied &#123;<span class=\"doctag\">@code</span> annotatedElement&#125; is a class or method.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #getCustomTypeCondition(Class)</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #getCustomMethodCondition(Method)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> RequestMappingInfo <span class=\"title\">createRequestMappingInfo</span><span class=\"params\">(AnnotatedElement element)</span> </span>&#123;</span><br><span class=\"line\">    RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);</span><br><span class=\"line\">    RequestCondition&lt;?&gt; condition = (element <span class=\"keyword\">instanceof</span> Class ?</span><br><span class=\"line\">        getCustomTypeCondition((Class&lt;?&gt;) element) : getCustomMethodCondition((Method) element));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (requestMapping != <span class=\"keyword\">null</span> ? createRequestMappingInfo(requestMapping, condition) : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(T mapping, Object handler, Method method)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.readWriteLock.writeLock().lock();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    HandlerMethod handlerMethod = createHandlerMethod(handler, method);</span><br><span class=\"line\">    assertUniqueMethodMapping(handlerMethod, mapping);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">      logger.info(<span class=\"string\">\"Mapped \\\"\"</span> + mapping + <span class=\"string\">\"\\\" onto \"</span> + handlerMethod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mappingLookup.put(mapping, handlerMethod);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; directUrls = getDirectUrls(mapping);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String url : directUrls) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.urlLookup.add(url, mapping);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String name = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getNamingStrategy() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      name = getNamingStrategy().getName(handlerMethod, mapping);</span><br><span class=\"line\">      addMappingName(name, handlerMethod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corsConfig != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.corsLookup.put(handlerMethod, corsConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.registry.put(mapping, <span class=\"keyword\">new</span> MappingRegistration&lt;&gt;(mapping, handlerMethod, directUrls, name));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.readWriteLock.writeLock().unlock();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>detectHandlerMethods</p>\n<ol>\n<li>先调用了 MethodIntrospector.selectMethods。MethodIntrospector.selectMethods 的第二参数传入了一个 filter 函数。当返回不是 null 的时候，将会把返回结果保存在 Map&lt;Method,T&gt;中。</li>\n<li>filter 中调用了 getMappingForMethod 方法,传入 method 和 该方法所在类 handlerType</li>\n<li>调用 createRequestMappingInfo 传入 method，如果这个方法被@RequestMapping 注解修饰，就会返回一个 RequestMappingInfo 实例，RequestMappingInfo 实例记录接口 method 处理 HttpRequest 的所有信息，包括路径，接口允许的方法，CORS 信息，已经各种限制条件。</li>\n<li>如果返回实例不为 null，再次调用 getMappingForMethod 方法，传入该方法所在类型 handlerType 获得一个基于类的 RequestMappingInfo 实例，</li>\n<li>两个实例 merge 得到一个新的 RequestMappingInfo 实例。（请求路径的合并等。。）</li>\n<li>得到所有 methods 的 map 以后进行遍历，调用 registerHandlerMethod 进行注册保存。</li>\n<li>调用了 this.mappingRegistry.register 进行注册。保存了 mapping(requestMappingInfo)和 handlerMethod 的关系，<br>以及 urlString 与 mapping(requestMappingInfo)的关系。</li>\n</ol>\n<h3 id=\"1-2-3-初始化总结\"><a href=\"#1-2-3-初始化总结\" class=\"headerlink\" title=\"1.2.3 初始化总结\"></a>1.2.3 初始化总结</h3><p>在完成了 RequestMappingHandlerMapping 的初始化以后，这个实例中便保存了我们所有@RequestMapping 修饰的接口信息。</p>\n<h2 id=\"1-3-RequestMappingHanderMapping-获取-handlerChain\"><a href=\"#1-3-RequestMappingHanderMapping-获取-handlerChain\" class=\"headerlink\" title=\"1.3 RequestMappingHanderMapping 获取 handlerChain\"></a>1.3 RequestMappingHanderMapping 获取 handlerChain</h2><p>我们回到文章的第一段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerMappings != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (HandlerMapping hm : <span class=\"keyword\">this</span>.handlerMappings) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">          logger.trace(</span><br><span class=\"line\">              <span class=\"string\">\"Testing handler map [\"</span> + hm + <span class=\"string\">\"] in DispatcherServlet with name '\"</span> + getServletName() + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>handlerMapping 调用了 getHandler(request)获取 HandlerExecutionChain 实例，那么我们来看一下<br>RequestMappingHanderMapping 的 getHandler 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandlerMapping</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebApplicationObjectSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerMapping</span>, <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> HandlerExecutionChain <span class=\"title\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Object handler = getHandlerInternal(request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      handler = getDefaultHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Bean name or resolved handler?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handler <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">      String handlerName = (String) handler;</span><br><span class=\"line\">      handler = obtainApplicationContext().getBean(handlerName);</span><br><span class=\"line\"></span><br><span class=\"line\">    HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (CorsUtils.isCorsRequest(request)) &#123;</span><br><span class=\"line\">      CorsConfiguration globalConfig = <span class=\"keyword\">this</span>.globalCorsConfigSource.getCorsConfiguration(request);</span><br><span class=\"line\">      CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);</span><br><span class=\"line\">      CorsConfiguration config = (globalConfig != <span class=\"keyword\">null</span> ? globalConfig.combine(handlerConfig) : handlerConfig);</span><br><span class=\"line\">      executionChain = getCorsHandlerExecutionChain(request, executionChain, config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> executionChain;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用了 getHandlerInternal,<br>从 mappingRegistry 中获取匹配路径的 mapping，并排序获取最匹配的 handlerMethod</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandlerMethodMapping</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandlerMapping</span> <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> HandlerMethod <span class=\"title\">getHandlerInternal</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">\"Looking up handler method for path \"</span> + lookupPath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mappingRegistry.acquireReadLock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handlerMethod != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          logger.debug(<span class=\"string\">\"Returning handler method [\"</span> + handlerMethod + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          logger.debug(<span class=\"string\">\"Did not find handler method for [\"</span> + lookupPath + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (handlerMethod != <span class=\"keyword\">null</span> ? handlerMethod.createWithResolvedBean() : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mappingRegistry.releaseReadLock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> HandlerMethod <span class=\"title\">lookupHandlerMethod</span><span class=\"params\">(String lookupPath, HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    List&lt;Match&gt; matches = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    List&lt;T&gt; directPathMatches = <span class=\"keyword\">this</span>.mappingRegistry.getMappingsByUrl(lookupPath);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (directPathMatches != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      addMatchingMappings(directPathMatches, matches, request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matches.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// No choice but to go through all mappings...</span></span><br><span class=\"line\">      addMatchingMappings(<span class=\"keyword\">this</span>.mappingRegistry.getMappings().keySet(), matches, request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!matches.isEmpty()) &#123;</span><br><span class=\"line\">      Comparator&lt;Match&gt; comparator = <span class=\"keyword\">new</span> MatchComparator(getMappingComparator(request));</span><br><span class=\"line\">      matches.sort(comparator);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">        logger.trace(<span class=\"string\">\"Found \"</span> + matches.size() + <span class=\"string\">\" matching mapping(s) for [\"</span> + lookupPath + <span class=\"string\">\"] : \"</span> + matches);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Match bestMatch = matches.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (matches.size() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> PREFLIGHT_AMBIGUOUS_MATCH;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Match secondBestMatch = matches.get(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (comparator.compare(bestMatch, secondBestMatch) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          Method m1 = bestMatch.handlerMethod.getMethod();</span><br><span class=\"line\">          Method m2 = secondBestMatch.handlerMethod.getMethod();</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Ambiguous handler methods mapped for HTTP path '\"</span> +</span><br><span class=\"line\">              request.getRequestURL() + <span class=\"string\">\"': &#123;\"</span> + m1 + <span class=\"string\">\", \"</span> + m2 + <span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      handleMatch(bestMatch.mapping, lookupPath, request);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> bestMatch.handlerMethod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> handleNoMatch(<span class=\"keyword\">this</span>.mappingRegistry.getMappings().keySet(), lookupPath, request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addMatchingMappings</span><span class=\"params\">(Collection&lt;T&gt; mappings, List&lt;Match&gt; matches, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T mapping : mappings) &#123;</span><br><span class=\"line\">      T match = getMatchingMapping(mapping, request);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (match != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        matches.add(<span class=\"keyword\">new</span> Match(match, <span class=\"keyword\">this</span>.mappingRegistry.getMappings().get(mapping)));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取到了 handlerMethod 以后调用了 getHandlerExecutionChain 把匹配的 Intercepters 组装成了 HandlerExecutionChain 对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title\">getHandlerExecutionChain</span><span class=\"params\">(Object handler, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">  HandlerExecutionChain chain = (handler <span class=\"keyword\">instanceof</span> HandlerExecutionChain ?</span><br><span class=\"line\">      (HandlerExecutionChain) handler : <span class=\"keyword\">new</span> HandlerExecutionChain(handler));</span><br><span class=\"line\"></span><br><span class=\"line\">  String lookupPath = <span class=\"keyword\">this</span>.urlPathHelper.getLookupPathForRequest(request);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (HandlerInterceptor interceptor : <span class=\"keyword\">this</span>.adaptedInterceptors) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (interceptor <span class=\"keyword\">instanceof</span> MappedInterceptor) &#123;</span><br><span class=\"line\">      MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mappedInterceptor.matches(lookupPath, <span class=\"keyword\">this</span>.pathMatcher)) &#123;</span><br><span class=\"line\">        chain.addInterceptor(mappedInterceptor.getInterceptor());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      chain.addInterceptor(interceptor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> chain;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-获取-HandlerAdapter\"><a href=\"#2-获取-HandlerAdapter\" class=\"headerlink\" title=\"2. 获取 HandlerAdapter\"></a>2. 获取 HandlerAdapter</h1><p>回到 doDispatchServlet 的代码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n<p>调用了 getHandlerAdapter 获取 HandlerAdapter 实例 ha。<br>DispatchServlet 初始化的时候会把 appContext 里所有实现了 HandlerAdapter 的 bean 添加到 this.handlerAdapters 里，<br>然后通过 for 循环查找支持传入的 handler 的 HanderAdapter。支持 RequestMappingHandlerMapping 的是<br>RequestMappingHandlerAdapter。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HandlerAdapter <span class=\"title\">getHandlerAdapter</span><span class=\"params\">(Object handler)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerAdapters != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HandlerAdapter ha : <span class=\"keyword\">this</span>.handlerAdapters) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">        logger.trace(<span class=\"string\">\"Testing handler adapter [\"</span> + ha + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ha.supports(handler)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ha;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(<span class=\"string\">\"No adapter for handler [\"</span> + handler +</span><br><span class=\"line\">      <span class=\"string\">\"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RequestMappingHandlerAdapter 的 support 方法，如果 handler 的类型是 HandlerMethod 即支持，RequestMappingHandlerMapping 返回的 handler 类型就是 HandlerMethod</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Object handler)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (handler <span class=\"keyword\">instanceof</span> HandlerMethod &amp;&amp; supportsInternal((HandlerMethod) handler));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supportsInternal</span><span class=\"params\">(HandlerMethod handlerMethod)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-HandlerAdapter-执行-handler-方法。\"><a href=\"#3-HandlerAdapter-执行-handler-方法。\" class=\"headerlink\" title=\"3. HandlerAdapter 执行 handler 方法。\"></a>3. HandlerAdapter 执行 handler 方法。</h1><p>回到 doDispatchServlet 的代码片段,获取 ha 以后，先调用了 preHandle 里的 interceptors，如果返回是 true，<br>则执行了 ha.handle，执行了 handler。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-1-RequestMappingHandlerAdapterd-的-handler-方法\"><a href=\"#3-1-RequestMappingHandlerAdapterd-的-handler-方法\" class=\"headerlink\" title=\"3.1 RequestMappingHandlerAdapterd 的 handler 方法\"></a>3.1 RequestMappingHandlerAdapterd 的 handler 方法</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ModelAndView <span class=\"title\">handle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> handleInternal(request, response, (HandlerMethod) handler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>handlerInternal 调用了 invokeHandlerMethod 执行 handlerMethod</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">handleInternal</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tHttpServletResponse response, HandlerMethod handlerMethod)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tModelAndView mav;</span><br><span class=\"line\">\tcheckRequest(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.synchronizeOnSession) &#123;</span><br><span class=\"line\">\t\tHttpSession session = request.getSession(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (session != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tObject mutex = WebUtils.getSessionMutex(session);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (mutex) &#123;</span><br><span class=\"line\">\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class=\"line\">\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// No synchronization on session demanded at all...</span></span><br><span class=\"line\">\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class=\"line\">\t\t\tapplyCacheSeconds(response, <span class=\"keyword\">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tprepareResponse(response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>invokeHandlerMethod 组装了两个实例，<br>ServletInvocableHandlerMethod 对象 invocableMethod 和 ModelAndViewContainer 对象 mavContainer</p>\n<p>把一堆必要的信息传递给了 invocableMethod,比如参数解释器 this.argumentResolvers,返回值处理器 this.retrunValueHandler 等。。。</p>\n<p>然后调用了方法 invocableMethod.invokeAndHandle(webRequest, mavContainer);</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">invokeHandlerMethod</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tHttpServletResponse response, HandlerMethod handlerMethod)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tServletWebRequest webRequest = <span class=\"keyword\">new</span> ServletWebRequest(request, response);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tWebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class=\"line\">\t\tModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.argumentResolvers != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tinvocableMethod.setHandlerMethodArgumentResolvers(<span class=\"keyword\">this</span>.argumentResolvers);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.returnValueHandlers != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tinvocableMethod.setHandlerMethodReturnValueHandlers(<span class=\"keyword\">this</span>.returnValueHandlers);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tinvocableMethod.setDataBinderFactory(binderFactory);</span><br><span class=\"line\">\t\tinvocableMethod.setParameterNameDiscoverer(<span class=\"keyword\">this</span>.parameterNameDiscoverer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tModelAndViewContainer mavContainer = <span class=\"keyword\">new</span> ModelAndViewContainer();</span><br><span class=\"line\">\t\tmavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class=\"line\">\t\tmodelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class=\"line\">\t\tmavContainer.setIgnoreDefaultModelOnRedirect(<span class=\"keyword\">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class=\"line\">\t\tasyncWebRequest.setTimeout(<span class=\"keyword\">this</span>.asyncRequestTimeout);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\">\t\tasyncManager.setTaskExecutor(<span class=\"keyword\">this</span>.taskExecutor);</span><br><span class=\"line\">\t\tasyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class=\"line\">\t\tasyncManager.registerCallableInterceptors(<span class=\"keyword\">this</span>.callableInterceptors);</span><br><span class=\"line\">\t\tasyncManager.registerDeferredResultInterceptors(<span class=\"keyword\">this</span>.deferredResultInterceptors);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class=\"line\">\t\t\tObject result = asyncManager.getConcurrentResult();</span><br><span class=\"line\">\t\t\tmavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\tasyncManager.clearConcurrentResult();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(<span class=\"string\">\"Found concurrent result value [\"</span> + result + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tinvocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tinvocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\twebRequest.requestCompleted();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>invokeAndHandle 调用了 invokeAndHandle 处理请求，如果返回值为空且请求被处理则调用 mavContainer.setRequestHandled(true)后返回。<br>如果返回值不为空则使用 this.returnValueHandlers.handleReturnValue 处理返回值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAndHandle</span><span class=\"params\">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tObject... providedArgs)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class=\"line\">\tsetResponseStatus(webRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class=\"keyword\">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class=\"line\">\t\t\tmavContainer.setRequestHandled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class=\"line\">\t\tmavContainer.setRequestHandled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmavContainer.setRequestHandled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\tAssert.state(<span class=\"keyword\">this</span>.returnValueHandlers != <span class=\"keyword\">null</span>, <span class=\"string\">\"No return value handlers\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class=\"line\">\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(getReturnValueHandlingErrorMessage(<span class=\"string\">\"Error handling return value\"</span>, returnValue), ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getMethodParameters 先调用了方法 getMethodArgumentValues(),getMethodArgumentValues 里为每一个参数检查是否有支持的参数解释器 argumentResovler，如果有的话则装备一个参数实例。如果找不到 methodResolver 的话就抛出异常。<br>得到参数列表 args 以后调用 doInvoke()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invokeForRequest</span><span class=\"params\">(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tObject... providedArgs)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">\"Invoking '\"</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"' with arguments \"</span> + Arrays.toString(args));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tObject returnValue = doInvoke(args);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">\"Method [\"</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"] returned [\"</span> + returnValue + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Get the method argument values for the current request.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class=\"meta\">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class=\"line\">\t\tObject... providedArgs) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMethodParameter[] parameters = getMethodParameters();</span><br><span class=\"line\">\tObject[] args = <span class=\"keyword\">new</span> Object[parameters.length];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class=\"line\">\t\tMethodParameter parameter = parameters[i];</span><br><span class=\"line\">\t\tparameter.initParameterNameDiscovery(<span class=\"keyword\">this</span>.parameterNameDiscoverer);</span><br><span class=\"line\">\t\targs[i] = resolveProvidedArgument(parameter, providedArgs);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (args[i] != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.argumentResolvers.supportsParameter(parameter)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\targs[i] = <span class=\"keyword\">this</span>.argumentResolvers.resolveArgument(</span><br><span class=\"line\">\t\t\t\t\t\tparameter, mavContainer, request, <span class=\"keyword\">this</span>.dataBinderFactory);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(getArgumentResolutionErrorMessage(<span class=\"string\">\"Failed to resolve\"</span>, i), ex);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (args[i] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Could not resolve method parameter at index \"</span> +</span><br><span class=\"line\">\t\t\t\t\tparameter.getParameterIndex() + <span class=\"string\">\" in \"</span> + parameter.getExecutable().toGenericString() +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\": \"</span> + getArgumentResolutionErrorMessage(<span class=\"string\">\"No suitable resolver for\"</span>, i));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>doInvoke 调用了 getBridgedMethod().invoke(getBean(), args) 执行了我们用@RequestMapping 修饰的方法，并返回了结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InvocableHandlerMethod</span></span></span><br><span class=\"line\"><span class=\"class\">...</span></span><br><span class=\"line\"><span class=\"class\">...</span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"title\">protected</span> <span class=\"title\">Object</span> <span class=\"title\">doInvoke</span>(<span class=\"title\">Object</span>... <span class=\"title\">args</span>) <span class=\"title\">throws</span> <span class=\"title\">Exception</span> </span>&#123;</span><br><span class=\"line\">\t\tReflectionUtils.makeAccessible(getBridgedMethod());</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> getBridgedMethod().invoke(getBean(), args);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class=\"line\">\t\t\tassertTargetBean(getBridgedMethod(), getBean(), args);</span><br><span class=\"line\">\t\t\tString text = (ex.getMessage() != <span class=\"keyword\">null</span> ? ex.getMessage() : <span class=\"string\">\"Illegal argument\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(getInvocationErrorMessage(text, args), ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (InvocationTargetException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Unwrap for HandlerExceptionResolvers ...</span></span><br><span class=\"line\">\t\t\tThrowable targetException = ex.getTargetException();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (targetException <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> (RuntimeException) targetException;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetException <span class=\"keyword\">instanceof</span> Error) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> (Error) targetException;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetException <span class=\"keyword\">instanceof</span> Exception) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> (Exception) targetException;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tString text = getInvocationErrorMessage(<span class=\"string\">\"Failed to invoke handler method\"</span>, args);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(text, targetException);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-获取-HandlerExecutionChain\"><a href=\"#1-获取-HandlerExecutionChain\" class=\"headerlink\" title=\"1 获取 HandlerExecutionChain\"></a>1 获取 HandlerExecutionChain</h1><p>DispatchServlet 的 doDispatch 方法中调用了 getHandler 方法获取了执行请求的 HandlerExecutionChain。<br>HandlerExecutionChain 包含了拦截器已经处理该请求的 handler 等信息。</p>\n<p>来看一下 doDispatch 的源码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doDispatch</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">        processedRequest = checkMultipart(request);</span><br><span class=\"line\">        multipartRequestParsed = (processedRequest != request);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Determine handler for the current request.</span></span><br><span class=\"line\">        mappedHandler = getHandler(processedRequest);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mappedHandler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          noHandlerFound(processedRequest, response);</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-1-获取-HandlerExecutionChain\"><a href=\"#1-1-获取-HandlerExecutionChain\" class=\"headerlink\" title=\"1.1 获取 HandlerExecutionChain\"></a>1.1 获取 HandlerExecutionChain</h2><p>在来看一下获取 HandlerExecutionChain 实例 mappedHandler 的方法 getHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerMappings != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HandlerMapping hm : <span class=\"keyword\">this</span>.handlerMappings) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">        logger.trace(</span><br><span class=\"line\">            <span class=\"string\">\"Testing handler map [\"</span> + hm + <span class=\"string\">\"] in DispatcherServlet with name '\"</span> + getServletName() + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (handler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法，for 循环了 this.handlerMappings 列表，当列表中的 HandlerMapping 元素 hm 能取到 handler 则立即返回。<br>那么这个类属性列表 this.handlerMappings 如何初始化的呢？<br>我们来看一下它的初始化方法 DispatcherServlet.initHandlerMappings</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initHandlerMappings</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.handlerMappings = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.detectAllHandlerMappings) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span><br><span class=\"line\">    Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class=\"line\">        BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class=\"keyword\">true</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.handlerMappings = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(matchingBeans.values());</span><br><span class=\"line\">      <span class=\"comment\">// We keep HandlerMappings in sorted order.</span></span><br><span class=\"line\">      AnnotationAwareOrderComparator.sort(<span class=\"keyword\">this</span>.handlerMappings);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// Ignore, we'll add a default HandlerMapping later.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class=\"line\">  <span class=\"comment\">// a default HandlerMapping if no other mappings are found.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerMappings == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">\"No HandlerMappings found in servlet '\"</span> + getServletName() + <span class=\"string\">\"': using default\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为 this.detectAllHandlerMappings 默认为 true 所以初始化方法从 ApplicationContext 里获取了所有继承<br>HandlerMapping 接口的 bean，并把它加入到了 handlerMappings 中。<br>SpringBoot 为我们默认注入了一下几个 geHandlerMapping 的实现类</p>\n<ul>\n<li>SimpleUrlHandlerMapping</li>\n<li>RequestMappingHandlerMapping</li>\n<li>BeanNameUrlHanderMapping</li>\n<li>WebMvcConfigurationSupport</li>\n<li>WelcomePageHanderMapping</li>\n</ul>\n<p>限于篇幅，这里将重点分析我们常用的 RequestMappingHandlerMapping。</p>\n<p>Springbooot 框架中 ，RequestMappingHandlerMapping 是在哪里被注入的呢？<br>是在 spring-boot-autoconfigure 包中的 WebMvcAutoConfiguration 里注入的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass</span>(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean</span>(WebMvcConfigurationSupport.class)</span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE + <span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter</span>(&#123; DispatcherServletAutoConfiguration.class,</span><br><span class=\"line\">    ValidationAutoConfiguration.class &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Primary</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RequestMappingHandlerMapping <span class=\"title\">requestMappingHandlerMapping</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// Must be @Primary for MvcUriComponentsBuilder to work</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.requestMappingHandlerMapping();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"1-2-RequestMappingHandlerMapping-构建所有-RequestMapping-接口的注册表\"><a href=\"#1-2-RequestMappingHandlerMapping-构建所有-RequestMapping-接口的注册表\" class=\"headerlink\" title=\"1.2 RequestMappingHandlerMapping,构建所有@RequestMapping 接口的注册表\"></a>1.2 RequestMappingHandlerMapping,构建所有@RequestMapping 接口的注册表</h2><p>RequestMappingHandlerMapping 实例中构建了一个 所有@RequestMapping 接口的注册表，我们来看一下它的初始化构建过程。</p>\n<h3 id=\"1-2-1-RequestMappingHandlerMapping-类图\"><a href=\"#1-2-1-RequestMappingHandlerMapping-类图\" class=\"headerlink\" title=\"1.2.1 RequestMappingHandlerMapping 类图\"></a>1.2.1 RequestMappingHandlerMapping 类图</h3><img src=\"/blog/2018/11/17/springmvc-find-request-handler/RequestMappingHandlerMapping_uml_class.jpg\" title=\"RequestMappingHandlerMapping类图\">\n<h3 id=\"1-2-2-RequestMappingHandlerMapping-初始化\"><a href=\"#1-2-2-RequestMappingHandlerMapping-初始化\" class=\"headerlink\" title=\"1.2.2 RequestMappingHandlerMapping 初始化\"></a>1.2.2 RequestMappingHandlerMapping 初始化</h3><p>RequestMappingHandlerMapping 的父类 AbstractHandlerMethodMapping 实现了 InitializedBean 接口。<br>在 spring 初始化 bean 的时候，如果 bean 实现了 InitializingBean 接口，会自动调用 afterPropertiesSet 方法。</p>\n<p>来看 RequestMappingHandlerMapping 的 afterPropertiesSet 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestMappingHandlerMapping</span> <span class=\"keyword\">extends</span> <span class=\"title\">RequestMappingInfoHandlerMapping</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">MatchableHandlerMapping</span>, <span class=\"title\">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      ...</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config = <span class=\"keyword\">new</span> RequestMappingInfo.BuilderConfiguration();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setUrlPathHelper(getUrlPathHelper());</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setPathMatcher(getPathMatcher());</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setSuffixPatternMatch(<span class=\"keyword\">this</span>.useSuffixPatternMatch);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setTrailingSlashMatch(<span class=\"keyword\">this</span>.useTrailingSlashMatch);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setRegisteredSuffixPatternMatch(<span class=\"keyword\">this</span>.useRegisteredSuffixPatternMatch);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.config.setContentNegotiationManager(getContentNegotiationManager());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">super</span>.afterPropertiesSet();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在做了一些配置之后调用了祖先 AbstractHandlerMethodMapping 的 afterPropertiesSet() (父类 RequestMappingInfoHandlerMapping 没有相应实现)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandlerMethodMapping</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandlerMapping</span> <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterPropertiesSet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    initHandlerMethods();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Scan beans in the ApplicationContext, detect and register handler methods.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #isHandler(Class)</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #getMappingForMethod(Method, Class)</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #handlerMethodsInitialized(Map)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initHandlerMethods</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">\"Looking for request mappings in application context: \"</span> + getApplicationContext());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String[] beanNames = (<span class=\"keyword\">this</span>.detectHandlerMethodsInAncestorContexts ?</span><br><span class=\"line\">        BeanFactoryUtils.beanNamesForTypeIncludingAncestors(obtainApplicationContext(), Object.class) :</span><br><span class=\"line\">        obtainApplicationContext().getBeanNamesForType(Object.class));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String beanName : beanNames) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!beanName.startsWith(SCOPED_TARGET_NAME_PREFIX)) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; beanType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          beanType = obtainApplicationContext().getType(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// An unresolvable bean type, probably from a lazy bean - let's ignore it.</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">            logger.debug(<span class=\"string\">\"Could not resolve target class for bean with name '\"</span> + beanName + <span class=\"string\">\"'\"</span>, ex);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (beanType != <span class=\"keyword\">null</span> &amp;&amp; isHandler(beanType)) &#123;</span><br><span class=\"line\">          detectHandlerMethods(beanName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    handlerMethodsInitialized(getHandlerMethods());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestMappingHandlerMapping</span> <span class=\"keyword\">extends</span> <span class=\"title\">RequestMappingInfoHandlerMapping</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">MatchableHandlerMapping</span>, <span class=\"title\">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHandler</span><span class=\"params\">(Class&lt;?&gt; beanType)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||</span><br><span class=\"line\">        AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里调用了 initHandlerMethods 来查找所有 Handler 的方法。</p>\n<ol>\n<li>第一步把 ApplicationContext 里所有的 bean 的名称全部去出来。</li>\n<li>根据 bean 的名称获取 bean 的类型 beanType</li>\n<li>调用 isHandler 判断是否是 Handler，</li>\n<li>RequestMappingHandlerMapping 的 isHanlder 方法，根据类型是否有@Controller 或<br>@RequestMapping 注解判断是否是 Handler</li>\n<li>如果是 Handler 调用 detectHandlerMethods 注册所有的 handler 方法。</li>\n</ol>\n<p>我们来看一下 detectHandlerMethods 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandlerMethodMapping</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandlerMapping</span> <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">detectHandlerMethods</span><span class=\"params\">(<span class=\"keyword\">final</span> Object handler)</span> </span>&#123;</span><br><span class=\"line\">    Class&lt;?&gt; handlerType = (handler <span class=\"keyword\">instanceof</span> String ?</span><br><span class=\"line\">        obtainApplicationContext().getType((String) handler) : handler.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handlerType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">final</span> Class&lt;?&gt; userType = ClassUtils.getUserClass(handlerType);</span><br><span class=\"line\">      Map&lt;Method, T&gt; methods = MethodIntrospector.selectMethods(userType,</span><br><span class=\"line\">          (MethodIntrospector.MetadataLookup&lt;T&gt;) method -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> getMappingForMethod(method, userType);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Invalid mapping on handler class [\"</span> +</span><br><span class=\"line\">                  userType.getName() + <span class=\"string\">\"]: \"</span> + method, ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">        logger.debug(methods.size() + <span class=\"string\">\" request handler methods found on \"</span> + userType + <span class=\"string\">\": \"</span> + methods);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      methods.forEach((method, mapping) -&gt; &#123;</span><br><span class=\"line\">        Method invocableMethod = AopUtils.selectInvocableMethod(method, userType);</span><br><span class=\"line\">        registerHandlerMethod(handler, invocableMethod, mapping);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Register a handler method and its unique mapping. Invoked at startup for</span></span><br><span class=\"line\"><span class=\"comment\">   * each detected handler method.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> handler the bean name of the handler or the handler instance</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> method the method to register</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> mapping the mapping conditions associated with the handler method</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@throws</span> IllegalStateException if another method was already registered</span></span><br><span class=\"line\"><span class=\"comment\">   * under the same mapping</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">registerHandlerMethod</span><span class=\"params\">(Object handler, Method method, T mapping)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mappingRegistry.register(mapping, handler, method);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestMappingHandlerMapping</span> <span class=\"keyword\">extends</span> <span class=\"title\">RequestMappingInfoHandlerMapping</span></span></span><br><span class=\"line\"><span class=\"class\">    <span class=\"keyword\">implements</span> <span class=\"title\">MatchableHandlerMapping</span>, <span class=\"title\">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> RequestMappingInfo <span class=\"title\">getMappingForMethod</span><span class=\"params\">(Method method, Class&lt;?&gt; handlerType)</span> </span>&#123;</span><br><span class=\"line\">    RequestMappingInfo info = createRequestMappingInfo(method);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (info != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      RequestMappingInfo typeInfo = createRequestMappingInfo(handlerType);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (typeInfo != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        info = typeInfo.combine(info);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Delegates to &#123;<span class=\"doctag\">@link</span> #createRequestMappingInfo(RequestMapping, RequestCondition)&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">   * supplying the appropriate custom &#123;<span class=\"doctag\">@link</span> RequestCondition&#125; depending on whether</span></span><br><span class=\"line\"><span class=\"comment\">   * the supplied &#123;<span class=\"doctag\">@code</span> annotatedElement&#125; is a class or method.</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #getCustomTypeCondition(Class)</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span> #getCustomMethodCondition(Method)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> RequestMappingInfo <span class=\"title\">createRequestMappingInfo</span><span class=\"params\">(AnnotatedElement element)</span> </span>&#123;</span><br><span class=\"line\">    RequestMapping requestMapping = AnnotatedElementUtils.findMergedAnnotation(element, RequestMapping.class);</span><br><span class=\"line\">    RequestCondition&lt;?&gt; condition = (element <span class=\"keyword\">instanceof</span> Class ?</span><br><span class=\"line\">        getCustomTypeCondition((Class&lt;?&gt;) element) : getCustomMethodCondition((Method) element));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (requestMapping != <span class=\"keyword\">null</span> ? createRequestMappingInfo(requestMapping, condition) : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">register</span><span class=\"params\">(T mapping, Object handler, Method method)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.readWriteLock.writeLock().lock();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    HandlerMethod handlerMethod = createHandlerMethod(handler, method);</span><br><span class=\"line\">    assertUniqueMethodMapping(handlerMethod, mapping);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">      logger.info(<span class=\"string\">\"Mapped \\\"\"</span> + mapping + <span class=\"string\">\"\\\" onto \"</span> + handlerMethod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mappingLookup.put(mapping, handlerMethod);</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;String&gt; directUrls = getDirectUrls(mapping);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String url : directUrls) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.urlLookup.add(url, mapping);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String name = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getNamingStrategy() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      name = getNamingStrategy().getName(handlerMethod, mapping);</span><br><span class=\"line\">      addMappingName(name, handlerMethod);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    CorsConfiguration corsConfig = initCorsConfiguration(handler, method, mapping);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corsConfig != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.corsLookup.put(handlerMethod, corsConfig);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.registry.put(mapping, <span class=\"keyword\">new</span> MappingRegistration&lt;&gt;(mapping, handlerMethod, directUrls, name));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.readWriteLock.writeLock().unlock();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>detectHandlerMethods</p>\n<ol>\n<li>先调用了 MethodIntrospector.selectMethods。MethodIntrospector.selectMethods 的第二参数传入了一个 filter 函数。当返回不是 null 的时候，将会把返回结果保存在 Map&lt;Method,T&gt;中。</li>\n<li>filter 中调用了 getMappingForMethod 方法,传入 method 和 该方法所在类 handlerType</li>\n<li>调用 createRequestMappingInfo 传入 method，如果这个方法被@RequestMapping 注解修饰，就会返回一个 RequestMappingInfo 实例，RequestMappingInfo 实例记录接口 method 处理 HttpRequest 的所有信息，包括路径，接口允许的方法，CORS 信息，已经各种限制条件。</li>\n<li>如果返回实例不为 null，再次调用 getMappingForMethod 方法，传入该方法所在类型 handlerType 获得一个基于类的 RequestMappingInfo 实例，</li>\n<li>两个实例 merge 得到一个新的 RequestMappingInfo 实例。（请求路径的合并等。。）</li>\n<li>得到所有 methods 的 map 以后进行遍历，调用 registerHandlerMethod 进行注册保存。</li>\n<li>调用了 this.mappingRegistry.register 进行注册。保存了 mapping(requestMappingInfo)和 handlerMethod 的关系，<br>以及 urlString 与 mapping(requestMappingInfo)的关系。</li>\n</ol>\n<h3 id=\"1-2-3-初始化总结\"><a href=\"#1-2-3-初始化总结\" class=\"headerlink\" title=\"1.2.3 初始化总结\"></a>1.2.3 初始化总结</h3><p>在完成了 RequestMappingHandlerMapping 的初始化以后，这个实例中便保存了我们所有@RequestMapping 修饰的接口信息。</p>\n<h2 id=\"1-3-RequestMappingHanderMapping-获取-handlerChain\"><a href=\"#1-3-RequestMappingHanderMapping-获取-handlerChain\" class=\"headerlink\" title=\"1.3 RequestMappingHanderMapping 获取 handlerChain\"></a>1.3 RequestMappingHanderMapping 获取 handlerChain</h2><p>我们回到文章的第一段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerMappings != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (HandlerMapping hm : <span class=\"keyword\">this</span>.handlerMappings) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">          logger.trace(</span><br><span class=\"line\">              <span class=\"string\">\"Testing handler map [\"</span> + hm + <span class=\"string\">\"] in DispatcherServlet with name '\"</span> + getServletName() + <span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handler != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> handler;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>handlerMapping 调用了 getHandler(request)获取 HandlerExecutionChain 实例，那么我们来看一下<br>RequestMappingHanderMapping 的 getHandler 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandlerMapping</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebApplicationObjectSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerMapping</span>, <span class=\"title\">Ordered</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> HandlerExecutionChain <span class=\"title\">getHandler</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Object handler = getHandlerInternal(request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      handler = getDefaultHandler();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handler == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Bean name or resolved handler?</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handler <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">      String handlerName = (String) handler;</span><br><span class=\"line\">      handler = obtainApplicationContext().getBean(handlerName);</span><br><span class=\"line\"></span><br><span class=\"line\">    HandlerExecutionChain executionChain = getHandlerExecutionChain(handler, request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (CorsUtils.isCorsRequest(request)) &#123;</span><br><span class=\"line\">      CorsConfiguration globalConfig = <span class=\"keyword\">this</span>.globalCorsConfigSource.getCorsConfiguration(request);</span><br><span class=\"line\">      CorsConfiguration handlerConfig = getCorsConfiguration(handler, request);</span><br><span class=\"line\">      CorsConfiguration config = (globalConfig != <span class=\"keyword\">null</span> ? globalConfig.combine(handlerConfig) : handlerConfig);</span><br><span class=\"line\">      executionChain = getCorsHandlerExecutionChain(request, executionChain, config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> executionChain;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用了 getHandlerInternal,<br>从 mappingRegistry 中获取匹配路径的 mapping，并排序获取最匹配的 handlerMethod</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractHandlerMethodMapping</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">AbstractHandlerMapping</span> <span class=\"keyword\">implements</span> <span class=\"title\">InitializingBean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> HandlerMethod <span class=\"title\">getHandlerInternal</span><span class=\"params\">(HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    String lookupPath = getUrlPathHelper().getLookupPathForRequest(request);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">\"Looking up handler method for path \"</span> + lookupPath);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.mappingRegistry.acquireReadLock();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (handlerMethod != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          logger.debug(<span class=\"string\">\"Returning handler method [\"</span> + handlerMethod + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          logger.debug(<span class=\"string\">\"Did not find handler method for [\"</span> + lookupPath + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (handlerMethod != <span class=\"keyword\">null</span> ? handlerMethod.createWithResolvedBean() : <span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.mappingRegistry.releaseReadLock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> HandlerMethod <span class=\"title\">lookupHandlerMethod</span><span class=\"params\">(String lookupPath, HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    List&lt;Match&gt; matches = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    List&lt;T&gt; directPathMatches = <span class=\"keyword\">this</span>.mappingRegistry.getMappingsByUrl(lookupPath);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (directPathMatches != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      addMatchingMappings(directPathMatches, matches, request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (matches.isEmpty()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// No choice but to go through all mappings...</span></span><br><span class=\"line\">      addMatchingMappings(<span class=\"keyword\">this</span>.mappingRegistry.getMappings().keySet(), matches, request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!matches.isEmpty()) &#123;</span><br><span class=\"line\">      Comparator&lt;Match&gt; comparator = <span class=\"keyword\">new</span> MatchComparator(getMappingComparator(request));</span><br><span class=\"line\">      matches.sort(comparator);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">        logger.trace(<span class=\"string\">\"Found \"</span> + matches.size() + <span class=\"string\">\" matching mapping(s) for [\"</span> + lookupPath + <span class=\"string\">\"] : \"</span> + matches);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Match bestMatch = matches.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (matches.size() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CorsUtils.isPreFlightRequest(request)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> PREFLIGHT_AMBIGUOUS_MATCH;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Match secondBestMatch = matches.get(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (comparator.compare(bestMatch, secondBestMatch) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          Method m1 = bestMatch.handlerMethod.getMethod();</span><br><span class=\"line\">          Method m2 = secondBestMatch.handlerMethod.getMethod();</span><br><span class=\"line\">          <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Ambiguous handler methods mapped for HTTP path '\"</span> +</span><br><span class=\"line\">              request.getRequestURL() + <span class=\"string\">\"': &#123;\"</span> + m1 + <span class=\"string\">\", \"</span> + m2 + <span class=\"string\">\"&#125;\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      handleMatch(bestMatch.mapping, lookupPath, request);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> bestMatch.handlerMethod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> handleNoMatch(<span class=\"keyword\">this</span>.mappingRegistry.getMappings().keySet(), lookupPath, request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">addMatchingMappings</span><span class=\"params\">(Collection&lt;T&gt; mappings, List&lt;Match&gt; matches, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T mapping : mappings) &#123;</span><br><span class=\"line\">      T match = getMatchingMapping(mapping, request);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (match != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        matches.add(<span class=\"keyword\">new</span> Match(match, <span class=\"keyword\">this</span>.mappingRegistry.getMappings().get(mapping)));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>获取到了 handlerMethod 以后调用了 getHandlerExecutionChain 把匹配的 Intercepters 组装成了 HandlerExecutionChain 对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HandlerExecutionChain <span class=\"title\">getHandlerExecutionChain</span><span class=\"params\">(Object handler, HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">  HandlerExecutionChain chain = (handler <span class=\"keyword\">instanceof</span> HandlerExecutionChain ?</span><br><span class=\"line\">      (HandlerExecutionChain) handler : <span class=\"keyword\">new</span> HandlerExecutionChain(handler));</span><br><span class=\"line\"></span><br><span class=\"line\">  String lookupPath = <span class=\"keyword\">this</span>.urlPathHelper.getLookupPathForRequest(request);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (HandlerInterceptor interceptor : <span class=\"keyword\">this</span>.adaptedInterceptors) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (interceptor <span class=\"keyword\">instanceof</span> MappedInterceptor) &#123;</span><br><span class=\"line\">      MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mappedInterceptor.matches(lookupPath, <span class=\"keyword\">this</span>.pathMatcher)) &#123;</span><br><span class=\"line\">        chain.addInterceptor(mappedInterceptor.getInterceptor());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      chain.addInterceptor(interceptor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> chain;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-获取-HandlerAdapter\"><a href=\"#2-获取-HandlerAdapter\" class=\"headerlink\" title=\"2. 获取 HandlerAdapter\"></a>2. 获取 HandlerAdapter</h1><p>回到 doDispatchServlet 的代码片段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Determine handler adapter for the current request.</span></span><br><span class=\"line\">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br></pre></td></tr></table></figure>\n<p>调用了 getHandlerAdapter 获取 HandlerAdapter 实例 ha。<br>DispatchServlet 初始化的时候会把 appContext 里所有实现了 HandlerAdapter 的 bean 添加到 this.handlerAdapters 里，<br>然后通过 for 循环查找支持传入的 handler 的 HanderAdapter。支持 RequestMappingHandlerMapping 的是<br>RequestMappingHandlerAdapter。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> HandlerAdapter <span class=\"title\">getHandlerAdapter</span><span class=\"params\">(Object handler)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.handlerAdapters != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (HandlerAdapter ha : <span class=\"keyword\">this</span>.handlerAdapters) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">        logger.trace(<span class=\"string\">\"Testing handler adapter [\"</span> + ha + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ha.supports(handler)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ha;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ServletException(<span class=\"string\">\"No adapter for handler [\"</span> + handler +</span><br><span class=\"line\">      <span class=\"string\">\"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>RequestMappingHandlerAdapter 的 support 方法，如果 handler 的类型是 HandlerMethod 即支持，RequestMappingHandlerMapping 返回的 handler 类型就是 HandlerMethod</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Object handler)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (handler <span class=\"keyword\">instanceof</span> HandlerMethod &amp;&amp; supportsInternal((HandlerMethod) handler));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supportsInternal</span><span class=\"params\">(HandlerMethod handlerMethod)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-HandlerAdapter-执行-handler-方法。\"><a href=\"#3-HandlerAdapter-执行-handler-方法。\" class=\"headerlink\" title=\"3. HandlerAdapter 执行 handler 方法。\"></a>3. HandlerAdapter 执行 handler 方法。</h1><p>回到 doDispatchServlet 的代码片段,获取 ha 以后，先调用了 preHandle 里的 interceptors，如果返回是 true，<br>则执行了 ha.handle，执行了 handler。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Actually invoke the handler.</span></span><br><span class=\"line\">        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-1-RequestMappingHandlerAdapterd-的-handler-方法\"><a href=\"#3-1-RequestMappingHandlerAdapterd-的-handler-方法\" class=\"headerlink\" title=\"3.1 RequestMappingHandlerAdapterd 的 handler 方法\"></a>3.1 RequestMappingHandlerAdapterd 的 handler 方法</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ModelAndView <span class=\"title\">handle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> handleInternal(request, response, (HandlerMethod) handler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>handlerInternal 调用了 invokeHandlerMethod 执行 handlerMethod</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">handleInternal</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tHttpServletResponse response, HandlerMethod handlerMethod)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tModelAndView mav;</span><br><span class=\"line\">\tcheckRequest(request);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Execute invokeHandlerMethod in synchronized block if required.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.synchronizeOnSession) &#123;</span><br><span class=\"line\">\t\tHttpSession session = request.getSession(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (session != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tObject mutex = WebUtils.getSessionMutex(session);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (mutex) &#123;</span><br><span class=\"line\">\t\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// No HttpSession available -&gt; no mutex necessary</span></span><br><span class=\"line\">\t\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// No synchronization on session demanded at all...</span></span><br><span class=\"line\">\t\tmav = invokeHandlerMethod(request, response, handlerMethod);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!response.containsHeader(HEADER_CACHE_CONTROL)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123;</span><br><span class=\"line\">\t\t\tapplyCacheSeconds(response, <span class=\"keyword\">this</span>.cacheSecondsForSessionAttributeHandlers);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tprepareResponse(response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>invokeHandlerMethod 组装了两个实例，<br>ServletInvocableHandlerMethod 对象 invocableMethod 和 ModelAndViewContainer 对象 mavContainer</p>\n<p>把一堆必要的信息传递给了 invocableMethod,比如参数解释器 this.argumentResolvers,返回值处理器 this.retrunValueHandler 等。。。</p>\n<p>然后调用了方法 invocableMethod.invokeAndHandle(webRequest, mavContainer);</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> ModelAndView <span class=\"title\">invokeHandlerMethod</span><span class=\"params\">(HttpServletRequest request,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tHttpServletResponse response, HandlerMethod handlerMethod)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tServletWebRequest webRequest = <span class=\"keyword\">new</span> ServletWebRequest(request, response);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tWebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class=\"line\">\t\tModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.argumentResolvers != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tinvocableMethod.setHandlerMethodArgumentResolvers(<span class=\"keyword\">this</span>.argumentResolvers);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.returnValueHandlers != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tinvocableMethod.setHandlerMethodReturnValueHandlers(<span class=\"keyword\">this</span>.returnValueHandlers);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tinvocableMethod.setDataBinderFactory(binderFactory);</span><br><span class=\"line\">\t\tinvocableMethod.setParameterNameDiscoverer(<span class=\"keyword\">this</span>.parameterNameDiscoverer);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tModelAndViewContainer mavContainer = <span class=\"keyword\">new</span> ModelAndViewContainer();</span><br><span class=\"line\">\t\tmavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class=\"line\">\t\tmodelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class=\"line\">\t\tmavContainer.setIgnoreDefaultModelOnRedirect(<span class=\"keyword\">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tAsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class=\"line\">\t\tasyncWebRequest.setTimeout(<span class=\"keyword\">this</span>.asyncRequestTimeout);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class=\"line\">\t\tasyncManager.setTaskExecutor(<span class=\"keyword\">this</span>.taskExecutor);</span><br><span class=\"line\">\t\tasyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class=\"line\">\t\tasyncManager.registerCallableInterceptors(<span class=\"keyword\">this</span>.callableInterceptors);</span><br><span class=\"line\">\t\tasyncManager.registerDeferredResultInterceptors(<span class=\"keyword\">this</span>.deferredResultInterceptors);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class=\"line\">\t\t\tObject result = asyncManager.getConcurrentResult();</span><br><span class=\"line\">\t\t\tmavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\tasyncManager.clearConcurrentResult();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(<span class=\"string\">\"Found concurrent result value [\"</span> + result + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tinvocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tinvocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\twebRequest.requestCompleted();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>invokeAndHandle 调用了 invokeAndHandle 处理请求，如果返回值为空且请求被处理则调用 mavContainer.setRequestHandled(true)后返回。<br>如果返回值不为空则使用 this.returnValueHandlers.handleReturnValue 处理返回值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAndHandle</span><span class=\"params\">(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tObject... providedArgs)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class=\"line\">\tsetResponseStatus(webRequest);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (returnValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isRequestNotModified(webRequest) || getResponseStatus() != <span class=\"keyword\">null</span> || mavContainer.isRequestHandled()) &#123;</span><br><span class=\"line\">\t\t\tmavContainer.setRequestHandled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (StringUtils.hasText(getResponseStatusReason())) &#123;</span><br><span class=\"line\">\t\tmavContainer.setRequestHandled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tmavContainer.setRequestHandled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\tAssert.state(<span class=\"keyword\">this</span>.returnValueHandlers != <span class=\"keyword\">null</span>, <span class=\"string\">\"No return value handlers\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.returnValueHandlers.handleReturnValue(</span><br><span class=\"line\">\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.trace(getReturnValueHandlingErrorMessage(<span class=\"string\">\"Error handling return value\"</span>, returnValue), ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getMethodParameters 先调用了方法 getMethodArgumentValues(),getMethodArgumentValues 里为每一个参数检查是否有支持的参数解释器 argumentResovler，如果有的话则装备一个参数实例。如果找不到 methodResolver 的话就抛出异常。<br>得到参数列表 args 以后调用 doInvoke()方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invokeForRequest</span><span class=\"params\">(NativeWebRequest request, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tObject... providedArgs)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tObject[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">\"Invoking '\"</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"' with arguments \"</span> + Arrays.toString(args));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tObject returnValue = doInvoke(args);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.trace(<span class=\"string\">\"Method [\"</span> + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) +</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">\"] returned [\"</span> + returnValue + <span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> returnValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Get the method argument values for the current request.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class=\"meta\">@Nullable</span> ModelAndViewContainer mavContainer,</span><br><span class=\"line\">\t\tObject... providedArgs) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMethodParameter[] parameters = getMethodParameters();</span><br><span class=\"line\">\tObject[] args = <span class=\"keyword\">new</span> Object[parameters.length];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class=\"line\">\t\tMethodParameter parameter = parameters[i];</span><br><span class=\"line\">\t\tparameter.initParameterNameDiscovery(<span class=\"keyword\">this</span>.parameterNameDiscoverer);</span><br><span class=\"line\">\t\targs[i] = resolveProvidedArgument(parameter, providedArgs);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (args[i] != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.argumentResolvers.supportsParameter(parameter)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\targs[i] = <span class=\"keyword\">this</span>.argumentResolvers.resolveArgument(</span><br><span class=\"line\">\t\t\t\t\t\tparameter, mavContainer, request, <span class=\"keyword\">this</span>.dataBinderFactory);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t\tlogger.debug(getArgumentResolutionErrorMessage(<span class=\"string\">\"Failed to resolve\"</span>, i), ex);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (args[i] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Could not resolve method parameter at index \"</span> +</span><br><span class=\"line\">\t\t\t\t\tparameter.getParameterIndex() + <span class=\"string\">\" in \"</span> + parameter.getExecutable().toGenericString() +</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\": \"</span> + getArgumentResolutionErrorMessage(<span class=\"string\">\"No suitable resolver for\"</span>, i));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> args;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>doInvoke 调用了 getBridgedMethod().invoke(getBean(), args) 执行了我们用@RequestMapping 修饰的方法，并返回了结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InvocableHandlerMethod</span></span></span><br><span class=\"line\"><span class=\"class\">...</span></span><br><span class=\"line\"><span class=\"class\">...</span></span><br><span class=\"line\"><span class=\"class\">\t<span class=\"title\">protected</span> <span class=\"title\">Object</span> <span class=\"title\">doInvoke</span>(<span class=\"title\">Object</span>... <span class=\"title\">args</span>) <span class=\"title\">throws</span> <span class=\"title\">Exception</span> </span>&#123;</span><br><span class=\"line\">\t\tReflectionUtils.makeAccessible(getBridgedMethod());</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> getBridgedMethod().invoke(getBean(), args);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class=\"line\">\t\t\tassertTargetBean(getBridgedMethod(), getBean(), args);</span><br><span class=\"line\">\t\t\tString text = (ex.getMessage() != <span class=\"keyword\">null</span> ? ex.getMessage() : <span class=\"string\">\"Illegal argument\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(getInvocationErrorMessage(text, args), ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (InvocationTargetException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Unwrap for HandlerExceptionResolvers ...</span></span><br><span class=\"line\">\t\t\tThrowable targetException = ex.getTargetException();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (targetException <span class=\"keyword\">instanceof</span> RuntimeException) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> (RuntimeException) targetException;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetException <span class=\"keyword\">instanceof</span> Error) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> (Error) targetException;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetException <span class=\"keyword\">instanceof</span> Exception) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> (Exception) targetException;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tString text = getInvocationErrorMessage(<span class=\"string\">\"Failed to invoke handler method\"</span>, args);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(text, targetException);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"我的vscode配置","date":"2019-06-11T08:57:42.000Z","_content":"\n```json\n// Place your settings in this file to overwrite the default settings\n{\n    \"editor.tabSize\": 2,\n    \"editor.renderWhitespace\": \"all\",\n    \"editor.glyphMargin\": true,\n    \"editor.wordWrap\": \"on\",\n    \"eslint.enable\": true,\n    \"java.home\": \"/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\",\n    \"workbench.iconTheme\": \"material-icon-theme\",\n    \"vetur.validation.template\": false,\n    \"files.autoSave\": \"onFocusChange\",\n    \"window.zoomLevel\": 0,\n    \"gitlens.advanced.messages\": {\n        \"suppressShowKeyBindingsNotice\": true\n    },\n    \"gitlens.historyExplorer.enabled\": true,\n    \"todo-tree.defaultHighlight\": {\n        \"foreground\": \"green\",\n        \"type\": \"none\"\n    },\n    \"todo-tree.customHighlight\": {\n        \"TODO\": {},\n        \"FIXME\": {}\n    },\n    \"eslint.alwaysShowStatus\": true,\n    \"editor.formatOnType\": false,\n    \"breadcrumbs.enabled\": true,\n    \"search.quickOpen.includeSymbols\": true,\n    \"gitlens.views.fileHistory.enabled\": false,\n    \"gitlens.views.lineHistory.enabled\": false,\n    \"terminal.integrated.shell.osx\": \"/usr/local/bin/zsh\",\n    \"terminal.integrated.fontFamily\": \"Menlo for Powerline\",\n    \"vs-kubernetes\": {\n        \"vs-kubernetes.helm-path\": \"/Users/david/.vs-kubernetes/tools/helm/darwin-amd64/helm\",\n        \"vs-kubernetes.draft-path\": \"/Users/david/.vs-kubernetes/tools/draft/darwin-amd64/draft\"\n    },\n    \"workbench.colorTheme\": \"One Dark Pro Bold\",\n    \"material-icon-theme.folders.theme\": \"specific\",\n    \"material-icon-theme.folders.color\": \"#26a69a\",\n    \"material-icon-theme.activeIconPack\": \"angular\",\n    \"editor.fontSize\": 13,\n    \"terminal.integrated.fontSize\": 14,\n    \"editor.fontFamily\": \"SourceCodePro-Medium,Menlo, Monaco, 'Courier New', monospace\",\n    \"vetur.format.defaultFormatterOptions\": {\n        \"js-beautify-html\": {\n            \"wrap_attributes\": \"force-expand-multiline\"\n        },\n        \"prettyhtml\": {\n            \"printWidth\": 100,\n            \"singleQuote\": false,\n            \"wrapAttributes\": false,\n            \"sortAttributes\": false\n        },\n        \"prettier\": {\n            \"semi\": true,\n            \"singleQuote\": true\n        }\n    },\n    \"eslint.autoFixOnSave\": true,\n    \"files.associations\": {\n        \"*.vue\": \"vue\"\n    },\n    \"eslint.validate\": [\n        \"javascript\",\n        \"javascriptreact\",\n        {\n            \"language\": \"vue\",\n            \"autoFix\": true\n        }\n    ],\n    \"java.configuration.checkProjectSettingsExclusions\": false,\n    \"python.jediEnabled\": false,\n    \"python.condaPath\": \"conda\",\n    \"python.dataScience.sendSelectionToInteractiveWindow\": true,\n    \"editor.suggestSelection\": \"first\",\n    \"vsintellicode.modify.editor.suggestSelection\": \"automaticallyOverrodeDefaultValue\",\n    \"yaml.format.enable\": true,\n    \"diffEditor.ignoreTrimWhitespace\": true,\n    \"java.jdt.ls.vmargs\": \"-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication -javaagent:\\\"/Users/david/.vscode/extensions/gabrielbb.vscode-lombok-0.9.7/server/lombok.jar\\\" -Xbootclasspath/a:\\\"/Users/david/.vscode/extensions/gabrielbb.vscode-lombok-0.9.7/server/lombok.jar\\\"\",\n    \"liveshare.featureSet\": \"insiders\",\n    \"sync.gist\": \"xxxx\",\n    \"sync.autoDownload\": false,\n    \"sync.autoUpload\": false,\n    \"sync.forceDownload\": false,\n    \"sync.quietSync\": false,\n    \"sync.askGistName\": false,\n    \"sync.removeExtensions\": true,\n    \"sync.syncExtensions\": true\n    // \"eslint.options\": {\n    // \"rules\" : {\n    // \"vue/no-unused-vars\":0 \n    // }\n    // }\n}\n```","source":"_posts/2019-06-my-vscode-config.md","raw":"---\ntitle: 我的vscode配置\ndate: 2019-06-11 16:57:42\ntags:\n---\n\n```json\n// Place your settings in this file to overwrite the default settings\n{\n    \"editor.tabSize\": 2,\n    \"editor.renderWhitespace\": \"all\",\n    \"editor.glyphMargin\": true,\n    \"editor.wordWrap\": \"on\",\n    \"eslint.enable\": true,\n    \"java.home\": \"/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\",\n    \"workbench.iconTheme\": \"material-icon-theme\",\n    \"vetur.validation.template\": false,\n    \"files.autoSave\": \"onFocusChange\",\n    \"window.zoomLevel\": 0,\n    \"gitlens.advanced.messages\": {\n        \"suppressShowKeyBindingsNotice\": true\n    },\n    \"gitlens.historyExplorer.enabled\": true,\n    \"todo-tree.defaultHighlight\": {\n        \"foreground\": \"green\",\n        \"type\": \"none\"\n    },\n    \"todo-tree.customHighlight\": {\n        \"TODO\": {},\n        \"FIXME\": {}\n    },\n    \"eslint.alwaysShowStatus\": true,\n    \"editor.formatOnType\": false,\n    \"breadcrumbs.enabled\": true,\n    \"search.quickOpen.includeSymbols\": true,\n    \"gitlens.views.fileHistory.enabled\": false,\n    \"gitlens.views.lineHistory.enabled\": false,\n    \"terminal.integrated.shell.osx\": \"/usr/local/bin/zsh\",\n    \"terminal.integrated.fontFamily\": \"Menlo for Powerline\",\n    \"vs-kubernetes\": {\n        \"vs-kubernetes.helm-path\": \"/Users/david/.vs-kubernetes/tools/helm/darwin-amd64/helm\",\n        \"vs-kubernetes.draft-path\": \"/Users/david/.vs-kubernetes/tools/draft/darwin-amd64/draft\"\n    },\n    \"workbench.colorTheme\": \"One Dark Pro Bold\",\n    \"material-icon-theme.folders.theme\": \"specific\",\n    \"material-icon-theme.folders.color\": \"#26a69a\",\n    \"material-icon-theme.activeIconPack\": \"angular\",\n    \"editor.fontSize\": 13,\n    \"terminal.integrated.fontSize\": 14,\n    \"editor.fontFamily\": \"SourceCodePro-Medium,Menlo, Monaco, 'Courier New', monospace\",\n    \"vetur.format.defaultFormatterOptions\": {\n        \"js-beautify-html\": {\n            \"wrap_attributes\": \"force-expand-multiline\"\n        },\n        \"prettyhtml\": {\n            \"printWidth\": 100,\n            \"singleQuote\": false,\n            \"wrapAttributes\": false,\n            \"sortAttributes\": false\n        },\n        \"prettier\": {\n            \"semi\": true,\n            \"singleQuote\": true\n        }\n    },\n    \"eslint.autoFixOnSave\": true,\n    \"files.associations\": {\n        \"*.vue\": \"vue\"\n    },\n    \"eslint.validate\": [\n        \"javascript\",\n        \"javascriptreact\",\n        {\n            \"language\": \"vue\",\n            \"autoFix\": true\n        }\n    ],\n    \"java.configuration.checkProjectSettingsExclusions\": false,\n    \"python.jediEnabled\": false,\n    \"python.condaPath\": \"conda\",\n    \"python.dataScience.sendSelectionToInteractiveWindow\": true,\n    \"editor.suggestSelection\": \"first\",\n    \"vsintellicode.modify.editor.suggestSelection\": \"automaticallyOverrodeDefaultValue\",\n    \"yaml.format.enable\": true,\n    \"diffEditor.ignoreTrimWhitespace\": true,\n    \"java.jdt.ls.vmargs\": \"-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication -javaagent:\\\"/Users/david/.vscode/extensions/gabrielbb.vscode-lombok-0.9.7/server/lombok.jar\\\" -Xbootclasspath/a:\\\"/Users/david/.vscode/extensions/gabrielbb.vscode-lombok-0.9.7/server/lombok.jar\\\"\",\n    \"liveshare.featureSet\": \"insiders\",\n    \"sync.gist\": \"xxxx\",\n    \"sync.autoDownload\": false,\n    \"sync.autoUpload\": false,\n    \"sync.forceDownload\": false,\n    \"sync.quietSync\": false,\n    \"sync.askGistName\": false,\n    \"sync.removeExtensions\": true,\n    \"sync.syncExtensions\": true\n    // \"eslint.options\": {\n    // \"rules\" : {\n    // \"vue/no-unused-vars\":0 \n    // }\n    // }\n}\n```","slug":"my-vscode-config","published":1,"updated":"2019-06-11T09:12:49.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtu0018gmo5xwp2ojd2","content":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Place your settings in this file to overwrite the default settings</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"editor.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.renderWhitespace\"</span>: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.glyphMargin\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.wordWrap\"</span>: <span class=\"string\">\"on\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.enable\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"java.home\"</span>: <span class=\"string\">\"/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.iconTheme\"</span>: <span class=\"string\">\"material-icon-theme\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vetur.validation.template\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"files.autoSave\"</span>: <span class=\"string\">\"onFocusChange\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"window.zoomLevel\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"gitlens.advanced.messages\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"suppressShowKeyBindingsNotice\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"gitlens.historyExplorer.enabled\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"todo-tree.defaultHighlight\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"foreground\"</span>: <span class=\"string\">\"green\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"none\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"todo-tree.customHighlight\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"TODO\"</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"attr\">\"FIXME\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.alwaysShowStatus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.formatOnType\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"breadcrumbs.enabled\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"search.quickOpen.includeSymbols\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"gitlens.views.fileHistory.enabled\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"gitlens.views.lineHistory.enabled\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"terminal.integrated.shell.osx\"</span>: <span class=\"string\">\"/usr/local/bin/zsh\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"terminal.integrated.fontFamily\"</span>: <span class=\"string\">\"Menlo for Powerline\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vs-kubernetes\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"vs-kubernetes.helm-path\"</span>: <span class=\"string\">\"/Users/david/.vs-kubernetes/tools/helm/darwin-amd64/helm\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"vs-kubernetes.draft-path\"</span>: <span class=\"string\">\"/Users/david/.vs-kubernetes/tools/draft/darwin-amd64/draft\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.colorTheme\"</span>: <span class=\"string\">\"One Dark Pro Bold\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"material-icon-theme.folders.theme\"</span>: <span class=\"string\">\"specific\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"material-icon-theme.folders.color\"</span>: <span class=\"string\">\"#26a69a\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"material-icon-theme.activeIconPack\"</span>: <span class=\"string\">\"angular\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.fontSize\"</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"terminal.integrated.fontSize\"</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.fontFamily\"</span>: <span class=\"string\">\"SourceCodePro-Medium,Menlo, Monaco, 'Courier New', monospace\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"js-beautify-html\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-expand-multiline\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">\"prettyhtml\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"printWidth\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"wrapAttributes\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"sortAttributes\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">\"prettier\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"semi\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"files.associations\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"*.vue\"</span>: <span class=\"string\">\"vue\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"java.configuration.checkProjectSettingsExclusions\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"python.jediEnabled\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"python.condaPath\"</span>: <span class=\"string\">\"conda\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"python.dataScience.sendSelectionToInteractiveWindow\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.suggestSelection\"</span>: <span class=\"string\">\"first\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vsintellicode.modify.editor.suggestSelection\"</span>: <span class=\"string\">\"automaticallyOverrodeDefaultValue\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"yaml.format.enable\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"diffEditor.ignoreTrimWhitespace\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"java.jdt.ls.vmargs\"</span>: <span class=\"string\">\"-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication -javaagent:\\\"/Users/david/.vscode/extensions/gabrielbb.vscode-lombok-0.9.7/server/lombok.jar\\\" -Xbootclasspath/a:\\\"/Users/david/.vscode/extensions/gabrielbb.vscode-lombok-0.9.7/server/lombok.jar\\\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"liveshare.featureSet\"</span>: <span class=\"string\">\"insiders\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.gist\"</span>: <span class=\"string\">\"xxxx\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.autoDownload\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.autoUpload\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.forceDownload\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.quietSync\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.askGistName\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.removeExtensions\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.syncExtensions\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    // <span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">    // \"rules\" : &#123;</span><br><span class=\"line\">    // \"vue/no-unused-vars\":0 </span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Place your settings in this file to overwrite the default settings</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"editor.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.renderWhitespace\"</span>: <span class=\"string\">\"all\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.glyphMargin\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.wordWrap\"</span>: <span class=\"string\">\"on\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.enable\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"java.home\"</span>: <span class=\"string\">\"/Library/Java/JavaVirtualMachines/jdk1.8.0_111.jdk/Contents/Home\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.iconTheme\"</span>: <span class=\"string\">\"material-icon-theme\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vetur.validation.template\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"files.autoSave\"</span>: <span class=\"string\">\"onFocusChange\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"window.zoomLevel\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"gitlens.advanced.messages\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"suppressShowKeyBindingsNotice\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"gitlens.historyExplorer.enabled\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"todo-tree.defaultHighlight\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"foreground\"</span>: <span class=\"string\">\"green\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"none\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"todo-tree.customHighlight\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"TODO\"</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"attr\">\"FIXME\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.alwaysShowStatus\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.formatOnType\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"breadcrumbs.enabled\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"search.quickOpen.includeSymbols\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"gitlens.views.fileHistory.enabled\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"gitlens.views.lineHistory.enabled\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"terminal.integrated.shell.osx\"</span>: <span class=\"string\">\"/usr/local/bin/zsh\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"terminal.integrated.fontFamily\"</span>: <span class=\"string\">\"Menlo for Powerline\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vs-kubernetes\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"vs-kubernetes.helm-path\"</span>: <span class=\"string\">\"/Users/david/.vs-kubernetes/tools/helm/darwin-amd64/helm\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"vs-kubernetes.draft-path\"</span>: <span class=\"string\">\"/Users/david/.vs-kubernetes/tools/draft/darwin-amd64/draft\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"workbench.colorTheme\"</span>: <span class=\"string\">\"One Dark Pro Bold\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"material-icon-theme.folders.theme\"</span>: <span class=\"string\">\"specific\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"material-icon-theme.folders.color\"</span>: <span class=\"string\">\"#26a69a\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"material-icon-theme.activeIconPack\"</span>: <span class=\"string\">\"angular\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.fontSize\"</span>: <span class=\"number\">13</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"terminal.integrated.fontSize\"</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.fontFamily\"</span>: <span class=\"string\">\"SourceCodePro-Medium,Menlo, Monaco, 'Courier New', monospace\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"js-beautify-html\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"wrap_attributes\"</span>: <span class=\"string\">\"force-expand-multiline\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">\"prettyhtml\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"printWidth\"</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"wrapAttributes\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"sortAttributes\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">\"prettier\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"semi\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"files.associations\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"*.vue\"</span>: <span class=\"string\">\"vue\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"java.configuration.checkProjectSettingsExclusions\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"python.jediEnabled\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"python.condaPath\"</span>: <span class=\"string\">\"conda\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"python.dataScience.sendSelectionToInteractiveWindow\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"editor.suggestSelection\"</span>: <span class=\"string\">\"first\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"vsintellicode.modify.editor.suggestSelection\"</span>: <span class=\"string\">\"automaticallyOverrodeDefaultValue\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"yaml.format.enable\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"diffEditor.ignoreTrimWhitespace\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"java.jdt.ls.vmargs\"</span>: <span class=\"string\">\"-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication -javaagent:\\\"/Users/david/.vscode/extensions/gabrielbb.vscode-lombok-0.9.7/server/lombok.jar\\\" -Xbootclasspath/a:\\\"/Users/david/.vscode/extensions/gabrielbb.vscode-lombok-0.9.7/server/lombok.jar\\\"\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"liveshare.featureSet\"</span>: <span class=\"string\">\"insiders\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.gist\"</span>: <span class=\"string\">\"xxxx\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.autoDownload\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.autoUpload\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.forceDownload\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.quietSync\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.askGistName\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.removeExtensions\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"sync.syncExtensions\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    // <span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">    // \"rules\" : &#123;</span><br><span class=\"line\">    // \"vue/no-unused-vars\":0 </span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\">    // &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"unbutu 关闭 GUI","date":"2019-04-23T01:48:49.000Z","_content":"\n# 关闭\n\n```bash\nsudo systemctl set-default multi-user.target\n```\n\n# 开启\n\n```bash\nsudo systemctl set-default graphical.target\n```\n","source":"_posts/2019-04-unbutu-gui-switch.md","raw":"---\ntitle: unbutu 关闭 GUI\ndate: 2019-04-23 09:48:49\ntags: unbutu bash 运维\n---\n\n# 关闭\n\n```bash\nsudo systemctl set-default multi-user.target\n```\n\n# 开启\n\n```bash\nsudo systemctl set-default graphical.target\n```\n","slug":"unbutu-gui-switch","published":1,"updated":"2019-04-23T02:05:31.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtv001bgmo53gtt8czn","content":"<h1 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">set</span>-default multi-user.target</span><br></pre></td></tr></table></figure>\n<h1 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">set</span>-default graphical.target</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">set</span>-default multi-user.target</span><br></pre></td></tr></table></figure>\n<h1 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">set</span>-default graphical.target</span><br></pre></td></tr></table></figure>\n"},{"title":"ReentrantLock & Syncronized","date":"2020-10-22T06:10:56.000Z","_content":"\n## 先来一个ReentrantLock 与 Syncronized的比较\n\n \\ | ReentrantLock | Syncronized \n---------|----------|---------\n 锁实现机制| 依赖AQS | 监视器模式（monitor）\n 灵活性| 支持响应中断、超时、尝试获取锁 | 不灵活\n 释放形式| 必须显式调用unlock()释放锁 | 自动释放监视器\n 锁类型 | 非公平锁&公平锁 | 非公平锁 \n 条件队列 | 可关联多个条件队列  | 关联一个条件队列\n 可重入性 | 可重入 | 可重入\n\n ## 什么是AQS\n\n [美团的这篇文章详细介绍了AQS的机制](https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html)\n ","source":"_posts/2020-10-reenterlock-aqs-syncronized.md","raw":"---\ntitle: ReentrantLock & Syncronized\ndate: 2020-10-22 14:10:56\ntags: ReentryLock AQS javaCore concurrent\n---\n\n## 先来一个ReentrantLock 与 Syncronized的比较\n\n \\ | ReentrantLock | Syncronized \n---------|----------|---------\n 锁实现机制| 依赖AQS | 监视器模式（monitor）\n 灵活性| 支持响应中断、超时、尝试获取锁 | 不灵活\n 释放形式| 必须显式调用unlock()释放锁 | 自动释放监视器\n 锁类型 | 非公平锁&公平锁 | 非公平锁 \n 条件队列 | 可关联多个条件队列  | 关联一个条件队列\n 可重入性 | 可重入 | 可重入\n\n ## 什么是AQS\n\n [美团的这篇文章详细介绍了AQS的机制](https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html)\n ","slug":"reenterlock-aqs-syncronized","published":1,"updated":"2020-10-22T07:22:54.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtw001dgmo5e6x0v187","content":"<h2 id=\"先来一个ReentrantLock-与-Syncronized的比较\"><a href=\"#先来一个ReentrantLock-与-Syncronized的比较\" class=\"headerlink\" title=\"先来一个ReentrantLock 与 Syncronized的比较\"></a>先来一个ReentrantLock 与 Syncronized的比较</h2><table>\n<thead>\n<tr>\n<th>\\</th>\n<th>ReentrantLock</th>\n<th>Syncronized </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 锁实现机制</td>\n<td>依赖AQS</td>\n<td>监视器模式（monitor）</td>\n</tr>\n<tr>\n<td> 灵活性</td>\n<td>支持响应中断、超时、尝试获取锁</td>\n<td>不灵活</td>\n</tr>\n<tr>\n<td> 释放形式</td>\n<td>必须显式调用unlock()释放锁</td>\n<td>自动释放监视器</td>\n</tr>\n<tr>\n<td> 锁类型</td>\n<td>非公平锁&amp;公平锁</td>\n<td>非公平锁 </td>\n</tr>\n<tr>\n<td> 条件队列</td>\n<td>可关联多个条件队列</td>\n<td>关联一个条件队列</td>\n</tr>\n<tr>\n<td> 可重入性</td>\n<td>可重入</td>\n<td>可重入</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"什么是AQS\"><a href=\"#什么是AQS\" class=\"headerlink\" title=\"什么是AQS\"></a>什么是AQS</h2><p> <a href=\"https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html\" target=\"_blank\" rel=\"noopener\">美团的这篇文章详细介绍了AQS的机制</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"先来一个ReentrantLock-与-Syncronized的比较\"><a href=\"#先来一个ReentrantLock-与-Syncronized的比较\" class=\"headerlink\" title=\"先来一个ReentrantLock 与 Syncronized的比较\"></a>先来一个ReentrantLock 与 Syncronized的比较</h2><table>\n<thead>\n<tr>\n<th>\\</th>\n<th>ReentrantLock</th>\n<th>Syncronized </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> 锁实现机制</td>\n<td>依赖AQS</td>\n<td>监视器模式（monitor）</td>\n</tr>\n<tr>\n<td> 灵活性</td>\n<td>支持响应中断、超时、尝试获取锁</td>\n<td>不灵活</td>\n</tr>\n<tr>\n<td> 释放形式</td>\n<td>必须显式调用unlock()释放锁</td>\n<td>自动释放监视器</td>\n</tr>\n<tr>\n<td> 锁类型</td>\n<td>非公平锁&amp;公平锁</td>\n<td>非公平锁 </td>\n</tr>\n<tr>\n<td> 条件队列</td>\n<td>可关联多个条件队列</td>\n<td>关联一个条件队列</td>\n</tr>\n<tr>\n<td> 可重入性</td>\n<td>可重入</td>\n<td>可重入</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"什么是AQS\"><a href=\"#什么是AQS\" class=\"headerlink\" title=\"什么是AQS\"></a>什么是AQS</h2><p> <a href=\"https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html\" target=\"_blank\" rel=\"noopener\">美团的这篇文章详细介绍了AQS的机制</a></p>\n"},{"title":"docker-ce 离线安装","date":"2020-05-15T07:01:08.000Z","_content":"\n\n## 下载最新的docker-ce安装包\n\n下载最新的repo文件 [http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo](http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo)\n\n## 下载最新版本的 cotainerd.io,docker-ce,docker-ce-cli\n\n下载地址：\n官方：[https://download.docker.com/linux/centos/7/x86_64/stable/Packages/](https://download.docker.com/linux/centos/7/x86_64/stable/Packages/)\n阿里云镜像：[http://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/](http://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/)\n\n## 开始安装\n\n1、添加repo：将下载好的docker-ce.repo文件拷贝到/etc/etc/yum.repos.d/下；\n\n2、按顺序依次安装containerd.io、docker-ce-cli、container-selinux和docker-ce包\n\n## 解决缺少依赖的问题\n\n出现 “>=版本号”：说明你的系统上已经安装了这些包，只是这些包不是最新的，需要升级\n  以policycoreutils包为例，可以在[https://pkgs.org/](https://pkgs.org/)上搜索对应的最新的rpm包。\n\n## docker-ce proxy设置\n\n参考 [官网文档](https://docs.docker.com/config/daemon/systemd/)\n","source":"_posts/2020-05-docker-ce-offline-install.md","raw":"---\ntitle: docker-ce 离线安装\ndate: 2020-05-15 15:01:08\ntags: 运维 docker\n---\n\n\n## 下载最新的docker-ce安装包\n\n下载最新的repo文件 [http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo](http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo)\n\n## 下载最新版本的 cotainerd.io,docker-ce,docker-ce-cli\n\n下载地址：\n官方：[https://download.docker.com/linux/centos/7/x86_64/stable/Packages/](https://download.docker.com/linux/centos/7/x86_64/stable/Packages/)\n阿里云镜像：[http://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/](http://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/)\n\n## 开始安装\n\n1、添加repo：将下载好的docker-ce.repo文件拷贝到/etc/etc/yum.repos.d/下；\n\n2、按顺序依次安装containerd.io、docker-ce-cli、container-selinux和docker-ce包\n\n## 解决缺少依赖的问题\n\n出现 “>=版本号”：说明你的系统上已经安装了这些包，只是这些包不是最新的，需要升级\n  以policycoreutils包为例，可以在[https://pkgs.org/](https://pkgs.org/)上搜索对应的最新的rpm包。\n\n## docker-ce proxy设置\n\n参考 [官网文档](https://docs.docker.com/config/daemon/systemd/)\n","slug":"docker-ce-offline-install","published":1,"updated":"2020-05-15T07:07:12.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtx001hgmo5nqg2wesh","content":"<h2 id=\"下载最新的docker-ce安装包\"><a href=\"#下载最新的docker-ce安装包\" class=\"headerlink\" title=\"下载最新的docker-ce安装包\"></a>下载最新的docker-ce安装包</h2><p>下载最新的repo文件 <a href=\"http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p>\n<h2 id=\"下载最新版本的-cotainerd-io-docker-ce-docker-ce-cli\"><a href=\"#下载最新版本的-cotainerd-io-docker-ce-docker-ce-cli\" class=\"headerlink\" title=\"下载最新版本的 cotainerd.io,docker-ce,docker-ce-cli\"></a>下载最新版本的 cotainerd.io,docker-ce,docker-ce-cli</h2><p>下载地址：<br>官方：<a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a><br>阿里云镜像：<a href=\"http://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/</a></p>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><p>1、添加repo：将下载好的docker-ce.repo文件拷贝到/etc/etc/yum.repos.d/下；</p>\n<p>2、按顺序依次安装containerd.io、docker-ce-cli、container-selinux和docker-ce包</p>\n<h2 id=\"解决缺少依赖的问题\"><a href=\"#解决缺少依赖的问题\" class=\"headerlink\" title=\"解决缺少依赖的问题\"></a>解决缺少依赖的问题</h2><p>出现 “&gt;=版本号”：说明你的系统上已经安装了这些包，只是这些包不是最新的，需要升级<br>  以policycoreutils包为例，可以在<a href=\"https://pkgs.org/\" target=\"_blank\" rel=\"noopener\">https://pkgs.org/</a>上搜索对应的最新的rpm包。</p>\n<h2 id=\"docker-ce-proxy设置\"><a href=\"#docker-ce-proxy设置\" class=\"headerlink\" title=\"docker-ce proxy设置\"></a>docker-ce proxy设置</h2><p>参考 <a href=\"https://docs.docker.com/config/daemon/systemd/\" target=\"_blank\" rel=\"noopener\">官网文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"下载最新的docker-ce安装包\"><a href=\"#下载最新的docker-ce安装包\" class=\"headerlink\" title=\"下载最新的docker-ce安装包\"></a>下载最新的docker-ce安装包</h2><p>下载最新的repo文件 <a href=\"http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p>\n<h2 id=\"下载最新版本的-cotainerd-io-docker-ce-docker-ce-cli\"><a href=\"#下载最新版本的-cotainerd-io-docker-ce-docker-ce-cli\" class=\"headerlink\" title=\"下载最新版本的 cotainerd.io,docker-ce,docker-ce-cli\"></a>下载最新版本的 cotainerd.io,docker-ce,docker-ce-cli</h2><p>下载地址：<br>官方：<a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a><br>阿里云镜像：<a href=\"http://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/\" target=\"_blank\" rel=\"noopener\">http://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/</a></p>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><p>1、添加repo：将下载好的docker-ce.repo文件拷贝到/etc/etc/yum.repos.d/下；</p>\n<p>2、按顺序依次安装containerd.io、docker-ce-cli、container-selinux和docker-ce包</p>\n<h2 id=\"解决缺少依赖的问题\"><a href=\"#解决缺少依赖的问题\" class=\"headerlink\" title=\"解决缺少依赖的问题\"></a>解决缺少依赖的问题</h2><p>出现 “&gt;=版本号”：说明你的系统上已经安装了这些包，只是这些包不是最新的，需要升级<br>  以policycoreutils包为例，可以在<a href=\"https://pkgs.org/\" target=\"_blank\" rel=\"noopener\">https://pkgs.org/</a>上搜索对应的最新的rpm包。</p>\n<h2 id=\"docker-ce-proxy设置\"><a href=\"#docker-ce-proxy设置\" class=\"headerlink\" title=\"docker-ce proxy设置\"></a>docker-ce proxy设置</h2><p>参考 <a href=\"https://docs.docker.com/config/daemon/systemd/\" target=\"_blank\" rel=\"noopener\">官网文档</a></p>\n"},{"title":"浅谈设计模式原则","date":"2020-10-20T15:16:56.000Z","_content":"\n设计模式原则大概有一下几种：\n\n1. 开闭原则\n2. 里氏原则\n3. 依赖倒置原则\n4. 单一职责原则\n5. 接口隔离原则\n6. 迪米特原则\n7. 合成复用原则\n\n其中，最重要的是开闭原则，它是面向对象设计的终极目标。\n所谓开闭指的是对修改关闭，对扩展开放。\n开闭原则是当应用需求改变时，在不修改软件实体的源代码得前提下，可以扩展模块功能，使其满足新的需求。\n\n软件遵守开闭原则的话，软件测试只要对扩展的代码进行测试就可以了。\n\n而其他的原则则是为了达到开闭原则的目标的具体方案。\n\n**里氏原则** 禁止破换继承关系。\n\n**依赖倒置** 让我们面对接口编程。\n\n**单一职责** 描述了类职责的切分。\n \n**接口隔离** 描述了接口设计尽量要简单。\n\n**迪米特原则** 描述了降低耦合度，尽量只和必要的实体通信。\n\n**组合复用** 描述了优先用组合或聚合关系复用，少用继承妇幼","source":"_posts/2020-10-design-pattern-principal.md","raw":"---\ntitle: 浅谈设计模式原则\ndate: 2020-10-20 23:16:56\ntags: 设计\n---\n\n设计模式原则大概有一下几种：\n\n1. 开闭原则\n2. 里氏原则\n3. 依赖倒置原则\n4. 单一职责原则\n5. 接口隔离原则\n6. 迪米特原则\n7. 合成复用原则\n\n其中，最重要的是开闭原则，它是面向对象设计的终极目标。\n所谓开闭指的是对修改关闭，对扩展开放。\n开闭原则是当应用需求改变时，在不修改软件实体的源代码得前提下，可以扩展模块功能，使其满足新的需求。\n\n软件遵守开闭原则的话，软件测试只要对扩展的代码进行测试就可以了。\n\n而其他的原则则是为了达到开闭原则的目标的具体方案。\n\n**里氏原则** 禁止破换继承关系。\n\n**依赖倒置** 让我们面对接口编程。\n\n**单一职责** 描述了类职责的切分。\n \n**接口隔离** 描述了接口设计尽量要简单。\n\n**迪米特原则** 描述了降低耦合度，尽量只和必要的实体通信。\n\n**组合复用** 描述了优先用组合或聚合关系复用，少用继承妇幼","slug":"design-pattern-principal","published":1,"updated":"2020-10-20T15:47:52.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qty001kgmo5ygq5b85t","content":"<p>设计模式原则大概有一下几种：</p>\n<ol>\n<li>开闭原则</li>\n<li>里氏原则</li>\n<li>依赖倒置原则</li>\n<li>单一职责原则</li>\n<li>接口隔离原则</li>\n<li>迪米特原则</li>\n<li>合成复用原则</li>\n</ol>\n<p>其中，最重要的是开闭原则，它是面向对象设计的终极目标。<br>所谓开闭指的是对修改关闭，对扩展开放。<br>开闭原则是当应用需求改变时，在不修改软件实体的源代码得前提下，可以扩展模块功能，使其满足新的需求。</p>\n<p>软件遵守开闭原则的话，软件测试只要对扩展的代码进行测试就可以了。</p>\n<p>而其他的原则则是为了达到开闭原则的目标的具体方案。</p>\n<p><strong>里氏原则</strong> 禁止破换继承关系。</p>\n<p><strong>依赖倒置</strong> 让我们面对接口编程。</p>\n<p><strong>单一职责</strong> 描述了类职责的切分。</p>\n<p><strong>接口隔离</strong> 描述了接口设计尽量要简单。</p>\n<p><strong>迪米特原则</strong> 描述了降低耦合度，尽量只和必要的实体通信。</p>\n<p><strong>组合复用</strong> 描述了优先用组合或聚合关系复用，少用继承妇幼</p>\n","site":{"data":{}},"excerpt":"","more":"<p>设计模式原则大概有一下几种：</p>\n<ol>\n<li>开闭原则</li>\n<li>里氏原则</li>\n<li>依赖倒置原则</li>\n<li>单一职责原则</li>\n<li>接口隔离原则</li>\n<li>迪米特原则</li>\n<li>合成复用原则</li>\n</ol>\n<p>其中，最重要的是开闭原则，它是面向对象设计的终极目标。<br>所谓开闭指的是对修改关闭，对扩展开放。<br>开闭原则是当应用需求改变时，在不修改软件实体的源代码得前提下，可以扩展模块功能，使其满足新的需求。</p>\n<p>软件遵守开闭原则的话，软件测试只要对扩展的代码进行测试就可以了。</p>\n<p>而其他的原则则是为了达到开闭原则的目标的具体方案。</p>\n<p><strong>里氏原则</strong> 禁止破换继承关系。</p>\n<p><strong>依赖倒置</strong> 让我们面对接口编程。</p>\n<p><strong>单一职责</strong> 描述了类职责的切分。</p>\n<p><strong>接口隔离</strong> 描述了接口设计尽量要简单。</p>\n<p><strong>迪米特原则</strong> 描述了降低耦合度，尽量只和必要的实体通信。</p>\n<p><strong>组合复用</strong> 描述了优先用组合或聚合关系复用，少用继承妇幼</p>\n"},{"title":"利用bash制作守护进程的脚本","date":"2018-10-23T03:33:40.000Z","_content":"\n# 运用场景\n\n在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。\n\n## 1. 记录进程的PID\n\n为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID\n\n我们可以利用bash变量\\!\\$ 获取Shell最后运行的后台Process的PID\n\nExample:\n\n```bash\n#!/bin/bash\njava -jar myapp.jar & echo $! > ./pid.file &\n```\n\n这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中\n\n## 2. 监测进程是否在运行\n\n利用 kill -0 检测进程是否存在\nkill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。\n\n```bash\nPID=$(cat ./pid.file) > /dev/null 2>&1\nkill -0 ${SAUNA_PID} > /dev/null 2>&1\nIS_RUNNING=$?\n```\n\n## 3. 完整脚本\n\nstart.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\nWATCH_PID_FILE=${HOME}/pids/watch.pid\n\n#进程PID输出到文件\njava -jar myapp.jar & echo $! > ${PID_FILE} 2>/dev/null &\nsleep 5\n\nsh watch.sh > watch.log 2>&1 &\n\necho $! > ${PID_FILE}\n\n\n```\n\nwatch.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\n\nif [ -f \"$PID_FILE\" ]\nthen\n#如果PID文件存在\n  PID=$(cat ${SAUNA_PID_FILE}) > /dev/null 2>&1\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\nelse\n  PID=\"0000\"\n  IS_RUNNING=1\nfi\n\n#检测循环\nwhile true\ndo\n  # 5 秒检测一次\n  sleep 5\n  if [ ${IS_RUNNING} -ne 0 ] ; then\n    echo \"service is dead. restarting...\";\n    sh start.sh\n    exit 0;\n  fi\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\ndone\n\n```\n\n**注意** stop脚本里要kill掉watch.sh ，不然会重复启动。","source":"_posts/2018-10-bash-process-watcher.md","raw":"---\ntitle: 利用bash制作守护进程的脚本\ndate: 2018-10-23 11:33:40\ntags:\n---\n\n# 运用场景\n\n在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。\n\n## 1. 记录进程的PID\n\n为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID\n\n我们可以利用bash变量\\!\\$ 获取Shell最后运行的后台Process的PID\n\nExample:\n\n```bash\n#!/bin/bash\njava -jar myapp.jar & echo $! > ./pid.file &\n```\n\n这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中\n\n## 2. 监测进程是否在运行\n\n利用 kill -0 检测进程是否存在\nkill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。\n\n```bash\nPID=$(cat ./pid.file) > /dev/null 2>&1\nkill -0 ${SAUNA_PID} > /dev/null 2>&1\nIS_RUNNING=$?\n```\n\n## 3. 完整脚本\n\nstart.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\nWATCH_PID_FILE=${HOME}/pids/watch.pid\n\n#进程PID输出到文件\njava -jar myapp.jar & echo $! > ${PID_FILE} 2>/dev/null &\nsleep 5\n\nsh watch.sh > watch.log 2>&1 &\n\necho $! > ${PID_FILE}\n\n\n```\n\nwatch.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\n\nif [ -f \"$PID_FILE\" ]\nthen\n#如果PID文件存在\n  PID=$(cat ${SAUNA_PID_FILE}) > /dev/null 2>&1\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\nelse\n  PID=\"0000\"\n  IS_RUNNING=1\nfi\n\n#检测循环\nwhile true\ndo\n  # 5 秒检测一次\n  sleep 5\n  if [ ${IS_RUNNING} -ne 0 ] ; then\n    echo \"service is dead. restarting...\";\n    sh start.sh\n    exit 0;\n  fi\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\ndone\n\n```\n\n**注意** stop脚本里要kill掉watch.sh ，不然会重复启动。","slug":"bash-process-watcher","published":1,"updated":"2018-10-23T05:25:52.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgki0qtz001ogmo5yhshi3e7","content":"<h1 id=\"运用场景\"><a href=\"#运用场景\" class=\"headerlink\" title=\"运用场景\"></a>运用场景</h1><p>在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。</p>\n<h2 id=\"1-记录进程的PID\"><a href=\"#1-记录进程的PID\" class=\"headerlink\" title=\"1. 记录进程的PID\"></a>1. 记录进程的PID</h2><p>为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID</p>\n<p>我们可以利用bash变量!\\$ 获取Shell最后运行的后台Process的PID</p>\n<p>Example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; ./pid.file &amp;</span><br></pre></td></tr></table></figure>\n<p>这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中</p>\n<h2 id=\"2-监测进程是否在运行\"><a href=\"#2-监测进程是否在运行\" class=\"headerlink\" title=\"2. 监测进程是否在运行\"></a>2. 监测进程是否在运行</h2><p>利用 kill -0 检测进程是否存在<br>kill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(cat ./pid.file) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;SAUNA_PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">IS_RUNNING=$?</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-完整脚本\"><a href=\"#3-完整脚本\" class=\"headerlink\" title=\"3. 完整脚本\"></a>3. 完整脚本</h2><p>start.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\">WATCH_PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/watch.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程PID输出到文件</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span> 2&gt;/dev/null &amp;</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\">sh watch.sh &gt; watch.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span></span><br></pre></td></tr></table></figure>\n<p>watch.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$PID_FILE</span>\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\">#如果PID文件存在</span></span><br><span class=\"line\">  PID=$(cat <span class=\"variable\">$&#123;SAUNA_PID_FILE&#125;</span>) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  PID=<span class=\"string\">\"0000\"</span></span><br><span class=\"line\">  IS_RUNNING=1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检测循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 5 秒检测一次</span></span><br><span class=\"line\">  sleep 5</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;IS_RUNNING&#125;</span> -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"service is dead. restarting...\"</span>;</span><br><span class=\"line\">    sh start.sh</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0;</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong> stop脚本里要kill掉watch.sh ，不然会重复启动。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"运用场景\"><a href=\"#运用场景\" class=\"headerlink\" title=\"运用场景\"></a>运用场景</h1><p>在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。</p>\n<h2 id=\"1-记录进程的PID\"><a href=\"#1-记录进程的PID\" class=\"headerlink\" title=\"1. 记录进程的PID\"></a>1. 记录进程的PID</h2><p>为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID</p>\n<p>我们可以利用bash变量!\\$ 获取Shell最后运行的后台Process的PID</p>\n<p>Example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; ./pid.file &amp;</span><br></pre></td></tr></table></figure>\n<p>这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中</p>\n<h2 id=\"2-监测进程是否在运行\"><a href=\"#2-监测进程是否在运行\" class=\"headerlink\" title=\"2. 监测进程是否在运行\"></a>2. 监测进程是否在运行</h2><p>利用 kill -0 检测进程是否存在<br>kill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(cat ./pid.file) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;SAUNA_PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">IS_RUNNING=$?</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-完整脚本\"><a href=\"#3-完整脚本\" class=\"headerlink\" title=\"3. 完整脚本\"></a>3. 完整脚本</h2><p>start.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\">WATCH_PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/watch.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程PID输出到文件</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span> 2&gt;/dev/null &amp;</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\">sh watch.sh &gt; watch.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span></span><br></pre></td></tr></table></figure>\n<p>watch.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$PID_FILE</span>\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\">#如果PID文件存在</span></span><br><span class=\"line\">  PID=$(cat <span class=\"variable\">$&#123;SAUNA_PID_FILE&#125;</span>) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  PID=<span class=\"string\">\"0000\"</span></span><br><span class=\"line\">  IS_RUNNING=1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检测循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 5 秒检测一次</span></span><br><span class=\"line\">  sleep 5</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;IS_RUNNING&#125;</span> -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"service is dead. restarting...\"</span>;</span><br><span class=\"line\">    sh start.sh</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0;</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong> stop脚本里要kill掉watch.sh ，不然会重复启动。</p>\n"}],"PostAsset":[{"_id":"source/_posts/2018-11-springmvc-find-request-handler/RequestMappingHandlerMapping_uml_class.jpg","post":"ckgki0qtt0014gmo5f44o2e3b","slug":"RequestMappingHandlerMapping_uml_class.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2018-10-springmvc-resquest-flow/DispatcherServletSequence.jpg","post":"ckgki0qtn000ogmo52j42p934","slug":"DispatcherServletSequence.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2018-10-springmvc-resquest-flow/springmvc_class.jpg","post":"ckgki0qtn000ogmo52j42p934","slug":"springmvc_class.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckgki0qsd0001gmo5ol2dw2ew","category_id":"ckgki0qsj0003gmo5yu5uvzik","_id":"ckgki0qsm0006gmo5yrbs1rxi"},{"post_id":"ckgki0qtc000agmo55no9q5gl","category_id":"ckgki0qsj0003gmo5yu5uvzik","_id":"ckgki0qtj000ggmo56vu3p3qi"},{"post_id":"ckgki0qtd000dgmo5uk1x1mo6","category_id":"ckgki0qsj0003gmo5yu5uvzik","_id":"ckgki0qtl000kgmo51aau56fl"},{"post_id":"ckgki0qtb0009gmo5dbrld9ii","category_id":"ckgki0qtd000bgmo5inqploih","_id":"ckgki0qtm000mgmo5o5gshu9w"},{"post_id":"ckgki0qti000fgmo5c8j4e6nv","category_id":"ckgki0qsj0003gmo5yu5uvzik","_id":"ckgki0qtn000qgmo58oidhm1e"},{"post_id":"ckgki0qte000egmo54of4gw42","category_id":"ckgki0qtk000igmo5pxra4bjo","_id":"ckgki0qtq000vgmo507ylz19z"},{"post_id":"ckgki0qto000rgmo5z9h32k16","category_id":"ckgki0qtd000bgmo5inqploih","_id":"ckgki0qts0011gmo5gold66d5"},{"post_id":"ckgki0qtk000jgmo5eoxpm5kk","category_id":"ckgki0qtk000igmo5pxra4bjo","_id":"ckgki0qtt0015gmo56mhrvfsr"},{"post_id":"ckgki0qtr000xgmo593j68jov","category_id":"ckgki0qsj0003gmo5yu5uvzik","_id":"ckgki0qtv0019gmo5rlsjor5o"},{"post_id":"ckgki0qtm000lgmo5kztzyaeu","category_id":"ckgki0qtq000ugmo5fqxtkgpv","_id":"ckgki0qtw001cgmo55j1u1ex1"},{"post_id":"ckgki0qts0010gmo536tdiwma","category_id":"ckgki0qsj0003gmo5yu5uvzik","_id":"ckgki0qtw001egmo5ld2swcqx"},{"post_id":"ckgki0qtt0014gmo5f44o2e3b","category_id":"ckgki0qtt0012gmo56gr2n4u9","_id":"ckgki0qty001igmo5gmobu4bs"},{"post_id":"ckgki0qtn000ogmo52j42p934","category_id":"ckgki0qtt0012gmo56gr2n4u9","_id":"ckgki0qtz001lgmo53us3izpd"}],"PostTag":[{"post_id":"ckgki0qsd0001gmo5ol2dw2ew","tag_id":"ckgki0qsk0004gmo51wod0lgv","_id":"ckgki0qsn0007gmo5u6sf20jo"},{"post_id":"ckgki0qsd0001gmo5ol2dw2ew","tag_id":"ckgki0qsm0005gmo5qzut7acs","_id":"ckgki0qsn0008gmo5uifv8sso"},{"post_id":"ckgki0qtb0009gmo5dbrld9ii","tag_id":"ckgki0qtd000cgmo5l0e77o0y","_id":"ckgki0qtr000wgmo54z2hz5jv"},{"post_id":"ckgki0qtb0009gmo5dbrld9ii","tag_id":"ckgki0qtj000hgmo5yr0dqnzd","_id":"ckgki0qtr000ygmo5rvhtkww2"},{"post_id":"ckgki0qtb0009gmo5dbrld9ii","tag_id":"ckgki0qtm000ngmo5ac6mhuii","_id":"ckgki0qtt0013gmo5kqwag7gv"},{"post_id":"ckgki0qto000rgmo5z9h32k16","tag_id":"ckgki0qtd000cgmo5l0e77o0y","_id":"ckgki0qtu0016gmo5cy3x0vnr"},{"post_id":"ckgki0qtc000agmo55no9q5gl","tag_id":"ckgki0qtp000sgmo51yhaisg6","_id":"ckgki0qtv001agmo505ju2bwb"},{"post_id":"ckgki0qtd000dgmo5uk1x1mo6","tag_id":"ckgki0qsk0004gmo51wod0lgv","_id":"ckgki0qtx001ggmo5m855ndnk"},{"post_id":"ckgki0qtd000dgmo5uk1x1mo6","tag_id":"ckgki0qtj000hgmo5yr0dqnzd","_id":"ckgki0qty001jgmo5rdv9z4p0"},{"post_id":"ckgki0qtd000dgmo5uk1x1mo6","tag_id":"ckgki0qtu0017gmo54a4khmxd","_id":"ckgki0qtz001ngmo5kucv4jk3"},{"post_id":"ckgki0qte000egmo54of4gw42","tag_id":"ckgki0qtx001fgmo5mxbrvc9c","_id":"ckgki0qu0001rgmo5tdexydek"},{"post_id":"ckgki0qte000egmo54of4gw42","tag_id":"ckgki0qtz001mgmo5nymm9d11","_id":"ckgki0qu0001sgmo5hr9snfb3"},{"post_id":"ckgki0qte000egmo54of4gw42","tag_id":"ckgki0qu0001pgmo5uf1w1e7i","_id":"ckgki0qu1001ugmo5loqbvno3"},{"post_id":"ckgki0qti000fgmo5c8j4e6nv","tag_id":"ckgki0qu0001qgmo5tl6umuyz","_id":"ckgki0qu1001ygmo5da6rqoj0"},{"post_id":"ckgki0qti000fgmo5c8j4e6nv","tag_id":"ckgki0qu0001tgmo5dfpj6imb","_id":"ckgki0qu1001zgmo5jhip24be"},{"post_id":"ckgki0qti000fgmo5c8j4e6nv","tag_id":"ckgki0qu1001vgmo5eqd3ygyx","_id":"ckgki0qu20021gmo5ajk7nuo5"},{"post_id":"ckgki0qti000fgmo5c8j4e6nv","tag_id":"ckgki0qu1001wgmo5keiqp335","_id":"ckgki0qu20022gmo529ckev0o"},{"post_id":"ckgki0qtk000jgmo5eoxpm5kk","tag_id":"ckgki0qtx001fgmo5mxbrvc9c","_id":"ckgki0qu30027gmo5kgpm8pdg"},{"post_id":"ckgki0qtk000jgmo5eoxpm5kk","tag_id":"ckgki0qu10020gmo56sxy4c1i","_id":"ckgki0qu30028gmo53teawomk"},{"post_id":"ckgki0qtk000jgmo5eoxpm5kk","tag_id":"ckgki0qu20023gmo5gn06jjn5","_id":"ckgki0qu3002agmo57sbcu3au"},{"post_id":"ckgki0qtk000jgmo5eoxpm5kk","tag_id":"ckgki0qu10020gmo56sxy4c1i","_id":"ckgki0qu4002bgmo5s045gpw9"},{"post_id":"ckgki0qtk000jgmo5eoxpm5kk","tag_id":"ckgki0qu20025gmo5po5uctyy","_id":"ckgki0qu4002dgmo5y3mxx0mq"},{"post_id":"ckgki0qtm000lgmo5kztzyaeu","tag_id":"ckgki0qtx001fgmo5mxbrvc9c","_id":"ckgki0qu4002egmo5pmprzzgg"},{"post_id":"ckgki0qtn000ogmo52j42p934","tag_id":"ckgki0qtx001fgmo5mxbrvc9c","_id":"ckgki0qu4002hgmo570q5vz8l"},{"post_id":"ckgki0qtn000ogmo52j42p934","tag_id":"ckgki0qu4002cgmo5a88r4uv2","_id":"ckgki0qu5002igmo5qxwc7uf0"},{"post_id":"ckgki0qtn000ogmo52j42p934","tag_id":"ckgki0qu4002fgmo57lwum05c","_id":"ckgki0qu5002kgmo5025fa6rk"},{"post_id":"ckgki0qtq000tgmo537rigvpf","tag_id":"ckgki0qu4002ggmo58dwusw92","_id":"ckgki0qu5002lgmo5nx5y08cq"},{"post_id":"ckgki0qtr000xgmo593j68jov","tag_id":"ckgki0qsk0004gmo51wod0lgv","_id":"ckgki0qu6002ogmo5ddycrzw3"},{"post_id":"ckgki0qtr000xgmo593j68jov","tag_id":"ckgki0qu5002jgmo5cbwcok8y","_id":"ckgki0qu6002pgmo5u8wza0ye"},{"post_id":"ckgki0qtr000xgmo593j68jov","tag_id":"ckgki0qu5002mgmo5o3soqpv4","_id":"ckgki0qu6002rgmo5x2t5p49b"},{"post_id":"ckgki0qts0010gmo536tdiwma","tag_id":"ckgki0qsk0004gmo51wod0lgv","_id":"ckgki0qu7002tgmo508q8brp9"},{"post_id":"ckgki0qts0010gmo536tdiwma","tag_id":"ckgki0qu5002jgmo5cbwcok8y","_id":"ckgki0qu7002ugmo57e4yea21"},{"post_id":"ckgki0qts0010gmo536tdiwma","tag_id":"ckgki0qu6002qgmo5bxed1ccm","_id":"ckgki0qu7002wgmo5bam4b6lr"},{"post_id":"ckgki0qtt0014gmo5f44o2e3b","tag_id":"ckgki0qtx001fgmo5mxbrvc9c","_id":"ckgki0qu8002zgmo5h9t9r2cd"},{"post_id":"ckgki0qtt0014gmo5f44o2e3b","tag_id":"ckgki0qu4002cgmo5a88r4uv2","_id":"ckgki0qu80030gmo5u5fogrzh"},{"post_id":"ckgki0qtt0014gmo5f44o2e3b","tag_id":"ckgki0qu4002fgmo57lwum05c","_id":"ckgki0qu90032gmo5nedjif0u"},{"post_id":"ckgki0qtv001bgmo53gtt8czn","tag_id":"ckgki0qu8002ygmo5gxax4vim","_id":"ckgki0qu90033gmo58acbzyuq"},{"post_id":"ckgki0qtw001dgmo5e6x0v187","tag_id":"ckgki0qu90031gmo5tygh12sw","_id":"ckgki0qu90035gmo5xu0tj78b"},{"post_id":"ckgki0qtx001hgmo5nqg2wesh","tag_id":"ckgki0qu90034gmo5hyj05573","_id":"ckgki0qu90037gmo5jxb31f6g"},{"post_id":"ckgki0qty001kgmo5ygq5b85t","tag_id":"ckgki0qu90036gmo5rd224o8h","_id":"ckgki0qu90038gmo5jo52n4fp"}],"Tag":[{"name":"bash","_id":"ckgki0qsk0004gmo51wod0lgv"},{"name":"args","_id":"ckgki0qsm0005gmo5qzut7acs"},{"name":"git","_id":"ckgki0qtd000cgmo5l0e77o0y"},{"name":"command","_id":"ckgki0qtj000hgmo5yr0dqnzd"},{"name":"node","_id":"ckgki0qtm000ngmo5ac6mhuii"},{"name":"elasticsearch","_id":"ckgki0qtp000sgmo51yhaisg6"},{"name":"sync","_id":"ckgki0qtu0017gmo54a4khmxd"},{"name":"spring","_id":"ckgki0qtx001fgmo5mxbrvc9c"},{"name":"handlerMethodResolver","_id":"ckgki0qtz001mgmo5nymm9d11"},{"name":"springMvc","_id":"ckgki0qu0001pgmo5uf1w1e7i"},{"name":"harddisk","_id":"ckgki0qu0001qgmo5tl6umuyz"},{"name":"linux","_id":"ckgki0qu0001tgmo5dfpj6imb"},{"name":"mount","_id":"ckgki0qu1001vgmo5eqd3ygyx"},{"name":"format","_id":"ckgki0qu1001wgmo5keiqp335"},{"name":"scope","_id":"ckgki0qu10020gmo56sxy4c1i"},{"name":"java","_id":"ckgki0qu20023gmo5gn06jjn5"},{"name":"译","_id":"ckgki0qu20025gmo5po5uctyy"},{"name":"源码解析","_id":"ckgki0qu4002cgmo5a88r4uv2"},{"name":"springMVC","_id":"ckgki0qu4002fgmo57lwum05c"},{"name":"k8s","_id":"ckgki0qu4002ggmo58dwusw92"},{"name":"ssh","_id":"ckgki0qu5002jgmo5cbwcok8y"},{"name":"remote","_id":"ckgki0qu5002mgmo5o3soqpv4"},{"name":"swap","_id":"ckgki0qu6002qgmo5bxed1ccm"},{"name":"unbutu bash 运维","_id":"ckgki0qu8002ygmo5gxax4vim"},{"name":"ReentryLock AQS javaCore concurrent","_id":"ckgki0qu90031gmo5tygh12sw"},{"name":"运维 docker","_id":"ckgki0qu90034gmo5hyj05573"},{"name":"设计","_id":"ckgki0qu90036gmo5rd224o8h"}]}}