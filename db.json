{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/fingerprint.jpg","path":"images/fingerprint.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"source/images/avatar_960_960.jpg","path":"images/avatar_960_960.jpg","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"0da176ffb3d5a7ba64c391ea270eafde84db2e56","modified":1540437997626},{"_id":"themes/next/.all-contributorsrc","hash":"e32dc4075e304af04b98d0726d489081bea722c0","modified":1540609879576},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1540609879576},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1540609879576},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1540609879577},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1540609879577},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1540794729625},{"_id":"themes/next/.git","hash":"042ff34da0707513a5681580b37513c890c671ef","modified":1540609879564},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1540609879578},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1540609879578},{"_id":"themes/next/bower.json","hash":"23379fec9b4f70bc2611433ac3770445a8ca18d9","modified":1540609879579},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1540609879578},{"_id":"themes/next/README.md","hash":"ee7119baf976616a84d3c9c10fcab567995dc98e","modified":1540609879579},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1540609879579},{"_id":"themes/next/_config.yml","hash":"5e2177dfdc2973ec73296ebdf2b319fcf18869f8","modified":1540794729626},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1540609879584},{"_id":"themes/next/package.json","hash":"901c9bf4743df8f1806b5bcb5e93b54f6aee0ea3","modified":1540609879599},{"_id":"source/_posts/2018-10-bash-args.md","hash":"65d289064977f97225448778a72510978928784d","modified":1540264411324},{"_id":"source/_posts/2018-10-bash-process-watcher.md","hash":"ed7dcce8c9d6b43e44c53930fa6cc7fd1ad965bc","modified":1540272352570},{"_id":"source/_posts/2018-10-custom-handler-method-argument-resolver.md","hash":"0aa0f8fe2aac469a7274f3e1f99b8cc1fccbe4dc","modified":1540433612925},{"_id":"source/_posts/2018-10-es-server-config.md","hash":"64b9ab0df132b23c6740636379d0c62fceae2383","modified":1540264918844},{"_id":"source/_posts/2018-10-git-credential.md","hash":"05302bdf05d9bc2854d4052930a3f2a52fefbf5e","modified":1540795023593},{"_id":"source/_posts/2018-10-linux-mount-harddisk.md","hash":"72c5fef0b26ba68ea199724104ebb3b690457a78","modified":1540263532062},{"_id":"source/_posts/2018-10-use-of-application-context-aware.md","hash":"afb8d619eb1b744e7753d44cb7d6432d20f9dabc","modified":1540523915373},{"_id":"source/_posts/2018-10-rsync.md","hash":"e021fe606f68698ee58dc6a5ad2b4798fc7954e9","modified":1540260225748},{"_id":"source/_posts/2018-10-spring-custom-scope.md","hash":"9284cc7592c34eeb04a2e48220046a09eb8ecb1a","modified":1540524468694},{"_id":"source/categories/index.md","hash":"35e8064644f4c139653d4134005ef4def8404848","modified":1540258645491},{"_id":"source/images/fingerprint.jpg","hash":"fda6b9c66b78bc4ff760978b48431bb95ab5d9f0","modified":1540439383187},{"_id":"source/tags/index.md","hash":"0ad168e3fe7d209c4f2a2d13a72950adfb113b2a","modified":1540258503061},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1540609879577},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1540609879577},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1540609879578},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1540609879578},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1540609879578},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1540609879578},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1540609879580},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1540609879580},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1540609879580},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1540609879580},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1540609879580},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1540609879580},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1540609879580},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1540609879581},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1540609879581},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1540609879584},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1540609879584},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1540609879584},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1540609879584},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1540609879584},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1540609879584},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1540609879585},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1540609879585},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1540609879585},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1540609879585},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1540609879585},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1540609879586},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1540609879585},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1540609879586},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1540609879586},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1540609879586},{"_id":"themes/next/layout/_layout.swig","hash":"85de0662a1b136277a72f8d8b4b1425a006f377e","modified":1540609879587},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1540609879586},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1540609879598},{"_id":"themes/next/layout/page.swig","hash":"862b361852fb6d7a95bfb6077922410a33cd3126","modified":1540609879599},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1540609879598},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1540609879599},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1540609879599},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1540609879598},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1540609879599},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1540609879599},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1540609879600},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1540609879630},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1540609879630},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1540609879630},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1540609879599},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540609879617},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1540609879582},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1540609879582},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1540609879582},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1540609879582},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1540609879583},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1540609879583},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"8ac2f5d2a023211d8d8ea626cbf6b8dea67ac201","modified":1540609879583},{"_id":"themes/next/docs/zh-CN/README.md","hash":"aa6808f4f587c1a97205fa9427ba96a366bcb288","modified":1540609879583},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1540609879583},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1540609879581},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1540609879581},{"_id":"themes/next/docs/ru/README.md","hash":"c54e256ed11a84ee38f755d6f35a3e6e29a91dbc","modified":1540609879581},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1540609879582},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1540609879587},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1540609879587},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1540609879587},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1540609879588},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1540609879588},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1540609879588},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1540609879588},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1540609879589},{"_id":"themes/next/layout/_macro/post.swig","hash":"5767eccaf3951151e01c61189016932e9516c8b9","modified":1540609879588},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1540609879588},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d15a983de60d4c0bdd23cd31cd49de876ed2310c","modified":1540609879589},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1540609879589},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1540609879590},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1540609879590},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1540609879594},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1540609879595},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1540609879595},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1540609879588},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1540609879596},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1540609879596},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1540609879596},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1540609879596},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1540609879597},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1540609879597},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1540609879591},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1540609879591},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1540609879591},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1540609879592},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1540609879600},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1540609879600},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1540609879600},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1540609879600},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"981e01aaf45a1f0f23ce0796d03134f9e437aaca","modified":1540609879600},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1540609879601},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1540609879601},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1540609879601},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1540609879601},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1540609879617},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1540609879617},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1540609879618},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1540609879617},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1540609879618},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1540609879618},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1540609879618},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1540609879619},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1540609879618},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1540609879618},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1540609879619},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540609879619},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1540609879619},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1540609879619},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540609879619},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1540609879620},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1540609879619},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1540609879620},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1540609879620},{"_id":"source/images/alipay.jpg","hash":"7cfce0fbf312a4998a7a9991ca4b1deadaec7bb9","modified":1540262585818},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540609879592},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540609879592},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540609879612},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540609879612},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540609879612},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540609879616},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1540609879617},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1540609879587},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1540609879587},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1540609879589},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1540609879589},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1540609879589},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1540609879590},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1540609879590},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1540609879590},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1540609879590},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1540609879590},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1540609879590},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1540609879590},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1540609879590},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1540609879591},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1540609879591},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1540609879591},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1540609879592},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1540609879592},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1540609879592},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"07307f1f0e0e9858f2c7143cbdfcb2a9a92149ab","modified":1540609879592},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1540609879593},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1540609879593},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1540609879593},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1540609879594},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5dbeb640707a9c91357e373b9063a48c8e78f439","modified":1540609879594},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1540609879594},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1540609879594},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1540609879594},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1540609879594},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1540609879594},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1540609879595},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"03ef008bc95e8e83232e5464a6c63d6157d33a5e","modified":1540609879595},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"e3266bb5fa28e08993f0289bca099b30259947f6","modified":1540794729627},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1540609879595},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"2c74a96dd314e804d801f8773ac1b2e0a970fce3","modified":1540609879595},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1540609879595},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1540609879596},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1540609879596},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1540609879596},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1540609879597},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1540609879598},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1540609879598},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1540609879598},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1540609879591},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1540609879591},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1540609879592},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1540609879612},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1540609879612},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"59961fb806a39c367fd19ad37268eee112be6729","modified":1540609879612},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1540609879612},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1540609879616},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1540609879616},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1540609879617},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f9b83d0385529e52ce7ba95ed5ed6b3d4e2419bb","modified":1540609879617},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1540609879621},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1540609879620},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1540609879621},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1540609879621},{"_id":"themes/next/source/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1540609879621},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1540609879621},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1540609879622},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1540609879622},{"_id":"themes/next/source/js/src/utils.js","hash":"66f2ac658d6110f70a86f784d0c5d891a97c14bd","modified":1540609879622},{"_id":"themes/next/source/lib/pace/.git","hash":"ac5417ce49b6bfa4c602031c7d2b1885af1e74e7","modified":1540610842029},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1540610842042},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1540610842042},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1540610842043},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1540610842042},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1540610842042},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1540610842043},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1540610842043},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1540610842043},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1540609879621},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1540610842043},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1540610842043},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1540610842043},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1540610842044},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1540610842044},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1540610842044},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1540610842044},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1540610842044},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1540609879630},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1540609879629},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1540609879629},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1540609879626},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1540609879597},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1540609879597},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b4a2f1d031fe44452cf55ded8211cf018235073a","modified":1540609879601},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1540609879601},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1540609879601},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1540609879602},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1540609879602},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1540609879604},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1540609879608},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1540609879611},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"b75256fe3768b1a37b6ff6dd7f9f0ff135a42067","modified":1540609879611},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1540609879611},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"efc40a32487e0ac7b94b1ca81bdbdcc4ec8f2924","modified":1540609879611},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1540609879611},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1540609879611},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"02d138ed65060e98f20bc5b1dd59a791222b7156","modified":1540609879611},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"665b1813a1d6fbc3c5549a76e4f26cd62a804dde","modified":1540609879613},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1540609879613},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1540609879613},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1540609879613},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1540609879613},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1540609879613},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1540609879613},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1540609879614},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1540609879614},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1540609879614},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1540609879614},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1540609879614},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1540609879615},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1540609879615},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1540609879615},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1540609879615},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1540609879615},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1540609879616},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1540609879616},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1540609879616},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"89267bd16ecbedd1958af7f0fb3f4f654d24fffa","modified":1540609879622},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1540609879629},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1540609879602},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1540609879602},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1540609879602},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1540609879602},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1540609879603},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1540609879603},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1540609879602},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"a6dc3c7eb81ef5117c28fa2245fff1adc02d0292","modified":1540609879603},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1540609879603},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1540609879603},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1540609879604},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1540609879603},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1540609879604},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1540609879604},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1540609879604},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1540609879605},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f2911a048e5c20ca2a059bd1087d98ac1c51681c","modified":1540609879604},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1540609879605},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1540609879605},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1540609879605},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1540609879605},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1540609879605},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1540609879605},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1540609879605},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1540609879606},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1540609879606},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1540609879606},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1540609879606},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"fcbbf06b546c366d70b7d2ba5880b0be3ca1e8ea","modified":1540609879606},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1540609879606},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1540609879606},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"6089cbf4c907fe198b6501e40dc937480d0be175","modified":1540609879606},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1540609879607},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1540609879607},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1540609879607},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1540609879607},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1540609879607},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1540609879608},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1540609879608},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1540609879607},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1540609879608},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1540609879608},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1540609879608},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1540609879608},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1540609879609},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1540609879609},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1540609879609},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1540609879609},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1540609879609},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1540609879609},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1540609879610},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1540609879610},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1540609879610},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1540609879610},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1540609879610},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1540609879610},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1540609879610},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1540609879610},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1540609879614},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1540609879614},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1540609879615},{"_id":"source/images/avatar_960_960.jpg","hash":"bf4f8fcc944e07cdfca4fb198006568fd9feb478","modified":1540437958880},{"_id":"source/images/avatar.jpg","hash":"372932391107374853e47255cf366be19f19a22b","modified":1540437665375},{"_id":"public/categories/index.html","hash":"ff869a4a2f9f55244855734099887a0bbb61b725","modified":1540795041297},{"_id":"public/tags/index.html","hash":"ef979b04c09964b1eb4e2389dc0000904b65eb73","modified":1540795041297},{"_id":"public/categories/运维/index.html","hash":"65f8b2419dd20bd7a88f31748f4542061f859be8","modified":1540795041298},{"_id":"public/categories/spring/index.html","hash":"00f3ec69da6613e516096dfea57b9f4c6022dc53","modified":1540795041299},{"_id":"public/categories/bean/index.html","hash":"fcfcb87a556ddb3526dbc6e1eb6188312a9ff64c","modified":1540795041299},{"_id":"public/tags/bash/index.html","hash":"24d855bfc1706a622204174a9045a5d38dea2b9c","modified":1540795041299},{"_id":"public/tags/args/index.html","hash":"6b9ac15f70aa21fa715349ba62d8aacd70c704ef","modified":1540795041299},{"_id":"public/tags/spring/index.html","hash":"2fcf4316ae6bdef3c66b512740f7770cdffcc4df","modified":1540795041299},{"_id":"public/tags/handlerMethodResolver/index.html","hash":"c53a220b70c1a0b6e52049d0ad255627115f2d98","modified":1540795041299},{"_id":"public/tags/springMvc/index.html","hash":"c3ba8e60a08d6bf872f80c55346e039c7fae80ec","modified":1540795041299},{"_id":"public/tags/elasticsearch/index.html","hash":"d181114666aeda1c2ba03e78842a491101a2f166","modified":1540795041299},{"_id":"public/tags/command/index.html","hash":"f4c89aaa55aeb72e42eff1e51a7502cfc065b5d2","modified":1540795041299},{"_id":"public/tags/harddisk/index.html","hash":"391e7de366ba39fbfc4cf6acd42684d2195b6cf3","modified":1540795041299},{"_id":"public/tags/linux/index.html","hash":"2cebd77d46701b308bf8fb3282682414d51fe4e0","modified":1540795041299},{"_id":"public/tags/mount/index.html","hash":"84d8ef2bea6ef96c1ba49dcfedc2ab82e45b9535","modified":1540795041299},{"_id":"public/tags/format/index.html","hash":"554b6356ca9f8017588cbed2656efad78b7a45b2","modified":1540795041299},{"_id":"public/tags/sync/index.html","hash":"a2c0bb7dae771171132a11f9e6737dba0777aefa","modified":1540795041300},{"_id":"public/tags/scope/index.html","hash":"937573fd4f896d297520b1ee368483a5fcf03f70","modified":1540795041300},{"_id":"public/tags/java/index.html","hash":"1e892bdabf27000ffe870f5cf65e66f74881a6a3","modified":1540795041300},{"_id":"public/tags/译/index.html","hash":"dc3ddcbfad8209824303a8bb239d537ee20893ae","modified":1540795041300},{"_id":"public/2018/10/26/use-of-application-context-aware/index.html","hash":"c9fe9d14040a95b7ab92c2db818e44ad5f14cfda","modified":1540795041300},{"_id":"public/2018/10/24/custom-handler-method-argument-resolver/index.html","hash":"fb8f7e43a4af3c6eb53457440ac31a83ef181492","modified":1540795041300},{"_id":"public/2018/10/24/spring-custom-scope/index.html","hash":"3fa37daef1d36500be820fd8a61d3e09693c6eca","modified":1540795041300},{"_id":"public/2018/10/23/bash-process-watcher/index.html","hash":"6f3231c775cf9f0d690d9221962d2d5332681a48","modified":1540795041300},{"_id":"public/2018/10/23/es-server-config/index.html","hash":"4d2a616b78666139a6f76b457124eb962becb270","modified":1540795041300},{"_id":"public/2018/10/23/bash-args/index.html","hash":"c276fa93683119937f42f0925f21ce26e45bdb27","modified":1540795041300},{"_id":"public/2018/10/23/linux-mount-harddisk/index.html","hash":"944702eecaf131d82b0a3738a03557bd621659ff","modified":1540795041300},{"_id":"public/2018/10/23/rsync/index.html","hash":"4fcd0daa31d580c224b86a94dc48784dffc95ca9","modified":1540795041300},{"_id":"public/archives/index.html","hash":"9c00a5bd867c4197073229c0c511ab315831eea9","modified":1540795041300},{"_id":"public/archives/2018/index.html","hash":"74faf1fd573d531d78be7915d5da40e83e4fdac5","modified":1540795041300},{"_id":"public/archives/2018/10/index.html","hash":"723182dbd71d4009ea377410c7f8e20e57fd5e1d","modified":1540795041301},{"_id":"public/index.html","hash":"ed15ad17d26e089e685b2a837f75805687cbf75c","modified":1540795041301},{"_id":"public/categories/git/index.html","hash":"8f656d3ece218903e4581b12bb17cc1ecc04fbb5","modified":1540795041304},{"_id":"public/tags/git/index.html","hash":"32890633671dc055f3a2665cb5776301b165626d","modified":1540795041304},{"_id":"public/tags/node/index.html","hash":"2d3c524932bd6baa109add4dd265dcf7d76d3f86","modified":1540795041304},{"_id":"public/2018/10/29/git-credential/index.html","hash":"adf156074f95bb6cc5d54f41bfe614d5d627f981","modified":1540795041304},{"_id":"public/images/fingerprint.jpg","hash":"fda6b9c66b78bc4ff760978b48431bb95ab5d9f0","modified":1540795041308},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1540795041308},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1540795041308},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1540795041308},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1540795041308},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1540795041308},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1540795041308},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1540795041308},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1540795041308},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1540795041308},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1540795041308},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540795041308},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1540795041308},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1540795041308},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1540795041308},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1540795041309},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1540795041309},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1540795041309},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1540795041309},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1540795041309},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1540795041688},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1540795041688},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1540795041688},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1540795041688},{"_id":"public/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1540795041688},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1540795041688},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1540795041688},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1540795041688},{"_id":"public/js/src/utils.js","hash":"66f2ac658d6110f70a86f784d0c5d891a97c14bd","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1540795041689},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1540795041689},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1540795041689},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1540795041689},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1540795041689},{"_id":"public/js/src/schemes/pisces.js","hash":"89267bd16ecbedd1958af7f0fb3f4f654d24fffa","modified":1540795041689},{"_id":"public/lib/pace/README.html","hash":"58f2105ada5cc52dff5aabcecb92569ee84493a0","modified":1540795041689},{"_id":"public/css/main.css","hash":"9dd3d5d00d87009e4580bae4ca602b6b6d6b9a94","modified":1540795041689},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1540795041689},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1540795041690},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1540795041690},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1540795041690},{"_id":"public/images/alipay.jpg","hash":"7cfce0fbf312a4998a7a9991ca4b1deadaec7bb9","modified":1540795041693},{"_id":"public/images/avatar_960_960.jpg","hash":"bf4f8fcc944e07cdfca4fb198006568fd9feb478","modified":1540795041720},{"_id":"public/images/avatar.jpg","hash":"372932391107374853e47255cf366be19f19a22b","modified":1540795041724}],"Category":[{"name":"运维","_id":"cjntxl14u0003g3s6dpkg44p4"},{"name":"spring","_id":"cjntxl14y0008g3s6d1sx5hsh"},{"name":"git","_id":"cjntxl151000dg3s6irigy0ms"},{"name":"bean","_id":"cjntxl156000lg3s617yg943s"}],"Data":[],"Page":[{"title":"categories","date":"2018-10-23T01:36:10.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-10-23 09:36:10\ntype: \"categories\"\n---\n","updated":"2018-10-23T01:37:25.491Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjntxl14s0001g3s6x46pepeo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-10-23T01:33:53.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-10-23 09:33:53\ntype: \"tags\"\n---\n","updated":"2018-10-23T01:35:03.061Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjntxl1a6001sg3s67my9zg5l","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"linux中shell变量$#,$@,$0,$1,$2的含义解释","date":"2018-10-23T03:11:20.000Z","_content":"\n变量说明:\n\n```text\n$$\nShell本身的PID（ProcessID）\n$!\nShell最后运行的后台Process的PID\n$?\n最后运行的命令的结束代码（返回值）\n$-\n使用Set命令设定的Flag一览\n$*\n所有参数列表。如\"$*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。\n$@\n所有参数列表。如\"$@\"用「\"」括起来的情况、以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。\n$#\n添加到Shell的参数个数\n$0\nShell本身的文件名\n$1～$n\n添加到Shell的各参数值。$1是第1参数、$2是第2参数…。\n```","source":"_posts/2018-10-bash-args.md","raw":"---\ntitle: linux中shell变量$#,$@,$0,$1,$2的含义解释\ndate: 2018-10-23 11:11:20\ntags: [bash,args]\ncategories: 运维\n---\n\n变量说明:\n\n```text\n$$\nShell本身的PID（ProcessID）\n$!\nShell最后运行的后台Process的PID\n$?\n最后运行的命令的结束代码（返回值）\n$-\n使用Set命令设定的Flag一览\n$*\n所有参数列表。如\"$*\"用「\"」括起来的情况、以\"$1 $2 … $n\"的形式输出所有参数。\n$@\n所有参数列表。如\"$@\"用「\"」括起来的情况、以\"$1\" \"$2\" … \"$n\" 的形式输出所有参数。\n$#\n添加到Shell的参数个数\n$0\nShell本身的文件名\n$1～$n\n添加到Shell的各参数值。$1是第1参数、$2是第2参数…。\n```","slug":"bash-args","published":1,"updated":"2018-10-23T03:13:31.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjntxl14p0000g3s6o8sndlfm","content":"<p>变量说明:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">Shell本身的PID（ProcessID）</span><br><span class=\"line\">$!</span><br><span class=\"line\">Shell最后运行的后台Process的PID</span><br><span class=\"line\">$?</span><br><span class=\"line\">最后运行的命令的结束代码（返回值）</span><br><span class=\"line\">$-</span><br><span class=\"line\">使用Set命令设定的Flag一览</span><br><span class=\"line\">$*</span><br><span class=\"line\">所有参数列表。如&quot;$*&quot;用「&quot;」括起来的情况、以&quot;$1 $2 … $n&quot;的形式输出所有参数。</span><br><span class=\"line\">$@</span><br><span class=\"line\">所有参数列表。如&quot;$@&quot;用「&quot;」括起来的情况、以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</span><br><span class=\"line\">$#</span><br><span class=\"line\">添加到Shell的参数个数</span><br><span class=\"line\">$0</span><br><span class=\"line\">Shell本身的文件名</span><br><span class=\"line\">$1～$n</span><br><span class=\"line\">添加到Shell的各参数值。$1是第1参数、$2是第2参数…。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>变量说明:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$$</span><br><span class=\"line\">Shell本身的PID（ProcessID）</span><br><span class=\"line\">$!</span><br><span class=\"line\">Shell最后运行的后台Process的PID</span><br><span class=\"line\">$?</span><br><span class=\"line\">最后运行的命令的结束代码（返回值）</span><br><span class=\"line\">$-</span><br><span class=\"line\">使用Set命令设定的Flag一览</span><br><span class=\"line\">$*</span><br><span class=\"line\">所有参数列表。如&quot;$*&quot;用「&quot;」括起来的情况、以&quot;$1 $2 … $n&quot;的形式输出所有参数。</span><br><span class=\"line\">$@</span><br><span class=\"line\">所有参数列表。如&quot;$@&quot;用「&quot;」括起来的情况、以&quot;$1&quot; &quot;$2&quot; … &quot;$n&quot; 的形式输出所有参数。</span><br><span class=\"line\">$#</span><br><span class=\"line\">添加到Shell的参数个数</span><br><span class=\"line\">$0</span><br><span class=\"line\">Shell本身的文件名</span><br><span class=\"line\">$1～$n</span><br><span class=\"line\">添加到Shell的各参数值。$1是第1参数、$2是第2参数…。</span><br></pre></td></tr></table></figure>"},{"title":"利用bash制作守护进程的脚本","date":"2018-10-23T03:33:40.000Z","_content":"\n# 运用场景\n\n在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。\n\n## 1. 记录进程的PID\n\n为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID\n\n我们可以利用bash变量\\!\\$ 获取Shell最后运行的后台Process的PID\n\nExample:\n\n```bash\n#!/bin/bash\njava -jar myapp.jar & echo $! > ./pid.file &\n```\n\n这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中\n\n## 2. 监测进程是否在运行\n\n利用 kill -0 检测进程是否存在\nkill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。\n\n```bash\nPID=$(cat ./pid.file) > /dev/null 2>&1\nkill -0 ${SAUNA_PID} > /dev/null 2>&1\nIS_RUNNING=$?\n```\n\n## 3. 完整脚本\n\nstart.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\nWATCH_PID_FILE=${HOME}/pids/watch.pid\n\n#进程PID输出到文件\njava -jar myapp.jar & echo $! > ${PID_FILE} 2>/dev/null &\nsleep 5\n\nsh watch.sh > watch.log 2>&1 &\n\necho $! > ${PID_FILE}\n\n\n```\n\nwatch.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\n\nif [ -f \"$PID_FILE\" ]\nthen\n#如果PID文件存在\n  PID=$(cat ${SAUNA_PID_FILE}) > /dev/null 2>&1\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\nelse\n  PID=\"0000\"\n  IS_RUNNING=1\nfi\n\n#检测循环\nwhile true\ndo\n  # 5 秒检测一次\n  sleep 5\n  if [ ${IS_RUNNING} -ne 0 ] ; then\n    echo \"service is dead. restarting...\";\n    sh start.sh\n    exit 0;\n  fi\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\ndone\n\n```\n\n**注意** stop脚本里要kill掉watch.sh ，不然会重复启动。","source":"_posts/2018-10-bash-process-watcher.md","raw":"---\ntitle: 利用bash制作守护进程的脚本\ndate: 2018-10-23 11:33:40\ntags:\n---\n\n# 运用场景\n\n在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。\n\n## 1. 记录进程的PID\n\n为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID\n\n我们可以利用bash变量\\!\\$ 获取Shell最后运行的后台Process的PID\n\nExample:\n\n```bash\n#!/bin/bash\njava -jar myapp.jar & echo $! > ./pid.file &\n```\n\n这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中\n\n## 2. 监测进程是否在运行\n\n利用 kill -0 检测进程是否存在\nkill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。\n\n```bash\nPID=$(cat ./pid.file) > /dev/null 2>&1\nkill -0 ${SAUNA_PID} > /dev/null 2>&1\nIS_RUNNING=$?\n```\n\n## 3. 完整脚本\n\nstart.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\nWATCH_PID_FILE=${HOME}/pids/watch.pid\n\n#进程PID输出到文件\njava -jar myapp.jar & echo $! > ${PID_FILE} 2>/dev/null &\nsleep 5\n\nsh watch.sh > watch.log 2>&1 &\n\necho $! > ${PID_FILE}\n\n\n```\n\nwatch.sh\n\n```bash\n#!/bin/bash\nPID_FILE=${HOME}/pids/app.pid\n\nif [ -f \"$PID_FILE\" ]\nthen\n#如果PID文件存在\n  PID=$(cat ${SAUNA_PID_FILE}) > /dev/null 2>&1\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\nelse\n  PID=\"0000\"\n  IS_RUNNING=1\nfi\n\n#检测循环\nwhile true\ndo\n  # 5 秒检测一次\n  sleep 5\n  if [ ${IS_RUNNING} -ne 0 ] ; then\n    echo \"service is dead. restarting...\";\n    sh start.sh\n    exit 0;\n  fi\n  kill -0 ${PID} > /dev/null 2>&1\n  IS_RUNNING=$?\ndone\n\n```\n\n**注意** stop脚本里要kill掉watch.sh ，不然会重复启动。","slug":"bash-process-watcher","published":1,"updated":"2018-10-23T05:25:52.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjntxl14s0002g3s6qrbj4hdf","content":"<h1 id=\"运用场景\"><a href=\"#运用场景\" class=\"headerlink\" title=\"运用场景\"></a>运用场景</h1><p>在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。</p>\n<h2 id=\"1-记录进程的PID\"><a href=\"#1-记录进程的PID\" class=\"headerlink\" title=\"1. 记录进程的PID\"></a>1. 记录进程的PID</h2><p>为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID</p>\n<p>我们可以利用bash变量!\\$ 获取Shell最后运行的后台Process的PID</p>\n<p>Example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; ./pid.file &amp;</span><br></pre></td></tr></table></figure>\n<p>这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中</p>\n<h2 id=\"2-监测进程是否在运行\"><a href=\"#2-监测进程是否在运行\" class=\"headerlink\" title=\"2. 监测进程是否在运行\"></a>2. 监测进程是否在运行</h2><p>利用 kill -0 检测进程是否存在<br>kill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(cat ./pid.file) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;SAUNA_PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">IS_RUNNING=$?</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-完整脚本\"><a href=\"#3-完整脚本\" class=\"headerlink\" title=\"3. 完整脚本\"></a>3. 完整脚本</h2><p>start.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\">WATCH_PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/watch.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程PID输出到文件</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span> 2&gt;/dev/null &amp;</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\">sh watch.sh &gt; watch.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span></span><br></pre></td></tr></table></figure>\n<p>watch.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$PID_FILE</span>\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\">#如果PID文件存在</span></span><br><span class=\"line\">  PID=$(cat <span class=\"variable\">$&#123;SAUNA_PID_FILE&#125;</span>) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  PID=<span class=\"string\">\"0000\"</span></span><br><span class=\"line\">  IS_RUNNING=1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检测循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 5 秒检测一次</span></span><br><span class=\"line\">  sleep 5</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;IS_RUNNING&#125;</span> -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"service is dead. restarting...\"</span>;</span><br><span class=\"line\">    sh start.sh</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0;</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong> stop脚本里要kill掉watch.sh ，不然会重复启动。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"运用场景\"><a href=\"#运用场景\" class=\"headerlink\" title=\"运用场景\"></a>运用场景</h1><p>在linux deploy服务时，为了保证服务crash以后能够自动重启，经常需要制作守护进程的脚本。</p>\n<h2 id=\"1-记录进程的PID\"><a href=\"#1-记录进程的PID\" class=\"headerlink\" title=\"1. 记录进程的PID\"></a>1. 记录进程的PID</h2><p>为了得到准确的进程PID，我们经常在启动脚本中输出一个xxx.pid文件，其中记录了需要守护的进程的PID</p>\n<p>我们可以利用bash变量!\\$ 获取Shell最后运行的后台Process的PID</p>\n<p>Example:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; ./pid.file &amp;</span><br></pre></td></tr></table></figure>\n<p>这样我们便得到了 myapp.jar的进程PID,并写入了 ./pid.file文件中</p>\n<h2 id=\"2-监测进程是否在运行\"><a href=\"#2-监测进程是否在运行\" class=\"headerlink\" title=\"2. 监测进程是否在运行\"></a>2. 监测进程是否在运行</h2><p>利用 kill -0 检测进程是否存在<br>kill -0 \\$pid中的-0表示不发送任何信号给PID对应的进程，但是仍会对变量值PID对应的进程是否存在进行检查，如果\\$pid对应的进程存在，则返回0，不存在返回1。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID=$(cat ./pid.file) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\"><span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;SAUNA_PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">IS_RUNNING=$?</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-完整脚本\"><a href=\"#3-完整脚本\" class=\"headerlink\" title=\"3. 完整脚本\"></a>3. 完整脚本</h2><p>start.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\">WATCH_PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/watch.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#进程PID输出到文件</span></span><br><span class=\"line\">java -jar myapp.jar &amp; <span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span> 2&gt;/dev/null &amp;</span><br><span class=\"line\">sleep 5</span><br><span class=\"line\"></span><br><span class=\"line\">sh watch.sh &gt; watch.log 2&gt;&amp;1 &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$&#123;PID_FILE&#125;</span></span><br></pre></td></tr></table></figure>\n<p>watch.sh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">PID_FILE=<span class=\"variable\">$&#123;HOME&#125;</span>/pids/app.pid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$PID_FILE</span>\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"comment\">#如果PID文件存在</span></span><br><span class=\"line\">  PID=$(cat <span class=\"variable\">$&#123;SAUNA_PID_FILE&#125;</span>) &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  PID=<span class=\"string\">\"0000\"</span></span><br><span class=\"line\">  IS_RUNNING=1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检测循环</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"comment\"># 5 秒检测一次</span></span><br><span class=\"line\">  sleep 5</span><br><span class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;IS_RUNNING&#125;</span> -ne 0 ] ; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"service is dead. restarting...\"</span>;</span><br><span class=\"line\">    sh start.sh</span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 0;</span><br><span class=\"line\">  <span class=\"keyword\">fi</span></span><br><span class=\"line\">  <span class=\"built_in\">kill</span> -0 <span class=\"variable\">$&#123;PID&#125;</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">  IS_RUNNING=$?</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p><strong>注意</strong> stop脚本里要kill掉watch.sh ，不然会重复启动。</p>\n"},{"title":"自定义HandlerMethodArgumentResolver，用Cookie组装一个简单的Pojo对象","date":"2018-10-24T13:14:18.000Z","_content":"\n# 1. 概述\n\nSpringMVC为我们提供了@CookieValue来注入cookie某一个key的值，但我们常需要@RequestBody一样，把Cookie组装成一个pojo对象。\n这篇教程将会演示我们怎样自定义一个HandlerMethodArgumentResolver完成从Cookie组装pojo对象的需求。\n\n# 2. 自定义HandlerMethodArgumentResolver\n\n# 2.1 定义Annotation\n\n我们先定义一个Annotation，叫CookieObject。\n\n```java\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface CookieObject {\n}\n```\n\n# 2.2 实现HandlerMethodArgumentResolver接口\n\n再定义个CookieObjectMethodArgumentResolver类，实现HandlerMethodArgumentResolver接口\nHandlerMethodArgumentResolver有两个method.\n\n```java\nboolean supportsParameter(MethodParameter parameter);\n```\n\n返回true/false,表示resolver是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.\n\n```java\nObject resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;\n```\n\n组装参数的实现逻辑。\n\n来，让我们看一下具体的实现\n\n```java\npublic class CookieObjectMethodArgumentResolver implements HandlerMethodArgumentResolver {\n    private String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;\n\n    private String decodeInternal(HttpServletRequest request, String source) {\n        String enc = determineEncoding(request);\n        return UriUtils.decode(source, enc);\n    }\n\n    protected String determineEncoding(HttpServletRequest request) {\n        String enc = request.getCharacterEncoding();\n        if (enc == null) {\n            enc = this.defaultEncoding;\n        }\n        return enc;\n    }\n\n    @Override\n    public boolean supportsParameter(MethodParameter parameter) {\n        return parameter.hasParameterAnnotation(CookieObject.class);\n    }\n\n    @Override\n    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);\n\n        Class clazz = parameter.getParameterType();\n\n        Object obj = clazz.newInstance();\n        Cookie[] cookies = servletRequest.getCookies();\n        if (cookies != null) {\n            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());\n            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();\n            for (PropertyDescriptor property : propertyDescriptors) {\n                Method setter = property.getWriteMethod();\n                Class ppClazz = property.getPropertyType();\n                if (setter != null) {\n                    String propName = property.getName();\n                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);\n                    if (cooike != null) {\n                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());\n                        Object setValue = null;\n                        if (Cookie.class.isAssignableFrom(ppClazz)) {\n                            setValue = cookieValue;\n                        } else if (cookieValue != null && binderFactory != null) {\n                            WebDataBinder binder = binderFactory.createBinder(webRequest, null, propName);\n                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);\n                        }\n                        if (setValue != null) {\n                            setter.invoke(obj, setValue);\n                        }\n                    }\n                }\n            }\n        }\n        return obj;\n    }\n}\n```\n\n# 2.3 加入argumentResolvers列表\n\n最后再SpringMVC的配置中把我们定义的CookieObjectMethodArgumentResolver实例化后加入argumentResolvers列表。\n\n``java\n@Configuration\npublic class WebConfig extends WebMvcConfigurationSupport {\n    @Override\n    protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\n        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = new CookieObjectMethodArgumentResolver()\n        argumentResolvers.add(cookieObjectMethodArgumentResolver());\n    }\n}\n```\n\n# 3. 使用\n\n# 3.1 定义一个pojo\n\n```java\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@EqualsAndHashCode(callSuper = false)\npublic class MyCookieParam  {\n    private String foo;\n    private String bar;\n}\n```\n\n# 3.2 在Controller中接收\n\n```java\n    @RequestMapping(\"/testCookieObject\")\n    @ResponseBody\n    public String testCookieObject(@CookieObject MyCookieParam cookieParam) {\n      return cookieParam\n    }\n```","source":"_posts/2018-10-custom-handler-method-argument-resolver.md","raw":"---\ntitle: 自定义HandlerMethodArgumentResolver，用Cookie组装一个简单的Pojo对象\ndate: 2018-10-24 21:14:18\ntags: [spring,handlerMethodResolver,springMvc]\ncategories: [spring]\n---\n\n# 1. 概述\n\nSpringMVC为我们提供了@CookieValue来注入cookie某一个key的值，但我们常需要@RequestBody一样，把Cookie组装成一个pojo对象。\n这篇教程将会演示我们怎样自定义一个HandlerMethodArgumentResolver完成从Cookie组装pojo对象的需求。\n\n# 2. 自定义HandlerMethodArgumentResolver\n\n# 2.1 定义Annotation\n\n我们先定义一个Annotation，叫CookieObject。\n\n```java\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface CookieObject {\n}\n```\n\n# 2.2 实现HandlerMethodArgumentResolver接口\n\n再定义个CookieObjectMethodArgumentResolver类，实现HandlerMethodArgumentResolver接口\nHandlerMethodArgumentResolver有两个method.\n\n```java\nboolean supportsParameter(MethodParameter parameter);\n```\n\n返回true/false,表示resolver是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.\n\n```java\nObject resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception;\n```\n\n组装参数的实现逻辑。\n\n来，让我们看一下具体的实现\n\n```java\npublic class CookieObjectMethodArgumentResolver implements HandlerMethodArgumentResolver {\n    private String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;\n\n    private String decodeInternal(HttpServletRequest request, String source) {\n        String enc = determineEncoding(request);\n        return UriUtils.decode(source, enc);\n    }\n\n    protected String determineEncoding(HttpServletRequest request) {\n        String enc = request.getCharacterEncoding();\n        if (enc == null) {\n            enc = this.defaultEncoding;\n        }\n        return enc;\n    }\n\n    @Override\n    public boolean supportsParameter(MethodParameter parameter) {\n        return parameter.hasParameterAnnotation(CookieObject.class);\n    }\n\n    @Override\n    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);\n\n        Class clazz = parameter.getParameterType();\n\n        Object obj = clazz.newInstance();\n        Cookie[] cookies = servletRequest.getCookies();\n        if (cookies != null) {\n            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());\n            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();\n            for (PropertyDescriptor property : propertyDescriptors) {\n                Method setter = property.getWriteMethod();\n                Class ppClazz = property.getPropertyType();\n                if (setter != null) {\n                    String propName = property.getName();\n                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);\n                    if (cooike != null) {\n                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());\n                        Object setValue = null;\n                        if (Cookie.class.isAssignableFrom(ppClazz)) {\n                            setValue = cookieValue;\n                        } else if (cookieValue != null && binderFactory != null) {\n                            WebDataBinder binder = binderFactory.createBinder(webRequest, null, propName);\n                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);\n                        }\n                        if (setValue != null) {\n                            setter.invoke(obj, setValue);\n                        }\n                    }\n                }\n            }\n        }\n        return obj;\n    }\n}\n```\n\n# 2.3 加入argumentResolvers列表\n\n最后再SpringMVC的配置中把我们定义的CookieObjectMethodArgumentResolver实例化后加入argumentResolvers列表。\n\n``java\n@Configuration\npublic class WebConfig extends WebMvcConfigurationSupport {\n    @Override\n    protected void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\n        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = new CookieObjectMethodArgumentResolver()\n        argumentResolvers.add(cookieObjectMethodArgumentResolver());\n    }\n}\n```\n\n# 3. 使用\n\n# 3.1 定义一个pojo\n\n```java\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\n@EqualsAndHashCode(callSuper = false)\npublic class MyCookieParam  {\n    private String foo;\n    private String bar;\n}\n```\n\n# 3.2 在Controller中接收\n\n```java\n    @RequestMapping(\"/testCookieObject\")\n    @ResponseBody\n    public String testCookieObject(@CookieObject MyCookieParam cookieParam) {\n      return cookieParam\n    }\n```","slug":"custom-handler-method-argument-resolver","published":1,"updated":"2018-10-25T02:13:32.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjntxl14v0005g3s6org7c4ty","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>SpringMVC为我们提供了@CookieValue来注入cookie某一个key的值，但我们常需要@RequestBody一样，把Cookie组装成一个pojo对象。<br>这篇教程将会演示我们怎样自定义一个HandlerMethodArgumentResolver完成从Cookie组装pojo对象的需求。</p>\n<h1 id=\"2-自定义HandlerMethodArgumentResolver\"><a href=\"#2-自定义HandlerMethodArgumentResolver\" class=\"headerlink\" title=\"2. 自定义HandlerMethodArgumentResolver\"></a>2. 自定义HandlerMethodArgumentResolver</h1><h1 id=\"2-1-定义Annotation\"><a href=\"#2-1-定义Annotation\" class=\"headerlink\" title=\"2.1 定义Annotation\"></a>2.1 定义Annotation</h1><p>我们先定义一个Annotation，叫CookieObject。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CookieObject &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-实现HandlerMethodArgumentResolver接口\"><a href=\"#2-2-实现HandlerMethodArgumentResolver接口\" class=\"headerlink\" title=\"2.2 实现HandlerMethodArgumentResolver接口\"></a>2.2 实现HandlerMethodArgumentResolver接口</h1><p>再定义个CookieObjectMethodArgumentResolver类，实现HandlerMethodArgumentResolver接口<br>HandlerMethodArgumentResolver有两个method.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>返回true/false,表示resolver是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n<p>组装参数的实现逻辑。</p>\n<p>来，让我们看一下具体的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieObjectMethodArgumentResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">decodeInternal</span><span class=\"params\">(HttpServletRequest request, String source)</span> </span>&#123;</span><br><span class=\"line\">        String enc = determineEncoding(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UriUtils.decode(source, enc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">determineEncoding</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String enc = request.getCharacterEncoding();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enc == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            enc = <span class=\"keyword\">this</span>.defaultEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> enc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parameter.hasParameterAnnotation(CookieObject.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class clazz = parameter.getParameterType();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object obj = clazz.newInstance();</span><br><span class=\"line\">        Cookie[] cookies = servletRequest.getCookies();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());</span><br><span class=\"line\">            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (PropertyDescriptor property : propertyDescriptors) &#123;</span><br><span class=\"line\">                Method setter = property.getWriteMethod();</span><br><span class=\"line\">                Class ppClazz = property.getPropertyType();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    String propName = property.getName();</span><br><span class=\"line\">                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cooike != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());</span><br><span class=\"line\">                        Object setValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (Cookie.class.isAssignableFrom(ppClazz)) &#123;</span><br><span class=\"line\">                            setValue = cookieValue;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cookieValue != <span class=\"keyword\">null</span> &amp;&amp; binderFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            WebDataBinder binder = binderFactory.createBinder(webRequest, <span class=\"keyword\">null</span>, propName);</span><br><span class=\"line\">                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (setValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            setter.invoke(obj, setValue);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-加入argumentResolvers列表\"><a href=\"#2-3-加入argumentResolvers列表\" class=\"headerlink\" title=\"2.3 加入argumentResolvers列表\"></a>2.3 加入argumentResolvers列表</h1><p>最后再SpringMVC的配置中把我们定义的CookieObjectMethodArgumentResolver实例化后加入argumentResolvers列表。</p>\n<p><code></code>java<br>@Configuration<br>public class WebConfig extends WebMvcConfigurationSupport {<br>    @Override<br>    protected void addArgumentResolvers(List<handlermethodargumentresolver> argumentResolvers) {<br>        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = new CookieObjectMethodArgumentResolver()<br>        argumentResolvers.add(cookieObjectMethodArgumentResolver());<br>    }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 3. 使用</span><br><span class=\"line\"></span><br><span class=\"line\"># 3.1 定义一个pojo</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">@Data</span><br><span class=\"line\">@JsonIgnoreProperties(ignoreUnknown = true)</span><br><span class=\"line\">@EqualsAndHashCode(callSuper = false)</span><br><span class=\"line\">public class MyCookieParam  &#123;</span><br><span class=\"line\">    private String foo;</span><br><span class=\"line\">    private String bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></handlermethodargumentresolver></p>\n<h1 id=\"3-2-在Controller中接收\"><a href=\"#3-2-在Controller中接收\" class=\"headerlink\" title=\"3.2 在Controller中接收\"></a>3.2 在Controller中接收</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testCookieObject\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testCookieObject</span><span class=\"params\">(@CookieObject MyCookieParam cookieParam)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cookieParam</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>SpringMVC为我们提供了@CookieValue来注入cookie某一个key的值，但我们常需要@RequestBody一样，把Cookie组装成一个pojo对象。<br>这篇教程将会演示我们怎样自定义一个HandlerMethodArgumentResolver完成从Cookie组装pojo对象的需求。</p>\n<h1 id=\"2-自定义HandlerMethodArgumentResolver\"><a href=\"#2-自定义HandlerMethodArgumentResolver\" class=\"headerlink\" title=\"2. 自定义HandlerMethodArgumentResolver\"></a>2. 自定义HandlerMethodArgumentResolver</h1><h1 id=\"2-1-定义Annotation\"><a href=\"#2-1-定义Annotation\" class=\"headerlink\" title=\"2.1 定义Annotation\"></a>2.1 定义Annotation</h1><p>我们先定义一个Annotation，叫CookieObject。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> CookieObject &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-实现HandlerMethodArgumentResolver接口\"><a href=\"#2-2-实现HandlerMethodArgumentResolver接口\" class=\"headerlink\" title=\"2.2 实现HandlerMethodArgumentResolver接口\"></a>2.2 实现HandlerMethodArgumentResolver接口</h1><p>再定义个CookieObjectMethodArgumentResolver类，实现HandlerMethodArgumentResolver接口<br>HandlerMethodArgumentResolver有两个method.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>返回true/false,表示resolver是否支持处理该参数，我们将在他的实现里，判断参数是否携带@CookieObject.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>\n<p>组装参数的实现逻辑。</p>\n<p>来，让我们看一下具体的实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CookieObjectMethodArgumentResolver</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">decodeInternal</span><span class=\"params\">(HttpServletRequest request, String source)</span> </span>&#123;</span><br><span class=\"line\">        String enc = determineEncoding(request);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UriUtils.decode(source, enc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">determineEncoding</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        String enc = request.getCharacterEncoding();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enc == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            enc = <span class=\"keyword\">this</span>.defaultEncoding;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> enc;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supportsParameter</span><span class=\"params\">(MethodParameter parameter)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parameter.hasParameterAnnotation(CookieObject.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveArgument</span><span class=\"params\">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        Class clazz = parameter.getParameterType();</span><br><span class=\"line\"></span><br><span class=\"line\">        Object obj = clazz.newInstance();</span><br><span class=\"line\">        Cookie[] cookies = servletRequest.getCookies();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());</span><br><span class=\"line\">            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (PropertyDescriptor property : propertyDescriptors) &#123;</span><br><span class=\"line\">                Method setter = property.getWriteMethod();</span><br><span class=\"line\">                Class ppClazz = property.getPropertyType();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setter != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    String propName = property.getName();</span><br><span class=\"line\">                    Cookie cooike = WebUtils.getCookie(servletRequest, propName);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cooike != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        String cookieValue = decodeInternal(servletRequest, cooike.getValue());</span><br><span class=\"line\">                        Object setValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (Cookie.class.isAssignableFrom(ppClazz)) &#123;</span><br><span class=\"line\">                            setValue = cookieValue;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cookieValue != <span class=\"keyword\">null</span> &amp;&amp; binderFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            WebDataBinder binder = binderFactory.createBinder(webRequest, <span class=\"keyword\">null</span>, propName);</span><br><span class=\"line\">                            setValue = binder.convertIfNecessary(cookieValue, ppClazz);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (setValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            setter.invoke(obj, setValue);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-3-加入argumentResolvers列表\"><a href=\"#2-3-加入argumentResolvers列表\" class=\"headerlink\" title=\"2.3 加入argumentResolvers列表\"></a>2.3 加入argumentResolvers列表</h1><p>最后再SpringMVC的配置中把我们定义的CookieObjectMethodArgumentResolver实例化后加入argumentResolvers列表。</p>\n<p><code></code>java<br>@Configuration<br>public class WebConfig extends WebMvcConfigurationSupport {<br>    @Override<br>    protected void addArgumentResolvers(List<handlermethodargumentresolver> argumentResolvers) {<br>        CookieObjectMethodArgumentResolver cookieObjectMethodArgumentResolver = new CookieObjectMethodArgumentResolver()<br>        argumentResolvers.add(cookieObjectMethodArgumentResolver());<br>    }<br>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 3. 使用</span><br><span class=\"line\"></span><br><span class=\"line\"># 3.1 定义一个pojo</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">@Data</span><br><span class=\"line\">@JsonIgnoreProperties(ignoreUnknown = true)</span><br><span class=\"line\">@EqualsAndHashCode(callSuper = false)</span><br><span class=\"line\">public class MyCookieParam  &#123;</span><br><span class=\"line\">    private String foo;</span><br><span class=\"line\">    private String bar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></handlermethodargumentresolver></p>\n<h1 id=\"3-2-在Controller中接收\"><a href=\"#3-2-在Controller中接收\" class=\"headerlink\" title=\"3.2 在Controller中接收\"></a>3.2 在Controller中接收</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testCookieObject\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testCookieObject</span><span class=\"params\">(@CookieObject MyCookieParam cookieParam)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cookieParam</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"ElasticSearch服务器secrity配置","date":"2018-10-23T03:14:25.000Z","_content":"\n# 1. 修改/etc/security/limits.conf\n\n/etc/security/limits.conf\n\n```bash\n[username] soft nofile 102400\n[username] hard nofile 102400\n[username] soft nproc 2048\n[username] hard nproc 2048\n[username] soft memlock unlimited\n[username] hard memlock unlimited\n```\n\n重新登录后\n\n```bash\nulimit -a 检测\n```\n\n# 2. 修改max_map_count\n\n```bash\nvim /etc/sysctl.conf\nvm.max_map_count=262144\n```\n\n执行命令刷新\n\n``` bash\nsysctl -p\n```","source":"_posts/2018-10-es-server-config.md","raw":"---\ntitle: ElasticSearch服务器secrity配置\ndate: 2018-10-23 11:14:25\ntags: [elasticsearch]\ncategories: [运维]\n---\n\n# 1. 修改/etc/security/limits.conf\n\n/etc/security/limits.conf\n\n```bash\n[username] soft nofile 102400\n[username] hard nofile 102400\n[username] soft nproc 2048\n[username] hard nproc 2048\n[username] soft memlock unlimited\n[username] hard memlock unlimited\n```\n\n重新登录后\n\n```bash\nulimit -a 检测\n```\n\n# 2. 修改max_map_count\n\n```bash\nvim /etc/sysctl.conf\nvm.max_map_count=262144\n```\n\n执行命令刷新\n\n``` bash\nsysctl -p\n```","slug":"es-server-config","published":1,"updated":"2018-10-23T03:21:58.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjntxl14w0006g3s6ba60rinr","content":"<h1 id=\"1-修改-etc-security-limits-conf\"><a href=\"#1-修改-etc-security-limits-conf\" class=\"headerlink\" title=\"1. 修改/etc/security/limits.conf\"></a>1. 修改/etc/security/limits.conf</h1><p>/etc/security/limits.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[username] soft nofile 102400</span><br><span class=\"line\">[username] hard nofile 102400</span><br><span class=\"line\">[username] soft nproc 2048</span><br><span class=\"line\">[username] hard nproc 2048</span><br><span class=\"line\">[username] soft memlock unlimited</span><br><span class=\"line\">[username] hard memlock unlimited</span><br></pre></td></tr></table></figure>\n<p>重新登录后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ulimit</span> -a 检测</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-修改max-map-count\"><a href=\"#2-修改max-map-count\" class=\"headerlink\" title=\"2. 修改max_map_count\"></a>2. 修改max_map_count</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\">vm.max_map_count=262144</span><br></pre></td></tr></table></figure>\n<p>执行命令刷新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-修改-etc-security-limits-conf\"><a href=\"#1-修改-etc-security-limits-conf\" class=\"headerlink\" title=\"1. 修改/etc/security/limits.conf\"></a>1. 修改/etc/security/limits.conf</h1><p>/etc/security/limits.conf</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[username] soft nofile 102400</span><br><span class=\"line\">[username] hard nofile 102400</span><br><span class=\"line\">[username] soft nproc 2048</span><br><span class=\"line\">[username] hard nproc 2048</span><br><span class=\"line\">[username] soft memlock unlimited</span><br><span class=\"line\">[username] hard memlock unlimited</span><br></pre></td></tr></table></figure>\n<p>重新登录后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ulimit</span> -a 检测</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-修改max-map-count\"><a href=\"#2-修改max-map-count\" class=\"headerlink\" title=\"2. 修改max_map_count\"></a>2. 修改max_map_count</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/sysctl.conf</span><br><span class=\"line\">vm.max_map_count=262144</span><br></pre></td></tr></table></figure>\n<p>执行命令刷新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl -p</span><br></pre></td></tr></table></figure>"},{"title":"利用git credential免密认证git http仓库","date":"2018-10-29T06:32:30.000Z","_content":"\n# 1. 命令\n\n在git仓库目录下执行\n\n```bash\ngit config user.name xxx\ngit config user.email xxx@xxx.com\ngit config credential.helper store\n```\n\n# 2. 缺点\n\n密码将会以明文形式存储在~/.git-credentials文件中，不安全。","source":"_posts/2018-10-git-credential.md","raw":"---\ntitle: 利用git credential免密认证git http仓库\ndate: 2018-10-29 14:32:30\ntags: [git,command,node]\ncategories: [git]\n---\n\n# 1. 命令\n\n在git仓库目录下执行\n\n```bash\ngit config user.name xxx\ngit config user.email xxx@xxx.com\ngit config credential.helper store\n```\n\n# 2. 缺点\n\n密码将会以明文形式存储在~/.git-credentials文件中，不安全。","slug":"git-credential","published":1,"updated":"2018-10-29T06:37:03.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjntxl14x0007g3s6r9g7chmw","content":"<h1 id=\"1-命令\"><a href=\"#1-命令\" class=\"headerlink\" title=\"1. 命令\"></a>1. 命令</h1><p>在git仓库目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name xxx</span><br><span class=\"line\">git config user.email xxx@xxx.com</span><br><span class=\"line\">git config credential.helper store</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h1><p>密码将会以明文形式存储在~/.git-credentials文件中，不安全。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-命令\"><a href=\"#1-命令\" class=\"headerlink\" title=\"1. 命令\"></a>1. 命令</h1><p>在git仓库目录下执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name xxx</span><br><span class=\"line\">git config user.email xxx@xxx.com</span><br><span class=\"line\">git config credential.helper store</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-缺点\"><a href=\"#2-缺点\" class=\"headerlink\" title=\"2. 缺点\"></a>2. 缺点</h1><p>密码将会以明文形式存储在~/.git-credentials文件中，不安全。</p>\n"},{"title":"linux硬盘分区格式化以及挂载","date":"2018-10-23T02:02:43.000Z","_content":"\n# 1. 分区\n\n## 1.1 使用fdisk\n\n1）先查看下是否有磁盘没有分区\n\n```bash\nfdisk -l\n```\n\n2） 分区\n\n```bash\nfdisk /dev/sdb\n```\n\n3）根据提示操作\n\n### 1.2 使用 parted\n\n## 2. 格式化新硬盘\n\n```bash\nmkfs.ext4 /dev/sdb1  \n```\n\n## 3. 挂载\n\n1) 创建/data目录（/data目录为硬盘将挂载的地方）：\n\n```bash\nmkdir /data  \n```\n\n2）挂载分区：\n\n```bash\nmount /dev/sdb1 /data  \n```\n\n## 4. 查看磁盘分区的UUID\n\n```bash\n1. $ sudo blkid  \n```\n\n效果如下：\n\n```bash\n/dev/sda1: UUID=\"8048997a-16c9-447b-a209-82e4d380326e\" TYPE=\"ext4\"\n/dev/sda5: UUID=\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\" TYPE=\"swap\"\n/dev/sdb1: UUID=\"11263962-9715-473f-9421-0b604e895aaa\" TYPE=\"ext4\"\n/dev/sr0: LABEL=\"Join Me\" TYPE=\"iso9660\" \n```\n\n## 5. 配置开机自动挂载：\n因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：\n\n```bash\nsudo vim /etc/fstab  \n```\n\n加入：\n\n```bash\nUUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1\n```\n\n```bash\n注：\n<fs spec> <fs file> <fs vfstype> <fs mntops> <fs freq> <fs passno>\n具体说明，以挂载/dev/sdb1为例:\n<fs spec> :\n分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software\n<fs file> : 具体挂载点的位置，例如：/data\n<fs vfstype> : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs\n<fs mntops> : 挂载参数，一般为defaults\n<fs freq> : 磁盘检查，默认为0\n<fs passno> : 磁盘检查，默认为0,不需要检查 \n```\n\n修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。","source":"_posts/2018-10-linux-mount-harddisk.md","raw":"---\ntitle: linux硬盘分区格式化以及挂载\ndate: 2018-10-23 10:02:43\ntags: [harddisk,linux,mount,format]\ncategories: 运维\n---\n\n# 1. 分区\n\n## 1.1 使用fdisk\n\n1）先查看下是否有磁盘没有分区\n\n```bash\nfdisk -l\n```\n\n2） 分区\n\n```bash\nfdisk /dev/sdb\n```\n\n3）根据提示操作\n\n### 1.2 使用 parted\n\n## 2. 格式化新硬盘\n\n```bash\nmkfs.ext4 /dev/sdb1  \n```\n\n## 3. 挂载\n\n1) 创建/data目录（/data目录为硬盘将挂载的地方）：\n\n```bash\nmkdir /data  \n```\n\n2）挂载分区：\n\n```bash\nmount /dev/sdb1 /data  \n```\n\n## 4. 查看磁盘分区的UUID\n\n```bash\n1. $ sudo blkid  \n```\n\n效果如下：\n\n```bash\n/dev/sda1: UUID=\"8048997a-16c9-447b-a209-82e4d380326e\" TYPE=\"ext4\"\n/dev/sda5: UUID=\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\" TYPE=\"swap\"\n/dev/sdb1: UUID=\"11263962-9715-473f-9421-0b604e895aaa\" TYPE=\"ext4\"\n/dev/sr0: LABEL=\"Join Me\" TYPE=\"iso9660\" \n```\n\n## 5. 配置开机自动挂载：\n因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：\n\n```bash\nsudo vim /etc/fstab  \n```\n\n加入：\n\n```bash\nUUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1\n```\n\n```bash\n注：\n<fs spec> <fs file> <fs vfstype> <fs mntops> <fs freq> <fs passno>\n具体说明，以挂载/dev/sdb1为例:\n<fs spec> :\n分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software\n<fs file> : 具体挂载点的位置，例如：/data\n<fs vfstype> : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs\n<fs mntops> : 挂载参数，一般为defaults\n<fs freq> : 磁盘检查，默认为0\n<fs passno> : 磁盘检查，默认为0,不需要检查 \n```\n\n修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。","slug":"linux-mount-harddisk","published":1,"updated":"2018-10-23T02:58:52.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjntxl14z000ag3s6bxsjxbod","content":"<h1 id=\"1-分区\"><a href=\"#1-分区\" class=\"headerlink\" title=\"1. 分区\"></a>1. 分区</h1><h2 id=\"1-1-使用fdisk\"><a href=\"#1-1-使用fdisk\" class=\"headerlink\" title=\"1.1 使用fdisk\"></a>1.1 使用fdisk</h2><p>1）先查看下是否有磁盘没有分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n<p>2） 分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n<p>3）根据提示操作</p>\n<h3 id=\"1-2-使用-parted\"><a href=\"#1-2-使用-parted\" class=\"headerlink\" title=\"1.2 使用 parted\"></a>1.2 使用 parted</h3><h2 id=\"2-格式化新硬盘\"><a href=\"#2-格式化新硬盘\" class=\"headerlink\" title=\"2. 格式化新硬盘\"></a>2. 格式化新硬盘</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-挂载\"><a href=\"#3-挂载\" class=\"headerlink\" title=\"3. 挂载\"></a>3. 挂载</h2><p>1) 创建/data目录（/data目录为硬盘将挂载的地方）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data</span><br></pre></td></tr></table></figure>\n<p>2）挂载分区：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sdb1 /data</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-查看磁盘分区的UUID\"><a href=\"#4-查看磁盘分区的UUID\" class=\"headerlink\" title=\"4. 查看磁盘分区的UUID\"></a>4. 查看磁盘分区的UUID</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. $ sudo blkid</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda1: UUID=<span class=\"string\">\"8048997a-16c9-447b-a209-82e4d380326e\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sda5: UUID=<span class=\"string\">\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\"</span> TYPE=<span class=\"string\">\"swap\"</span></span><br><span class=\"line\">/dev/sdb1: UUID=<span class=\"string\">\"11263962-9715-473f-9421-0b604e895aaa\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sr0: LABEL=<span class=\"string\">\"Join Me\"</span> TYPE=<span class=\"string\">\"iso9660\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-配置开机自动挂载：\"><a href=\"#5-配置开机自动挂载：\" class=\"headerlink\" title=\"5. 配置开机自动挂载：\"></a>5. 配置开机自动挂载：</h2><p>因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：</span><br><span class=\"line\">&lt;fs spec&gt; &lt;fs file&gt; &lt;fs vfstype&gt; &lt;fs mntops&gt; &lt;fs freq&gt; &lt;fs passno&gt;</span><br><span class=\"line\">具体说明，以挂载/dev/sdb1为例:</span><br><span class=\"line\">&lt;fs spec&gt; :</span><br><span class=\"line\">分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software</span><br><span class=\"line\">&lt;fs file&gt; : 具体挂载点的位置，例如：/data</span><br><span class=\"line\">&lt;fs vfstype&gt; : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs</span><br><span class=\"line\">&lt;fs mntops&gt; : 挂载参数，一般为defaults</span><br><span class=\"line\">&lt;fs freq&gt; : 磁盘检查，默认为0</span><br><span class=\"line\">&lt;fs passno&gt; : 磁盘检查，默认为0,不需要检查</span><br></pre></td></tr></table></figure>\n<p>修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-分区\"><a href=\"#1-分区\" class=\"headerlink\" title=\"1. 分区\"></a>1. 分区</h1><h2 id=\"1-1-使用fdisk\"><a href=\"#1-1-使用fdisk\" class=\"headerlink\" title=\"1.1 使用fdisk\"></a>1.1 使用fdisk</h2><p>1）先查看下是否有磁盘没有分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n<p>2） 分区</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n<p>3）根据提示操作</p>\n<h3 id=\"1-2-使用-parted\"><a href=\"#1-2-使用-parted\" class=\"headerlink\" title=\"1.2 使用 parted\"></a>1.2 使用 parted</h3><h2 id=\"2-格式化新硬盘\"><a href=\"#2-格式化新硬盘\" class=\"headerlink\" title=\"2. 格式化新硬盘\"></a>2. 格式化新硬盘</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-挂载\"><a href=\"#3-挂载\" class=\"headerlink\" title=\"3. 挂载\"></a>3. 挂载</h2><p>1) 创建/data目录（/data目录为硬盘将挂载的地方）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /data</span><br></pre></td></tr></table></figure>\n<p>2）挂载分区：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sdb1 /data</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-查看磁盘分区的UUID\"><a href=\"#4-查看磁盘分区的UUID\" class=\"headerlink\" title=\"4. 查看磁盘分区的UUID\"></a>4. 查看磁盘分区的UUID</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. $ sudo blkid</span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/dev/sda1: UUID=<span class=\"string\">\"8048997a-16c9-447b-a209-82e4d380326e\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sda5: UUID=<span class=\"string\">\"0c5f073a-ad3f-414f-85c2-4af83f6a437f\"</span> TYPE=<span class=\"string\">\"swap\"</span></span><br><span class=\"line\">/dev/sdb1: UUID=<span class=\"string\">\"11263962-9715-473f-9421-0b604e895aaa\"</span> TYPE=<span class=\"string\">\"ext4\"</span></span><br><span class=\"line\">/dev/sr0: LABEL=<span class=\"string\">\"Join Me\"</span> TYPE=<span class=\"string\">\"iso9660\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-配置开机自动挂载：\"><a href=\"#5-配置开机自动挂载：\" class=\"headerlink\" title=\"5. 配置开机自动挂载：\"></a>5. 配置开机自动挂载：</h2><p>因为mount命令会在重启服务器后失效，所以要将分区信息写到/etc/fstab文件中让它永久挂载：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>\n<p>加入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=11263962-9715-473f-9421-0b604e895aaa /data ext4 defaults 0 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注：</span><br><span class=\"line\">&lt;fs spec&gt; &lt;fs file&gt; &lt;fs vfstype&gt; &lt;fs mntops&gt; &lt;fs freq&gt; &lt;fs passno&gt;</span><br><span class=\"line\">具体说明，以挂载/dev/sdb1为例:</span><br><span class=\"line\">&lt;fs spec&gt; :</span><br><span class=\"line\">分区定位，可以给UUID或LABEL，例如：UUID=6E9ADAC29ADA85CD或LABEL=software</span><br><span class=\"line\">&lt;fs file&gt; : 具体挂载点的位置，例如：/data</span><br><span class=\"line\">&lt;fs vfstype&gt; : 挂载磁盘类型，linux分区一般为ext4，windows分区一般为ntfs</span><br><span class=\"line\">&lt;fs mntops&gt; : 挂载参数，一般为defaults</span><br><span class=\"line\">&lt;fs freq&gt; : 磁盘检查，默认为0</span><br><span class=\"line\">&lt;fs passno&gt; : 磁盘检查，默认为0,不需要检查</span><br></pre></td></tr></table></figure>\n<p>修改完/etc/fstab文件后，运行sudo mount -a命令验证一下配置是否正确。如果配置不正确可能会导致系统无法正常启动。</p>\n"},{"title":"利用ApplicationContextAware制作一个获取ApplicationContext的Provider","date":"2018-10-26T02:54:37.000Z","_content":"\n# 1. 定义一个继承 ApplicationContextAware 的 bean\n\n定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean\n\n```java\n@Component\npublic class ApplicationContextProvider implements ApplicationContextAware {\n\n  private ApplicationContext applicationContext;\n\n  @Override\n  public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n    this.applicationContext = applicationContext;\n  }\n\n  public ApplicationContext getContext() {\n    return applicationContext;\n  }\n\n}\n```\n\n# 2. 使用\n\n``` java\n@Service\npublic class UseSample {\n  @Autoware\n  private ApplicationContextProvider applicationContextProvider;\n\n  public void sample(){\n    ApplicationContext appctx = applicationContextProvider.getContext();\n    ......\n    ......\n\n  }\n}\n\n```\n\n# 3. 实现原理\n\nspirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用\nsetApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。\n\n\nspring源码:\n\n```java\nprivate void invokeAwareInterfaces(Object bean) {\n        .....\n if (bean instanceof ApplicationContextAware) {\n  ((ApplicationContextAware)bean).setApplicationContext(this.applicationContext);\n   }\n}\n```","source":"_posts/2018-10-use-of-application-context-aware.md","raw":"---\ntitle: 利用ApplicationContextAware制作一个获取ApplicationContext的Provider\ndate: 2018-10-26 10:54:37\ntags: [spring]\ncategories: [bean]\n---\n\n# 1. 定义一个继承 ApplicationContextAware 的 bean\n\n定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean\n\n```java\n@Component\npublic class ApplicationContextProvider implements ApplicationContextAware {\n\n  private ApplicationContext applicationContext;\n\n  @Override\n  public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n    this.applicationContext = applicationContext;\n  }\n\n  public ApplicationContext getContext() {\n    return applicationContext;\n  }\n\n}\n```\n\n# 2. 使用\n\n``` java\n@Service\npublic class UseSample {\n  @Autoware\n  private ApplicationContextProvider applicationContextProvider;\n\n  public void sample(){\n    ApplicationContext appctx = applicationContextProvider.getContext();\n    ......\n    ......\n\n  }\n}\n\n```\n\n# 3. 实现原理\n\nspirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用\nsetApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。\n\n\nspring源码:\n\n```java\nprivate void invokeAwareInterfaces(Object bean) {\n        .....\n if (bean instanceof ApplicationContextAware) {\n  ((ApplicationContextAware)bean).setApplicationContext(this.applicationContext);\n   }\n}\n```","slug":"use-of-application-context-aware","published":1,"updated":"2018-10-26T03:18:35.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjntxl150000bg3s6p0y4d1en","content":"<h1 id=\"1-定义一个继承-ApplicationContextAware-的-bean\"><a href=\"#1-定义一个继承-ApplicationContextAware-的-bean\" class=\"headerlink\" title=\"1. 定义一个继承 ApplicationContextAware 的 bean\"></a>1. 定义一个继承 ApplicationContextAware 的 bean</h1><p>定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationContextProvider</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ApplicationContext <span class=\"title\">getContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseSample</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Autoware</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContextProvider applicationContextProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sample</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ApplicationContext appctx = applicationContextProvider.getContext();</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-实现原理\"><a href=\"#3-实现原理\" class=\"headerlink\" title=\"3. 实现原理\"></a>3. 实现原理</h1><p>spirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用<br>setApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。</p>\n<p>spring源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAwareInterfaces</span><span class=\"params\">(Object bean)</span> </span>&#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationContextAware) &#123;</span><br><span class=\"line\">  ((ApplicationContextAware)bean).setApplicationContext(<span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-定义一个继承-ApplicationContextAware-的-bean\"><a href=\"#1-定义一个继承-ApplicationContextAware-的-bean\" class=\"headerlink\" title=\"1. 定义一个继承 ApplicationContextAware 的 bean\"></a>1. 定义一个继承 ApplicationContextAware 的 bean</h1><p>定义一个类ApplicationContextProvider，继承ApplicationContextAware,并用@Component注册一个bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApplicationContextProvider</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.applicationContext = applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ApplicationContext <span class=\"title\">getContext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> applicationContext;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2. 使用\"></a>2. 使用</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UseSample</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Autoware</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> ApplicationContextProvider applicationContextProvider;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sample</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ApplicationContext appctx = applicationContextProvider.getContext();</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    ......</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-实现原理\"><a href=\"#3-实现原理\" class=\"headerlink\" title=\"3. 实现原理\"></a>3. 实现原理</h1><p>spirng初始化的bean时，将会查看这个bean是否实现了ApplicationContextAware接口。如果是，将会调用<br>setApplicationContext()方法。我们在ApplicationContextProvider在实现把AppContext的地址保存到了私有变量中。</p>\n<p>spring源码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">invokeAwareInterfaces</span><span class=\"params\">(Object bean)</span> </span>&#123;</span><br><span class=\"line\">        .....</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> ApplicationContextAware) &#123;</span><br><span class=\"line\">  ((ApplicationContextAware)bean).setApplicationContext(<span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"rsync简易使用方法","date":"2018-10-23T01:53:50.000Z","_content":"\n# rsync命令_Linux rsync 命令\n\n------\n\nrsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。\n\n```bash\n rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/\n```","source":"_posts/2018-10-rsync.md","raw":"---\ntitle: rsync简易使用方法\ndate: 2018-10-23 09:53:50\ntags: [bash,command,sync]\ncategories: 运维\n---\n\n# rsync命令_Linux rsync 命令\n\n------\n\nrsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。\n\n```bash\n rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/\n```","slug":"rsync","published":1,"updated":"2018-10-23T02:03:45.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjntxl151000fg3s66ymn5frn","content":"<h1 id=\"rsync命令-Linux-rsync-命令\"><a href=\"#rsync命令-Linux-rsync-命令\" class=\"headerlink\" title=\"rsync命令_Linux rsync 命令\"></a>rsync命令_Linux rsync 命令</h1><hr>\n<p>rsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"rsync命令-Linux-rsync-命令\"><a href=\"#rsync命令-Linux-rsync-命令\" class=\"headerlink\" title=\"rsync命令_Linux rsync 命令\"></a>rsync命令_Linux rsync 命令</h1><hr>\n<p>rsync是能同步更新两处计算机的文件与目录，并适当利用差分编码以减少数据传输量。rsync中的一项同类软件不常见的重要特性是每个目标的镜像只需发送一次。rsync可以拷贝／显示目录内容，以及拷贝文件，并可选压缩以及递归拷贝。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -avp /data/deploy/opt/data_bk/ /data/deploy/opt/data/</span><br></pre></td></tr></table></figure>"},{"title":"Spring自定义Scope (译)","date":"2018-10-24T01:16:21.000Z","_content":"\n# 1. 概述\n\n开箱即用的spring boot提供了\"singleton\"和\"prototype\"2个标准的，可以在任何spring application中使用的bean scope，\n以及\"request\",\"session\",\"globalSession\" 3个附加的，只能在web-aware application中使用的bean scope。\n\n标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。\n\n比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。\n\n在这篇教程中，将阐述怎样在spring中 **创建,注册,使用** 自定义bean scope。\n\n# 2. 创建一个自定义Scope类\n\n为了创建一个自定义类，我们需要implement Scope Interface,\n并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。\n\n# 2.1 管理 Scope Object \bCallback\n\n实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。\n举个例子，本教程使用了线程安全的 synchronized maps.\n让我们开始定义我们的scope类\n\n```java\npublic class TenantScope implements Scope {\n    private Map<String, Object> scopedObjects\n      = Collections.synchronizedMap(new HashMap<String, Object>());\n    private Map<String, Runnable> destructionCallbacks\n      = Collections.synchronizedMap(new HashMap<String, Runnable>());\n...\n}\n```\n\n# 2.2 从Scope中获取\bObject\n\n为了用name\b从Scope获取Object，我们需要实现getObject方法，**如果取不到Object，我们必须新建一个Object并返回它**\n\n在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。\n\n```java\n@Override\npublic Object get(String name, ObjectFactory<?> objectFactory) {\n    if(!scopedObjects.containsKey(name)) {\n        scopedObjects.put(name, objectFactory.getObject());\n    }\n    return scopedObjects.get(name);\n}\n```\n\n在Scope接口中定义的5个方法中，**只有get方法是\b必须要实现的**，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。\n\n# 2.3 实现销毁回调（Destruction Callback）\n\n我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。\n\n```java\n@Override\npublic void registerDestructionCallback(String name, Runnable callback) {\n    destructionCallbacks.put(name, callback);\n}\n```\n\n# 2.4 从Scope移除Object\n\n接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object\n\n```java\n@Override\npublic Object remove(String name) {\n    destructionCallbacks.remove(name);\n    return scopedObjects.remove(name);\n}\n```\n\n注意： **是调用此方法的caller去真正的执行callback并销毁被移除的object**\n\n# 2.5 获取Conversation ID\n\n现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,\n你可以在这里返回，如果不支持，返回null就可以。\n\n```java\n@Override\npublic String getConversationId() {\n    return \"tenant\";\n}\n```\n\n# 2.6 Resolving Contextual Objects\n\n最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。\n如果不支持，返回null就可以了。\n\n```java\n@Override\npublic Object resolveContextualObject(String key) {\n    return null;\n}\n```\n\n# 3. 注册自定义Scope\n\n为了让spring容器意识到你的新Scope，**我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope**. 我们来看一个这个方法的定义\n\n```java\nvoid registerScope(String scopeName, Scope scope);\n```\n\n第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。\n\n让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope\n\n```java\npublic class TenantBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory factory) throws BeansException {\n        factory.registerScope(\"tenant\", new TenantScope());\n    }\n}\n```\n\n现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。\n\n```java\n@Configuration\npublic class TenantScopeConfig {\n    @Bean\n    public static BeanFactoryPostProcessor beanFactoryPostProcessor() {\n        return new TenantBeanFactoryPostProcessor();\n    }\n}\n```\n\n# 4. 使用自定义Scope\n\n至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。\n\n先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。\n\n```java\npublic class TenantBean {\n\n    private final String name;\n\n    public TenantBean(String name) {\n        this.name = name;\n    }\n\n    public void sayHello() {\n        System.out.println(\n          String.format(\"Hello from %s of type %s\",\n          this.name,\n          this.getClass().getName()));\n    }\n}\n```\n\n注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans\n\n```java\n@Configuration\npublic class TenantBeansConfig {\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean foo() {\n        return new TenantBean(\"foo\");\n    }\n\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean bar() {\n        return new TenantBean(\"bar\");\n    }\n}\n```\n\n# 5. 测试自定义Scope\n\n让我们写一些单元测试测试一下\n\n```java\n@Test\npublic final void whenRegisterScopeAndBeans_thenContextContainsFooAndBar() {\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n    try{\n        ctx.register(TenantScopeConfig.class);\n        ctx.register(TenantBeansConfig.class);\n        ctx.refresh();\n\n        TenantBean foo = (TenantBean) ctx.getBean(\"foo\", TenantBean.class);\n        foo.sayHello();\n        TenantBean bar = (TenantBean) ctx.getBean(\"bar\", TenantBean.class);\n        bar.sayHello();\n        Map<String, TenantBean> foos = ctx.getBeansOfType(TenantBean.class);\n\n        assertThat(foo, not(equalTo(bar)));\n        assertThat(foos.size(), equalTo(2));\n        assertTrue(foos.containsValue(foo));\n        assertTrue(foos.containsValue(bar));\n\n        BeanDefinition fooDefinition = ctx.getBeanDefinition(\"foo\");\n        BeanDefinition barDefinition = ctx.getBeanDefinition(\"bar\");\n\n        assertThat(fooDefinition.getScope(), equalTo(\"tenant\"));\n        assertThat(barDefinition.getScope(), equalTo(\"tenant\"));\n    }\n    finally {\n        ctx.close();\n    }\n}\n```\n\n测试输出：\n\n```log\nHello from foo of type org.baeldung.customscope.TenantBean\nHello from bar of type org.baeldung.customscope.TenantBean\n```\n\n# 6. 总结\n\n在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读\n[Spring Framework Reference](https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom)了解更多细节，你也可以通过[Spring Framework](https://github.com/spring-projects/spring-framework)源码.看一下Spring是如何实现了各种Scope.\n\n\b你可以[点这里](https://github.com/eugenp/tutorials/tree/master/spring-all)获取本教程代码\n\n**[原文链接](https://www.baeldung.com/spring-custom-scope)** : [https://www.baeldung.com/spring-custom-scope](https://www.baeldung.com/spring-custom-scope)","source":"_posts/2018-10-spring-custom-scope.md","raw":"---\ntitle: Spring自定义Scope (译)\ndate: 2018-10-24 09:16:21\ntags: [spring,scope,java,scope,译]\ncategories: spring \n---\n\n# 1. 概述\n\n开箱即用的spring boot提供了\"singleton\"和\"prototype\"2个标准的，可以在任何spring application中使用的bean scope，\n以及\"request\",\"session\",\"globalSession\" 3个附加的，只能在web-aware application中使用的bean scope。\n\n标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。\n\n比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。\n\n在这篇教程中，将阐述怎样在spring中 **创建,注册,使用** 自定义bean scope。\n\n# 2. 创建一个自定义Scope类\n\n为了创建一个自定义类，我们需要implement Scope Interface,\n并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。\n\n# 2.1 管理 Scope Object \bCallback\n\n实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。\n举个例子，本教程使用了线程安全的 synchronized maps.\n让我们开始定义我们的scope类\n\n```java\npublic class TenantScope implements Scope {\n    private Map<String, Object> scopedObjects\n      = Collections.synchronizedMap(new HashMap<String, Object>());\n    private Map<String, Runnable> destructionCallbacks\n      = Collections.synchronizedMap(new HashMap<String, Runnable>());\n...\n}\n```\n\n# 2.2 从Scope中获取\bObject\n\n为了用name\b从Scope获取Object，我们需要实现getObject方法，**如果取不到Object，我们必须新建一个Object并返回它**\n\n在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。\n\n```java\n@Override\npublic Object get(String name, ObjectFactory<?> objectFactory) {\n    if(!scopedObjects.containsKey(name)) {\n        scopedObjects.put(name, objectFactory.getObject());\n    }\n    return scopedObjects.get(name);\n}\n```\n\n在Scope接口中定义的5个方法中，**只有get方法是\b必须要实现的**，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。\n\n# 2.3 实现销毁回调（Destruction Callback）\n\n我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。\n\n```java\n@Override\npublic void registerDestructionCallback(String name, Runnable callback) {\n    destructionCallbacks.put(name, callback);\n}\n```\n\n# 2.4 从Scope移除Object\n\n接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object\n\n```java\n@Override\npublic Object remove(String name) {\n    destructionCallbacks.remove(name);\n    return scopedObjects.remove(name);\n}\n```\n\n注意： **是调用此方法的caller去真正的执行callback并销毁被移除的object**\n\n# 2.5 获取Conversation ID\n\n现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,\n你可以在这里返回，如果不支持，返回null就可以。\n\n```java\n@Override\npublic String getConversationId() {\n    return \"tenant\";\n}\n```\n\n# 2.6 Resolving Contextual Objects\n\n最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。\n如果不支持，返回null就可以了。\n\n```java\n@Override\npublic Object resolveContextualObject(String key) {\n    return null;\n}\n```\n\n# 3. 注册自定义Scope\n\n为了让spring容器意识到你的新Scope，**我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope**. 我们来看一个这个方法的定义\n\n```java\nvoid registerScope(String scopeName, Scope scope);\n```\n\n第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。\n\n让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope\n\n```java\npublic class TenantBeanFactoryPostProcessor implements BeanFactoryPostProcessor {\n    @Override\n    public void postProcessBeanFactory(ConfigurableListableBeanFactory factory) throws BeansException {\n        factory.registerScope(\"tenant\", new TenantScope());\n    }\n}\n```\n\n现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。\n\n```java\n@Configuration\npublic class TenantScopeConfig {\n    @Bean\n    public static BeanFactoryPostProcessor beanFactoryPostProcessor() {\n        return new TenantBeanFactoryPostProcessor();\n    }\n}\n```\n\n# 4. 使用自定义Scope\n\n至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。\n\n先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。\n\n```java\npublic class TenantBean {\n\n    private final String name;\n\n    public TenantBean(String name) {\n        this.name = name;\n    }\n\n    public void sayHello() {\n        System.out.println(\n          String.format(\"Hello from %s of type %s\",\n          this.name,\n          this.getClass().getName()));\n    }\n}\n```\n\n注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans\n\n```java\n@Configuration\npublic class TenantBeansConfig {\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean foo() {\n        return new TenantBean(\"foo\");\n    }\n\n    @Scope(scopeName = \"tenant\")\n    @Bean\n    public TenantBean bar() {\n        return new TenantBean(\"bar\");\n    }\n}\n```\n\n# 5. 测试自定义Scope\n\n让我们写一些单元测试测试一下\n\n```java\n@Test\npublic final void whenRegisterScopeAndBeans_thenContextContainsFooAndBar() {\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n    try{\n        ctx.register(TenantScopeConfig.class);\n        ctx.register(TenantBeansConfig.class);\n        ctx.refresh();\n\n        TenantBean foo = (TenantBean) ctx.getBean(\"foo\", TenantBean.class);\n        foo.sayHello();\n        TenantBean bar = (TenantBean) ctx.getBean(\"bar\", TenantBean.class);\n        bar.sayHello();\n        Map<String, TenantBean> foos = ctx.getBeansOfType(TenantBean.class);\n\n        assertThat(foo, not(equalTo(bar)));\n        assertThat(foos.size(), equalTo(2));\n        assertTrue(foos.containsValue(foo));\n        assertTrue(foos.containsValue(bar));\n\n        BeanDefinition fooDefinition = ctx.getBeanDefinition(\"foo\");\n        BeanDefinition barDefinition = ctx.getBeanDefinition(\"bar\");\n\n        assertThat(fooDefinition.getScope(), equalTo(\"tenant\"));\n        assertThat(barDefinition.getScope(), equalTo(\"tenant\"));\n    }\n    finally {\n        ctx.close();\n    }\n}\n```\n\n测试输出：\n\n```log\nHello from foo of type org.baeldung.customscope.TenantBean\nHello from bar of type org.baeldung.customscope.TenantBean\n```\n\n# 6. 总结\n\n在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读\n[Spring Framework Reference](https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom)了解更多细节，你也可以通过[Spring Framework](https://github.com/spring-projects/spring-framework)源码.看一下Spring是如何实现了各种Scope.\n\n\b你可以[点这里](https://github.com/eugenp/tutorials/tree/master/spring-all)获取本教程代码\n\n**[原文链接](https://www.baeldung.com/spring-custom-scope)** : [https://www.baeldung.com/spring-custom-scope](https://www.baeldung.com/spring-custom-scope)","slug":"spring-custom-scope","published":1,"updated":"2018-10-26T03:27:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjntxl153000ig3s6s4ezr4b9","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>开箱即用的spring boot提供了”singleton”和”prototype”2个标准的，可以在任何spring application中使用的bean scope，<br>以及”request”,”session”,”globalSession” 3个附加的，只能在web-aware application中使用的bean scope。</p>\n<p>标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。</p>\n<p>比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。</p>\n<p>在这篇教程中，将阐述怎样在spring中 <strong>创建,注册,使用</strong> 自定义bean scope。</p>\n<h1 id=\"2-创建一个自定义Scope类\"><a href=\"#2-创建一个自定义Scope类\" class=\"headerlink\" title=\"2. 创建一个自定义Scope类\"></a>2. 创建一个自定义Scope类</h1><p>为了创建一个自定义类，我们需要implement Scope Interface,<br>并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。</p>\n<h1 id=\"2-1-管理-Scope-Object-Callback\"><a href=\"#2-1-管理-Scope-Object-Callback\" class=\"headerlink\" title=\"2.1 管理 Scope Object \bCallback\"></a>2.1 管理 Scope Object \bCallback</h1><p>实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。<br>举个例子，本教程使用了线程安全的 synchronized maps.<br>让我们开始定义我们的scope类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScope</span> <span class=\"keyword\">implements</span> <span class=\"title\">Scope</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; scopedObjects</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Runnable&gt; destructionCallbacks</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Runnable&gt;());</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-从Scope中获取Object\"><a href=\"#2-2-从Scope中获取Object\" class=\"headerlink\" title=\"2.2 从Scope中获取\bObject\"></a>2.2 从Scope中获取\bObject</h1><p>为了用name\b从Scope获取Object，我们需要实现getObject方法，<strong>如果取不到Object，我们必须新建一个Object并返回它</strong></p>\n<p>在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(String name, ObjectFactory&lt;?&gt; objectFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!scopedObjects.containsKey(name)) &#123;</span><br><span class=\"line\">        scopedObjects.put(name, objectFactory.getObject());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.get(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Scope接口中定义的5个方法中，<strong>只有get方法是\b必须要实现的</strong>，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。</p>\n<h1 id=\"2-3-实现销毁回调（Destruction-Callback）\"><a href=\"#2-3-实现销毁回调（Destruction-Callback）\" class=\"headerlink\" title=\"2.3 实现销毁回调（Destruction Callback）\"></a>2.3 实现销毁回调（Destruction Callback）</h1><p>我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDestructionCallback</span><span class=\"params\">(String name, Runnable callback)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.put(name, callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-4-从Scope移除Object\"><a href=\"#2-4-从Scope移除Object\" class=\"headerlink\" title=\"2.4 从Scope移除Object\"></a>2.4 从Scope移除Object</h1><p>接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">remove</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.remove(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.remove(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： <strong>是调用此方法的caller去真正的执行callback并销毁被移除的object</strong></p>\n<h1 id=\"2-5-获取Conversation-ID\"><a href=\"#2-5-获取Conversation-ID\" class=\"headerlink\" title=\"2.5 获取Conversation ID\"></a>2.5 获取Conversation ID</h1><p>现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,<br>你可以在这里返回，如果不支持，返回null就可以。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConversationId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"tenant\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-6-Resolving-Contextual-Objects\"><a href=\"#2-6-Resolving-Contextual-Objects\" class=\"headerlink\" title=\"2.6 Resolving Contextual Objects\"></a>2.6 Resolving Contextual Objects</h1><p>最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。<br>如果不支持，返回null就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveContextualObject</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-注册自定义Scope\"><a href=\"#3-注册自定义Scope\" class=\"headerlink\" title=\"3. 注册自定义Scope\"></a>3. 注册自定义Scope</h1><p>为了让spring容器意识到你的新Scope，<strong>我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope</strong>. 我们来看一个这个方法的定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registerScope</span><span class=\"params\">(String scopeName, Scope scope)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。</p>\n<p>让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeanFactoryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory factory)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        factory.registerScope(<span class=\"string\">\"tenant\"</span>, <span class=\"keyword\">new</span> TenantScope());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScopeConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BeanFactoryPostProcessor <span class=\"title\">beanFactoryPostProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBeanFactoryPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-使用自定义Scope\"><a href=\"#4-使用自定义Scope\" class=\"headerlink\" title=\"4. 使用自定义Scope\"></a>4. 使用自定义Scope</h1><p>至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。</p>\n<p>先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TenantBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">          String.format(<span class=\"string\">\"Hello from %s of type %s\"</span>,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.getClass().getName()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeansConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-测试自定义Scope\"><a href=\"#5-测试自定义Scope\" class=\"headerlink\" title=\"5. 测试自定义Scope\"></a>5. 测试自定义Scope</h1><p>让我们写一些单元测试测试一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">whenRegisterScopeAndBeans_thenContextContainsFooAndBar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AnnotationConfigApplicationContext ctx = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        ctx.register(TenantScopeConfig.class);</span><br><span class=\"line\">        ctx.register(TenantBeansConfig.class);</span><br><span class=\"line\">        ctx.refresh();</span><br><span class=\"line\"></span><br><span class=\"line\">        TenantBean foo = (TenantBean) ctx.getBean(<span class=\"string\">\"foo\"</span>, TenantBean.class);</span><br><span class=\"line\">        foo.sayHello();</span><br><span class=\"line\">        TenantBean bar = (TenantBean) ctx.getBean(<span class=\"string\">\"bar\"</span>, TenantBean.class);</span><br><span class=\"line\">        bar.sayHello();</span><br><span class=\"line\">        Map&lt;String, TenantBean&gt; foos = ctx.getBeansOfType(TenantBean.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(foo, not(equalTo(bar)));</span><br><span class=\"line\">        assertThat(foos.size(), equalTo(<span class=\"number\">2</span>));</span><br><span class=\"line\">        assertTrue(foos.containsValue(foo));</span><br><span class=\"line\">        assertTrue(foos.containsValue(bar));</span><br><span class=\"line\"></span><br><span class=\"line\">        BeanDefinition fooDefinition = ctx.getBeanDefinition(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">        BeanDefinition barDefinition = ctx.getBeanDefinition(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(fooDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">        assertThat(barDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello from foo of type org.baeldung.customscope.TenantBean</span><br><span class=\"line\">Hello from bar of type org.baeldung.customscope.TenantBean</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><p>在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读<br><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom\" target=\"_blank\" rel=\"noopener\">Spring Framework Reference</a>了解更多细节，你也可以通过<a href=\"https://github.com/spring-projects/spring-framework\" target=\"_blank\" rel=\"noopener\">Spring Framework</a>源码.看一下Spring是如何实现了各种Scope.</p>\n<p>\b你可以<a href=\"https://github.com/eugenp/tutorials/tree/master/spring-all\" target=\"_blank\" rel=\"noopener\">点这里</a>获取本教程代码</p>\n<p><strong><a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">原文链接</a></strong> : <a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">https://www.baeldung.com/spring-custom-scope</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>开箱即用的spring boot提供了”singleton”和”prototype”2个标准的，可以在任何spring application中使用的bean scope，<br>以及”request”,”session”,”globalSession” 3个附加的，只能在web-aware application中使用的bean scope。</p>\n<p>标准的bean scope 不能被overridden ,web-aware application虽然可以被overiddde，可是常会带来不好的结果，所以不建议去改写。但我们也常常会遇到一些需求是预提供的bean scope满足不了的，需要额外的功能。</p>\n<p>比如，需要开发一个multi-tenant(多租户)系统，你需要为每一个tenant提供一组隔离的bean。\bspring为了支持这类需求，提供了创建自定义Scope的机制。</p>\n<p>在这篇教程中，将阐述怎样在spring中 <strong>创建,注册,使用</strong> 自定义bean scope。</p>\n<h1 id=\"2-创建一个自定义Scope类\"><a href=\"#2-创建一个自定义Scope类\" class=\"headerlink\" title=\"2. 创建一个自定义Scope类\"></a>2. 创建一个自定义Scope类</h1><p>为了创建一个自定义类，我们需要implement Scope Interface,<br>并且因为会被并发调用，必须确保这个实现是进程\u001d安全(thread safe)的。</p>\n<h1 id=\"2-1-管理-Scope-Object-Callback\"><a href=\"#2-1-管理-Scope-Object-Callback\" class=\"headerlink\" title=\"2.1 管理 Scope Object \bCallback\"></a>2.1 管理 Scope Object \bCallback</h1><p>实现自定义Scope首先要考虑怎样存储和管理scoped object 已经 destuction callbacks。我们可以使用map或专用的类。<br>举个例子，本教程使用了线程安全的 synchronized maps.<br>让我们开始定义我们的scope类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScope</span> <span class=\"keyword\">implements</span> <span class=\"title\">Scope</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; scopedObjects</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;());</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Runnable&gt; destructionCallbacks</span><br><span class=\"line\">      = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Runnable&gt;());</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-2-从Scope中获取Object\"><a href=\"#2-2-从Scope中获取Object\" class=\"headerlink\" title=\"2.2 从Scope中获取\bObject\"></a>2.2 从Scope中获取\bObject</h1><p>为了用name\b从Scope获取Object，我们需要实现getObject方法，<strong>如果取不到Object，我们必须新建一个Object并返回它</strong></p>\n<p>在我们的实现中，我们先检查是否能从我们的map中取到Object，如果取到了返回它，\b如果没取到，我们使用\bObjectFactory创建一\b个新的Object，把它添加到map中并返回。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">get</span><span class=\"params\">(String name, ObjectFactory&lt;?&gt; objectFactory)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!scopedObjects.containsKey(name)) &#123;</span><br><span class=\"line\">        scopedObjects.put(name, objectFactory.getObject());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.get(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Scope接口中定义的5个方法中，<strong>只有get方法是\b必须要实现的</strong>，\b其他4个\b方法的实现是可选的，当没有实现却被调用的情况下会抛出UnsupportedOperationException异常。</p>\n<h1 id=\"2-3-实现销毁回调（Destruction-Callback）\"><a href=\"#2-3-实现销毁回调（Destruction-Callback）\" class=\"headerlink\" title=\"2.3 实现销毁回调（Destruction Callback）\"></a>2.3 实现销毁回调（Destruction Callback）</h1><p>我们必须实现registerDestructionCallback方法，这个方法提供了当object或scope本身被销毁的时候的回调。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerDestructionCallback</span><span class=\"params\">(String name, Runnable callback)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.put(name, callback);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-4-从Scope移除Object\"><a href=\"#2-4-从Scope移除Object\" class=\"headerlink\" title=\"2.4 从Scope移除Object\"></a>2.4 从Scope移除Object</h1><p>接下来，让我们实习那remove方法。remove方法从scope删除了object，移除了之前注册的\b销毁时的回调，并且返回被移除的object</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">remove</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">    destructionCallbacks.remove(name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> scopedObjects.remove(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意： <strong>是调用此方法的caller去真正的执行callback并销毁被移除的object</strong></p>\n<h1 id=\"2-5-获取Conversation-ID\"><a href=\"#2-5-获取Conversation-ID\" class=\"headerlink\" title=\"2.5 获取Conversation ID\"></a>2.5 获取Conversation ID</h1><p>现在，让我们实现getConversationId方法，如果你的scope支持conversation ID的概念,<br>你可以在这里返回，如果不支持，返回null就可以。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getConversationId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"tenant\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-6-Resolving-Contextual-Objects\"><a href=\"#2-6-Resolving-Contextual-Objects\" class=\"headerlink\" title=\"2.6 Resolving Contextual Objects\"></a>2.6 Resolving Contextual Objects</h1><p>最后，让我们实现resolveContextualObject,如果你的Scope支持多个contextual object\u001b，你需要用键值对关联每个\bobject\b,并返回调用参数key所对应的object。<br>如果不支持，返回null就可以了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">resolveContextualObject</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-注册自定义Scope\"><a href=\"#3-注册自定义Scope\" class=\"headerlink\" title=\"3. 注册自定义Scope\"></a>3. 注册自定义Scope</h1><p>为了让spring容器意识到你的新Scope，<strong>我们需要调用ConfigurableBeanFactory\b实例的register方法中注册新Scope</strong>. 我们来看一个这个方法的定义</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">registerScope</span><span class=\"params\">(String scopeName, Scope scope)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>第一个参数scopeName是用来定义scope的唯一键，第二个参数scope是是你想要注册使用的自定义Scope的实例。</p>\n<p>让我们创建一个自定义一个BeanFactoryPostProcessor，然后使用ConfigurableListableBeanFactory注册自定义scope</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeanFactoryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory factory)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        factory.registerScope(<span class=\"string\">\"tenant\"</span>, <span class=\"keyword\">new</span> TenantScope());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在，让我们写一个Spring configuration类加载我们的 BeanFactoryPostProcessor实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantScopeConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BeanFactoryPostProcessor <span class=\"title\">beanFactoryPostProcessor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBeanFactoryPostProcessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-使用自定义Scope\"><a href=\"#4-使用自定义Scope\" class=\"headerlink\" title=\"4. 使用自定义Scope\"></a>4. 使用自定义Scope</h1><p>至此，我们已经注册了自定义scope，我们可以像使用任何scope一样使用我们的自定义scope。</p>\n<p>先让我们定义\b一个TenantBean类，我们将会使用tenant-scope注入它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBean</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TenantBean</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHello</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">          String.format(<span class=\"string\">\"Hello from %s of type %s\"</span>,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.name,</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.getClass().getName()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们在这个类上没有使用类级别的@Component和@Scope注解。现在我们在configuration类中定义tenant-scoped beans</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TenantBeansConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Scope</span>(scopeName = <span class=\"string\">\"tenant\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> TenantBean <span class=\"title\">bar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> TenantBean(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-测试自定义Scope\"><a href=\"#5-测试自定义Scope\" class=\"headerlink\" title=\"5. 测试自定义Scope\"></a>5. 测试自定义Scope</h1><p>让我们写一些单元测试测试一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">whenRegisterScopeAndBeans_thenContextContainsFooAndBar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    AnnotationConfigApplicationContext ctx = <span class=\"keyword\">new</span> AnnotationConfigApplicationContext();</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        ctx.register(TenantScopeConfig.class);</span><br><span class=\"line\">        ctx.register(TenantBeansConfig.class);</span><br><span class=\"line\">        ctx.refresh();</span><br><span class=\"line\"></span><br><span class=\"line\">        TenantBean foo = (TenantBean) ctx.getBean(<span class=\"string\">\"foo\"</span>, TenantBean.class);</span><br><span class=\"line\">        foo.sayHello();</span><br><span class=\"line\">        TenantBean bar = (TenantBean) ctx.getBean(<span class=\"string\">\"bar\"</span>, TenantBean.class);</span><br><span class=\"line\">        bar.sayHello();</span><br><span class=\"line\">        Map&lt;String, TenantBean&gt; foos = ctx.getBeansOfType(TenantBean.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(foo, not(equalTo(bar)));</span><br><span class=\"line\">        assertThat(foos.size(), equalTo(<span class=\"number\">2</span>));</span><br><span class=\"line\">        assertTrue(foos.containsValue(foo));</span><br><span class=\"line\">        assertTrue(foos.containsValue(bar));</span><br><span class=\"line\"></span><br><span class=\"line\">        BeanDefinition fooDefinition = ctx.getBeanDefinition(<span class=\"string\">\"foo\"</span>);</span><br><span class=\"line\">        BeanDefinition barDefinition = ctx.getBeanDefinition(<span class=\"string\">\"bar\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        assertThat(fooDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">        assertThat(barDefinition.getScope(), equalTo(<span class=\"string\">\"tenant\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello from foo of type org.baeldung.customscope.TenantBean</span><br><span class=\"line\">Hello from bar of type org.baeldung.customscope.TenantBean</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><p>在本教程中我们演示了spring怎样定义，注册和使用自定义scope。你可以通过阅读<br><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/#beans-factory-scopes-custom\" target=\"_blank\" rel=\"noopener\">Spring Framework Reference</a>了解更多细节，你也可以通过<a href=\"https://github.com/spring-projects/spring-framework\" target=\"_blank\" rel=\"noopener\">Spring Framework</a>源码.看一下Spring是如何实现了各种Scope.</p>\n<p>\b你可以<a href=\"https://github.com/eugenp/tutorials/tree/master/spring-all\" target=\"_blank\" rel=\"noopener\">点这里</a>获取本教程代码</p>\n<p><strong><a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">原文链接</a></strong> : <a href=\"https://www.baeldung.com/spring-custom-scope\" target=\"_blank\" rel=\"noopener\">https://www.baeldung.com/spring-custom-scope</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjntxl14w0006g3s6ba60rinr","category_id":"cjntxl14u0003g3s6dpkg44p4","_id":"cjntxl150000cg3s6ecvsbyeq"},{"post_id":"cjntxl14p0000g3s6o8sndlfm","category_id":"cjntxl14u0003g3s6dpkg44p4","_id":"cjntxl152000gg3s6x8iy3bp2"},{"post_id":"cjntxl14z000ag3s6bxsjxbod","category_id":"cjntxl14u0003g3s6dpkg44p4","_id":"cjntxl155000jg3s605zvmcbw"},{"post_id":"cjntxl14v0005g3s6org7c4ty","category_id":"cjntxl14y0008g3s6d1sx5hsh","_id":"cjntxl156000ng3s6hkudli2j"},{"post_id":"cjntxl151000fg3s66ymn5frn","category_id":"cjntxl14u0003g3s6dpkg44p4","_id":"cjntxl157000og3s67pn1b36i"},{"post_id":"cjntxl14x0007g3s6r9g7chmw","category_id":"cjntxl151000dg3s6irigy0ms","_id":"cjntxl157000qg3s61if96jy4"},{"post_id":"cjntxl153000ig3s6s4ezr4b9","category_id":"cjntxl14y0008g3s6d1sx5hsh","_id":"cjntxl157000rg3s68ahm1pzk"},{"post_id":"cjntxl150000bg3s6p0y4d1en","category_id":"cjntxl156000lg3s617yg943s","_id":"cjntxl158000sg3s6rln0enr0"}],"PostTag":[{"post_id":"cjntxl14p0000g3s6o8sndlfm","tag_id":"cjntxl14v0004g3s6gckmgwsv","_id":"cjntxl152000hg3s6q42ybkmv"},{"post_id":"cjntxl14p0000g3s6o8sndlfm","tag_id":"cjntxl14y0009g3s68y60kexu","_id":"cjntxl155000kg3s6flz26dlo"},{"post_id":"cjntxl14v0005g3s6org7c4ty","tag_id":"cjntxl151000eg3s6tbrtsl6w","_id":"cjntxl158000ug3s6zrs3u3nu"},{"post_id":"cjntxl14v0005g3s6org7c4ty","tag_id":"cjntxl156000mg3s6z17llwq3","_id":"cjntxl158000vg3s68vyernz9"},{"post_id":"cjntxl14v0005g3s6org7c4ty","tag_id":"cjntxl157000pg3s6b34tijei","_id":"cjntxl158000xg3s6vtjlc0bs"},{"post_id":"cjntxl14w0006g3s6ba60rinr","tag_id":"cjntxl158000tg3s6475iko75","_id":"cjntxl158000yg3s6fgpuid0w"},{"post_id":"cjntxl14x0007g3s6r9g7chmw","tag_id":"cjntxl158000wg3s6rvs08mvv","_id":"cjntxl15a0012g3s612210lm5"},{"post_id":"cjntxl14x0007g3s6r9g7chmw","tag_id":"cjntxl159000zg3s698tcwsok","_id":"cjntxl15a0013g3s6jv97gbx6"},{"post_id":"cjntxl14x0007g3s6r9g7chmw","tag_id":"cjntxl1590010g3s60r4attb9","_id":"cjntxl15a0015g3s6lo4zbovr"},{"post_id":"cjntxl14z000ag3s6bxsjxbod","tag_id":"cjntxl15a0011g3s6d2q1i9td","_id":"cjntxl15b0019g3s6lr6apgyr"},{"post_id":"cjntxl14z000ag3s6bxsjxbod","tag_id":"cjntxl15a0014g3s66j463ypp","_id":"cjntxl15c001ag3s6alj1rple"},{"post_id":"cjntxl14z000ag3s6bxsjxbod","tag_id":"cjntxl15a0016g3s6hl41ld4e","_id":"cjntxl15c001cg3s6n0rq4rut"},{"post_id":"cjntxl14z000ag3s6bxsjxbod","tag_id":"cjntxl15a0017g3s6ggmko9ls","_id":"cjntxl15c001dg3s6g310zl5s"},{"post_id":"cjntxl150000bg3s6p0y4d1en","tag_id":"cjntxl151000eg3s6tbrtsl6w","_id":"cjntxl15c001fg3s6dm48bdua"},{"post_id":"cjntxl151000fg3s66ymn5frn","tag_id":"cjntxl14v0004g3s6gckmgwsv","_id":"cjntxl15d001hg3s6mz1maweq"},{"post_id":"cjntxl151000fg3s66ymn5frn","tag_id":"cjntxl159000zg3s698tcwsok","_id":"cjntxl15d001ig3s62bm44lh7"},{"post_id":"cjntxl151000fg3s66ymn5frn","tag_id":"cjntxl15c001eg3s6hilb7g30","_id":"cjntxl15d001kg3s62noqrzql"},{"post_id":"cjntxl153000ig3s6s4ezr4b9","tag_id":"cjntxl151000eg3s6tbrtsl6w","_id":"cjntxl15e001ng3s60643wpl8"},{"post_id":"cjntxl153000ig3s6s4ezr4b9","tag_id":"cjntxl15c001gg3s6ilh4h097","_id":"cjntxl15e001og3s6y65g9e6a"},{"post_id":"cjntxl153000ig3s6s4ezr4b9","tag_id":"cjntxl15d001jg3s6n18933d9","_id":"cjntxl15e001pg3s6xypdd90c"},{"post_id":"cjntxl153000ig3s6s4ezr4b9","tag_id":"cjntxl15c001gg3s6ilh4h097","_id":"cjntxl15e001qg3s6npcgtflf"},{"post_id":"cjntxl153000ig3s6s4ezr4b9","tag_id":"cjntxl15d001mg3s6ilcmzrpp","_id":"cjntxl15e001rg3s6ts75znvl"}],"Tag":[{"name":"bash","_id":"cjntxl14v0004g3s6gckmgwsv"},{"name":"args","_id":"cjntxl14y0009g3s68y60kexu"},{"name":"spring","_id":"cjntxl151000eg3s6tbrtsl6w"},{"name":"handlerMethodResolver","_id":"cjntxl156000mg3s6z17llwq3"},{"name":"springMvc","_id":"cjntxl157000pg3s6b34tijei"},{"name":"elasticsearch","_id":"cjntxl158000tg3s6475iko75"},{"name":"git","_id":"cjntxl158000wg3s6rvs08mvv"},{"name":"command","_id":"cjntxl159000zg3s698tcwsok"},{"name":"node","_id":"cjntxl1590010g3s60r4attb9"},{"name":"harddisk","_id":"cjntxl15a0011g3s6d2q1i9td"},{"name":"linux","_id":"cjntxl15a0014g3s66j463ypp"},{"name":"mount","_id":"cjntxl15a0016g3s6hl41ld4e"},{"name":"format","_id":"cjntxl15a0017g3s6ggmko9ls"},{"name":"sync","_id":"cjntxl15c001eg3s6hilb7g30"},{"name":"scope","_id":"cjntxl15c001gg3s6ilh4h097"},{"name":"java","_id":"cjntxl15d001jg3s6n18933d9"},{"name":"译","_id":"cjntxl15d001mg3s6ilcmzrpp"}]}}